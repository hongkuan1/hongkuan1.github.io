{
    "version": "https://jsonfeed.org/version/1",
    "title": "流年印记 • All posts by \"java\" category",
    "description": "数学 & 软件工程",
    "home_page_url": "https://hongkuan1.github.io",
    "items": [
        {
            "id": "https://hongkuan1.github.io/2023/01/24/java/jvm%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://hongkuan1.github.io/2023/01/24/java/jvm%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "jvm面试题整理",
            "date_published": "2023-01-24T07:48:53.000Z",
            "content_html": "<h2 id=\"jvm底层面试题\"><a class=\"anchor\" href=\"#jvm底层面试题\">#</a> JVM 底层面试题</h2>\n<ol>\n<li>\n<p>说一说 JVM 主要组成部分及其作用<br />\n 1.1. class loader: 类加载器，加载类文件到内存，class loader 只管加载，只要符合文件结构就加载，至于能否运行，它不负责（由 execution engine 负责）<br />\n1.2. execution engine: 执行引擎或解释器，负责解释命令，交由操作系统执行<br />\n 1.3. native interface：本地接口，本地接口的作用是融合不同的语言为 java 所用。<br />\n1.4. runtimeDate area: 运行数据区，这是 jvm 的重点，我们所写的程序都被加载到这里，之后才开始运行。<br />\n- 1.4.1. java virtual machine stacks: 栈也叫栈内存，是 java 程序的运行区，是在线程创建时创建，他的生命周期跟随线程的生命周期，线程结束时，栈内存释放；<br />\n- 1.4.2. 堆内存：一个 JVM 实例只存在一个堆内存，堆内存的大小是可以调节的<br />\n - 1.4.3. program counter register: 程序计数器 当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，</p>\n<p>1.5. 组件作用：通过 class loader 将 java 代码转换成字节码，（runtime data area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给操作系统执行，因此还需要特定命令的执行引擎（execution engine）, 将字节码翻译成底层系统指令，再交由 CPU 执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p>\n</li>\n<li>\n<p>说一下 JVM 运行时数据区<br />\n程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能，都需要依赖这个计数器来完成；<br />\nJava 虚拟机栈（Java Virtual Machine Stacks）：用于存储局部变量表、操作数栈、动态链接、方法出口等信息；<br />\n本地方法栈（Native Method Stack）：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的；<br />\nJava 堆（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存；<br />\n方法区（Methed Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</p>\n</li>\n</ol>\n<p>总结下来</p>\n<ul>\n<li>\n<p>spring 是核心，提供了基础功能</p>\n<ul>\n<li>控制反转 (IoC) ：管理 Bean 的生命周期</li>\n<li>面向切面编程 (AOP) ：OOP 是从纵向解决代码重复问题，AOP 则是从横向解决代码重复的问题。(性能监视，事务管理，安全检查，缓存)，将业务逻辑和系统处理的代码进行解耦，如 关闭连接，事务管理，操作日志\n<ul>\n<li>@Before 前置通知</li>\n<li>@After 后置通知</li>\n<li>@AfterReturning 返回后通知</li>\n<li>@AfterThrowing 异常通知</li>\n<li>@Around 环绕通知</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>springmvc 是基于 spring mvc 框架</p>\n</li>\n<li>\n<p>springboot 是为了简化 spring 配置的快速开发整合包</p>\n</li>\n<li>\n<p>spring cloud 是构建在 spring boot 之上的服务治理框架</p>\n</li>\n<li>\n<p>Java 集合框架</p>\n<ul>\n<li>List\n<ul>\n<li>ArrayList</li>\n<li>LinkedList</li>\n<li>Vector</li>\n</ul>\n</li>\n<li>Set\n<ul>\n<li>TreeSet</li>\n<li>HashSet</li>\n<li>LinkedHashSet</li>\n</ul>\n</li>\n<li>Queue\n<ul>\n<li>PriorityQueue</li>\n<li>Deque</li>\n<li>DelayQueue</li>\n</ul>\n</li>\n<li>Map\n<ul>\n<li>TreeMap</li>\n<li>HashMap</li>\n<li>LinkedHashMap</li>\n<li>ConcurrentHashMap</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>如何保证接口幂等性</p>\n<ul>\n<li>前端拦截</li>\n<li>数据库实现\n<ul>\n<li>悲观锁实现</li>\n<li>乐观锁实现</li>\n<li>唯一索引实现</li>\n</ul>\n</li>\n<li>JVM 锁实现</li>\n<li>分布式锁实现</li>\n</ul>\n</li>\n<li></li>\n<li>\n<p>MySQL 一条 sql 语句的查询过程</p>\n<ul>\n<li>1. 解析器  -&gt; 2. 执行器 -&gt; 3. 查询优化器 -&gt; 存储引擎</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        }
    ]
}