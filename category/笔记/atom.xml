<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hongkuan.github.io</id>
    <title>流年印记 • Posts by &#34;笔记&#34; category</title>
    <link href="https://hongkuan.github.io" />
    <updated>2023-09-08T09:55:00.000Z</updated>
    <category term="记录" />
    <category term="总结" />
    <category term="学习" />
    <entry>
        <id>https://hongkuan.github.io/2023/09/08/note/softwareEnginee/</id>
        <title>2024软件工程</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/09/08/note/softwareEnginee/"/>
        <content type="html">&lt;h1 id=&#34;概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概述&#34;&gt;#&lt;/a&gt; 概述&lt;/h1&gt;
&lt;h2 id=&#34;软件和软件危机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件和软件危机&#34;&gt;#&lt;/a&gt; 软件和软件危机&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件的定义、特点及定义&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件的定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件不是程序，而是程序、数据以及开发、使用和维护程序需要的所有文档的完整集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件是一种逻辑产品，而不是具体的物理实体，具有抽象性。&lt;/li&gt;
&lt;li&gt;软件产品的生产主要是开发研制，没有明显的制造过程。&lt;/li&gt;
&lt;li&gt;软件产品在使用过程中，不存在磨损、消耗老化等问题。&lt;/li&gt;
&lt;li&gt;软件产品的开发主要是脑力劳动，还未完全摆脱手工开发方式，大部分产品是 “定做的”，生产效率低。&lt;/li&gt;
&lt;li&gt;软件产品的成本相当昂贵，软件费用不断增加，软件的研制需要投入大量的人力、物力和资金，生产过程中还需对产品进行质量控制，对每件产品进行严格的检验。&lt;/li&gt;
&lt;li&gt;软件对硬件和环境有不同程度的依赖性，为了减少这种依赖性，在软件开发中提出了软件的可移植性问题&lt;/li&gt;
&lt;li&gt;软件是复杂的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件的分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务类软件
&lt;ul&gt;
&lt;li&gt;此类软件是面向用户的，为用户提供各种服务，包括多种软件开发工具和常用的库函数及多种语言的集成化软件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;维护类软件
&lt;ul&gt;
&lt;li&gt;此类软件是面向计算机维护的，包括错误诊断和检测软件、测试软件、多种调试所用软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作管理软件
&lt;ul&gt;
&lt;li&gt;此类软件是面向计算机操作系统和管理的，包括各种操作系统、网络通信系统、计算机管理软件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件危机的定义及表现形式&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件危机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“软件危机” 是指在计算机软件的开发和维护过程中所遇到的一系列严重问题，软件危机主要包含了两个方面的问题：
&lt;ul&gt;
&lt;li&gt;如何开发软件以满足软件日益增长的需求&lt;/li&gt;
&lt;li&gt;如何维护数量不断增长的已有软件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件危机表现形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件开发成本和研制进度的估计常常很不精确。
&lt;ul&gt;
&lt;li&gt;经费预算经常突破，完成时间一拖再拖&lt;/li&gt;
&lt;li&gt;有时为了赶进度和节约成本所采取的一些权宜之计又往往影响了软件产品的质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“已完成” 的软件不能满足用户要求。
&lt;ul&gt;
&lt;li&gt;软件开发人员常常对用户需求只有模糊的了解，甚至对所要解决的问题还没有确切认识的情况下，就匆忙着手编写程序了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件产品质量差，可靠性得不到保证。&lt;/li&gt;
&lt;li&gt;软件产品可维护性差，软件开发人员在开发过程中按各自的风格工作，各行其是，没有统一、公认的规范和完整规范的文档&lt;/li&gt;
&lt;li&gt;软件成本在计算机系统总成本中所占的比例逐年上升。&lt;/li&gt;
&lt;li&gt;软件开发生产率提高的速度远远跟不上计算机应用速度普及深入的趋势。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件危机的产生原因及解决途径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;产生软件危机的原因&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件是计算机的逻辑部件&lt;/li&gt;
&lt;li&gt;软件开发的管理困难&lt;/li&gt;
&lt;li&gt;软件开发费用不断增加，维护费用急剧上升&lt;/li&gt;
&lt;li&gt;软件开发技术落后。&lt;/li&gt;
&lt;li&gt;生产方式落后。&lt;/li&gt;
&lt;li&gt;开发工具落后，生产效率提高缓慢&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决软件危机途径&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先应该对计算机软件有一个正确的认识，彻底清除 &amp;quot;软件就是程序&amp;quot; 的错误观念。&lt;/li&gt;
&lt;li&gt;要使用好的开发技术和方法，并且要不断研究探索更好更有效的技术和方法。&lt;/li&gt;
&lt;li&gt;要有良好的组织、严密的管理，各类人员要相互配合，共同完成任务。（软件开发不是某种个体劳动的神秘技巧）&lt;/li&gt;
&lt;li&gt;应该开发和使用好的软件工具。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;软件系统开发与制造一台机器或建造一栋大厦有许多相同之处，所以要采用 “工程化” 的思想做指导来解决软件研究中面临的困难和混乱，从而走出软件危机的困境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件工程&#34;&gt;#&lt;/a&gt; 软件工程&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件工程的定义及目标&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件工程的研究内容和基本原理&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件工程的发展史&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;软件过程和软件的生存周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件过程和软件的生存周期&#34;&gt;#&lt;/a&gt; 软件过程和软件的生存周期&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件过程&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件生存周期&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;软件开发模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件开发模型&#34;&gt;#&lt;/a&gt; 软件开发模型&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;瀑布模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;快速原型模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;增量模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;螺旋模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;喷泉模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;基于构建的开发模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;统一过程（RUP）模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;基于形式化的开发模型&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;传统的软件工程和面向对象的软件工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传统的软件工程和面向对象的软件工程&#34;&gt;#&lt;/a&gt; 传统的软件工程和面向对象的软件工程&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;传统的软件工程方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;面向对象的软件工程方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;传统的软件工程和面向对象的软件工程的分析方法对比&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;本章小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;软件工程自 1968 年提出至今，正式发展成为用于指导软件生产工程化，覆盖软件开发方法学、软件工具和环境、软件工程管理学等内容的一门课程。&lt;/li&gt;
&lt;li&gt;本章节主要介绍了软件工程的基本内容，包括软件工程的学科背景、软件生存周期理论、软件开发模型、软件工程方法论等&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;可行性研究&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可行性研究&#34;&gt;#&lt;/a&gt; 可行性研究&lt;/h1&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;可行性研究的目的和任务&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目的：用最小的代价在尽可能短的时间内确定问题是否能够解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主要任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行概要的分析研究&lt;/li&gt;
&lt;li&gt;初步确定项目的规模和目标&lt;/li&gt;
&lt;li&gt;确定项目的约束和限制&lt;/li&gt;
&lt;li&gt;分析几种可能解法的利弊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四个方面研究各种解法的可行性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经济可行性&lt;/li&gt;
&lt;li&gt;技术可行性&lt;/li&gt;
&lt;li&gt;操作可行性&lt;/li&gt;
&lt;li&gt;法律可行性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;可行性研究的步骤&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;复查并确定系统规模和目标&lt;/li&gt;
&lt;li&gt;研究目前正在使用的系统&lt;/li&gt;
&lt;li&gt;建立新系统的高层逻辑模型&lt;/li&gt;
&lt;li&gt;导出和评价各种方案&lt;/li&gt;
&lt;li&gt;推荐可行方案&lt;/li&gt;
&lt;li&gt;草拟初步的开发计划&lt;/li&gt;
&lt;li&gt;编写可行性研究报告提交审查&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;系统流程图&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;系统流程图符号
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常用 5 种基本符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/software/%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE.png&#34; alt=&#34;常用系统流程图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11 种系统符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/software/11%E7%A7%8D%E7%B3%BB%E7%BB%9F%E7%AC%A6%E5%8F%B7.png&#34; alt=&#34;11种系统符号&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;成本 - 效益分析&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;货币的时间价值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成本估算的目的是对项目投资。经过成本估算后，得到项目开发时需要的费用，该费用就是项目的投资&lt;/li&gt;
&lt;li&gt;项目完成后，应取得相应的效益。有多少效益才划算？这就是应该考虑货币的时间价值。因为投资是现在进行的，而效益是将来获得的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;投资回收期&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常用投资回收期衡量一个开发项目的价值。所谓投资回收期就是使累计的经济效益等于最初的投资费用所需要的时间&lt;/li&gt;
&lt;li&gt;总的来说就是，投资回收期越短，就可以越快获得利润，该项目就越值得投资开发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纯收入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个生存周期之内系统的累计经济效益与投资之差&lt;/li&gt;
&lt;li&gt;这相当于投资一个软件系统和把钱存入银行中 （或做其他项目）两种方案的优劣比较。&lt;/li&gt;
&lt;li&gt;如一个项目纯收入为零，而开发一个系统还要冒风险，则不值得投资开发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;可行性研究报告的主要内容&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;可行性研究结束后要提交的文档是可行性研究报告，尽管可行性研究报告的格式各有不同，但主要内容应该包括以下几项
&lt;ul&gt;
&lt;li&gt;引言&lt;/li&gt;
&lt;li&gt;可行性研究前提&lt;/li&gt;
&lt;li&gt;对现有系统的分析&lt;/li&gt;
&lt;li&gt;对所建设系统的分析
&lt;ul&gt;
&lt;li&gt;经济可行性&lt;/li&gt;
&lt;li&gt;技术可行性&lt;/li&gt;
&lt;li&gt;社会因素的可行性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他与设计有关选择方案&lt;/li&gt;
&lt;li&gt;其他与设计有关的专门问题&lt;/li&gt;
&lt;li&gt;结论意见&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本章小结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-2&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可行性研究阶段是进一步探讨问题定义阶段所确定的问题是否有可行性的解。尤其对于大型项目的开发，可行性研究是&lt;span class=&#34;rainbow&#34;&gt;必需的&lt;/span&gt;。主要通过&lt;span class=&#34;rainbow&#34;&gt;经济可行性、技术可行性、法律可行性、操作可行性&lt;/span&gt;这四个方面来探讨，是否能够解决以及是否值得去解决。通过可行性研究可以减少技术风险和投资风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统流程图用来表达分析员对现有系统的认识和描绘他对未来物理系统的设想&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成本 - 效益分析是可行性研究的一项主要内容，它主要是从经济角度判断该项目是否继续下去的依据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件需求分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件需求分析&#34;&gt;#&lt;/a&gt; 软件需求分析&lt;/h1&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;需求分析的任务和步骤&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需求分析的任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定对系统的综合需求
&lt;ul&gt;
&lt;li&gt;功能需求&lt;/li&gt;
&lt;li&gt;性能需求&lt;/li&gt;
&lt;li&gt;环境需求&lt;/li&gt;
&lt;li&gt;接口要求&lt;/li&gt;
&lt;li&gt;用户界面需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分析系统的数据需求&lt;/li&gt;
&lt;li&gt;建立软件的逻辑模型&lt;/li&gt;
&lt;li&gt;编写软件需求规格说明书 (Software Requirement Specification SRS)&lt;/li&gt;
&lt;li&gt;需求分析评审&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求分析的步骤 (四个步骤)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求获取：调查研究&lt;/li&gt;
&lt;li&gt;需求提炼：分析建模&lt;/li&gt;
&lt;li&gt;需求描述：编写 SRS（需求规格说明书）&lt;/li&gt;
&lt;li&gt;需求验证：需求不清，不一致，二义性等问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;需求获取的常用方法&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;客户访谈&lt;/li&gt;
&lt;li&gt;建立联合分析小组&lt;/li&gt;
&lt;li&gt;问题分析与确认&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;快速建立软件原型来获取需求&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;快速原型 特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速&lt;/li&gt;
&lt;li&gt;容易修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断是否选择原型法来帮助获取需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求已经建立，并且可以预见是相当稳定吗？&lt;/li&gt;
&lt;li&gt;软件开发人员和用户已经理解了目标系统的应用领域吗？&lt;/li&gt;
&lt;li&gt;问题是否可被模型化？&lt;/li&gt;
&lt;li&gt;用户能否清楚地确定基本的系统需求？&lt;/li&gt;
&lt;li&gt;有任何需求是含糊的吗？&lt;/li&gt;
&lt;li&gt;已知的需求中存在矛盾吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;快速建立软件原型来获取需求&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能分解方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构化分析方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息建模方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;结构化分析方法&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自顶向下逐层分解的分析策略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构化分析描述工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据流图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据字典&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据字典的内容及使用符号&lt;/li&gt;
&lt;li&gt;数据字典的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加工逻辑的描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构化语言&lt;/li&gt;
&lt;li&gt;判定表&lt;/li&gt;
&lt;li&gt;判定树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;需求分析图形工具&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;层次方框图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维纳图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 大括号 [{].{.label} 区分信息的层次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPO 图 (Input - Process - Output)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SA (Structured Analysis 结构化分析) 方法应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目说明&lt;/li&gt;
&lt;li&gt;数据流图&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;数据库内容的需求分析和描述&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据库内容的需求分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息需求&lt;/li&gt;
&lt;li&gt;处理需求&lt;/li&gt;
&lt;li&gt;使用需求
&lt;ul&gt;
&lt;li&gt;建立各局部应用的 E-R 模型&lt;/li&gt;
&lt;li&gt;建立全局 E-R 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库内容的需求分析描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实体联系 （E-R）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实体型&lt;/li&gt;
&lt;li&gt;属性和联系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一对一联系&lt;/li&gt;
&lt;li&gt;一对多联系&lt;/li&gt;
&lt;li&gt;多对多联系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;需求规格说明书&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;需求规格说明书主要内容
&lt;ol&gt;
&lt;li&gt;引言
&lt;ul&gt;
&lt;li&gt;编写目的&lt;/li&gt;
&lt;li&gt;项目背景&lt;/li&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;li&gt;参考资料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任务概述
&lt;ul&gt;
&lt;li&gt;目标&lt;/li&gt;
&lt;li&gt;运行环境&lt;/li&gt;
&lt;li&gt;条件和约束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据描述
&lt;ul&gt;
&lt;li&gt;静态数据&lt;/li&gt;
&lt;li&gt;动态数据：（输入、输出数据）&lt;/li&gt;
&lt;li&gt;数据库描述&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;li&gt;数据采集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能需求
&lt;ul&gt;
&lt;li&gt;功能划分&lt;/li&gt;
&lt;li&gt;功能描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能需求
&lt;ul&gt;
&lt;li&gt;数据精确度&lt;/li&gt;
&lt;li&gt;时间特性&lt;/li&gt;
&lt;li&gt;适应性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运行需求
&lt;ul&gt;
&lt;li&gt;用户界面&lt;/li&gt;
&lt;li&gt;硬件接口&lt;/li&gt;
&lt;li&gt;软件接口&lt;/li&gt;
&lt;li&gt;故障处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他需求
&lt;ul&gt;
&lt;li&gt;包括可使用性、安全保密性、可维护性、可移植性等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本章小结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-3&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件分析是软件生存周期一个十分重要的阶段，其根本任务是确定用户对软件系统的需求。他是项目开发的&lt;span class=&#34;ranibow&#34;&gt;基础&lt;/span&gt;，他要确定软件系统做什么，具有什么功能、性能，有什么约束条件等。把这些问题搞清楚之后，要用某种无二义性的描述形成需求规格说明书。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需求分析的结构是软件开发的重要基础，必须经过严格评审并得到用户确认。要从一致性、完整性、现实性和有效性四个方面复审软件需求规格说明书&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件总体设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件总体设计&#34;&gt;#&lt;/a&gt; 软件总体设计&lt;/h1&gt;
&lt;h2 id=&#34;软件总体设计的目标和任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件总体设计的目标和任务&#34;&gt;#&lt;/a&gt; 软件总体设计的目标和任务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;总体设计阶段的基本目标就是回答：“系统应该如何实现？”，所以总体设计又称概要设计。&lt;/li&gt;
&lt;li&gt;总体设计以模块为基础，以需求分析阶段得到的数据流图为依据来设计软件结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件结构设计准则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件结构设计准则&#34;&gt;#&lt;/a&gt; 软件结构设计准则&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件体系结构设计准则&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;体系结构是对复杂事务的一种抽象&lt;/li&gt;
&lt;li&gt;体系结构在一定的时间内保持稳定&lt;/li&gt;
&lt;li&gt;良好的体系结构意味着普通、高效和稳定&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件模块设计准则&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;降低模块之间的耦合性，提高模块的内聚性&lt;/li&gt;
&lt;li&gt;模块结构的深度、宽度、扇出和扇入适当&lt;/li&gt;
&lt;li&gt;模块的作用范围应该在控制范围内&lt;/li&gt;
&lt;li&gt;模块接口设计要简单，以便降低复杂程度和冗余度&lt;/li&gt;
&lt;li&gt;设计功能可预测并能得到验证的模块&lt;/li&gt;
&lt;li&gt;适当划分模块规模，以保持其独立性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;软件设计的概念和原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件设计的概念和原理&#34;&gt;#&lt;/a&gt; 软件设计的概念和原理&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;模块和模块化&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块是软件结构的基础，是软件元素，能够单独命名、独立完成一定功能的程序语句的集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模块化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化是使得软件能够对付复杂问题所具备的属性。&lt;/li&gt;
&lt;li&gt;模块化是指解决一个复杂问题时，自顶向下逐层把软件系统划分成若干模块的过程。&lt;/li&gt;
&lt;li&gt;模块化的目的是为了降低软件复杂性，使软件设计、测试、维护等操作变得简易。&lt;/li&gt;
&lt;li&gt;运用模块化技术还可以防止错误蔓延，从而可以提高系统的可靠性。&lt;/li&gt;
&lt;li&gt;模块与外部联系多，模块的独立性差。模块与外部联系少，模块的独立性强。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;抽象&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块最重要的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象&lt;/li&gt;
&lt;li&gt;信息隐蔽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象：过程抽象、数据抽象、控制抽象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;信息隐蔽和局部化&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;信息隐蔽意味着有效的模块化可以通过定义一组独立的模块来实现，这些模块彼此之间仅仅交换那些为了完成系统功能所必须交换的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部化概念和信息隐蔽是密切相关的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部化就是把一些关系密切的软件元素物理地放的彼此靠近。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;模块独立性及其度量&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块独立性的概念是模块化、抽象、信息隐蔽和局部化概念的直接结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;耦合：模块之间相互独立性的度量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无直接耦合&lt;/li&gt;
&lt;li&gt;数据耦合&lt;/li&gt;
&lt;li&gt;标记耦合&lt;/li&gt;
&lt;li&gt;控制耦合&lt;/li&gt;
&lt;li&gt;公共环境耦合&lt;/li&gt;
&lt;li&gt;内容耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量使用数据耦合，少用标记耦合和控制耦合，限制公共环境耦合的范围，完全不用内容耦合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内聚：模块内部各个成分之间彼此结合的紧密程度的度量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低内聚
&lt;ul&gt;
&lt;li&gt;偶然内聚&lt;/li&gt;
&lt;li&gt;逻辑内聚&lt;/li&gt;
&lt;li&gt;时间内聚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中内聚
&lt;ul&gt;
&lt;li&gt;通信内聚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高内聚
&lt;ul&gt;
&lt;li&gt;顺序内聚&lt;/li&gt;
&lt;li&gt;功能内聚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽可能做到高内聚，并且能辨认出低内聚的模块。从而通过修改设计提高模块的内聚性，降低模块之间的耦合程度，提高模块的独立性，为设计高质量的软件结构奠定基础。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据库设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库设计&#34;&gt;#&lt;/a&gt; 数据库设计&lt;/h2&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;数据库系统的三级模式概念&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外模式： 子模式或用户模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模式：逻辑模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内模式：存储模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三级模式之间提供了两层映像&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外模式 / 模式&lt;/li&gt;
&lt;li&gt;模式 / 内模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;数据库逻辑设计原则&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;目前 DBMS 产品一般支持 3 种模型：关系、网状、层次&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;关系数据库规范化&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消除原关系中非主属性对码的&lt;span class=&#34;label&#34;&gt;部分函数依赖&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;满足第一范式的关系模式并不一定是一个好的关系模式，由于数据冗余度大，有可能出现插入异常、删除异常和修改异常现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用投影分解法将一个 1NF 的关系分解为多个 2NF 的关系&lt;/li&gt;
&lt;li&gt;消除原关系中非主属性对码的&lt;span class=&#34;label&#34;&gt;传递函数依赖&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;满足第二范式的关系模式并不一定是一个好的关系模式&lt;/li&gt;
&lt;li&gt;并不能完全消除关系模式中的各种异常情况和数据冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将一个 2NF 关系分解为多个 3NF 的关系后，并不能完全消除关系模式中的各种异常情况和数据冗余，虽然 3NF 范式，基本上消除了大部分异常问题，但解决的并不彻底，仍然存在改进的余地&lt;/li&gt;
&lt;li&gt;消除原关系中非主属性对码的&lt;span class=&#34;label&#34;&gt;部分函数依赖&lt;/span&gt;和&lt;span class=&#34;label&#34;&gt;传递函数依赖&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BC 范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BCNF 是从 1NF 直接定义而成的&lt;/li&gt;
&lt;li&gt;规范化的基本思想是逐步消除数据依赖中不合适的部分，使模式中各关系模式达到某种程度的 【分离】，即采用 一事一地 的模式设计原则。&lt;/li&gt;
&lt;li&gt;在函数依赖范畴，属于 BCNF 的关系模式已经很完美了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第五范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范式化程度过低的关系可能会存在插入异常、删除异常、修改复杂、数据冗余等问题。需要对其进行范式化，转换为高级范式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但并不意味着范式化程度越高的关系模式越好，在设计数据库模式结构时，如关系模式分解过多，势必在数据查询时要用到较多的连接运算，这样就会影响查询速度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件结构设计的图形工具&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;软件结构图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;层次图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HIPO 图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;结构化设计方法&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据流图机器类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构化设计方法的步骤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变换型数据流图的分析设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务型数据流图的分析设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;综合分析设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先确定数据流图整体上的类型&lt;/li&gt;
&lt;li&gt;然后利用变换型数据流图的分析方法，先找出主加工，把软件系统分为输入、变换、输出三部分，由此设计出软件系统的顶层和第一层&lt;/li&gt;
&lt;li&gt;最后根据数据流图各个部分的结构特点，适当地运用 &lt;span class=&#34;label&#34;&gt;变换分析&lt;/span&gt; 或 &lt;span class=&#34;label&#34;&gt;事务分析&lt;/span&gt;，就可得出初始软件结构图的某个方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;总体设计说明书&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;引言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写目的&lt;/li&gt;
&lt;li&gt;项目背景&lt;/li&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;li&gt;参考资料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任务概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标&lt;/li&gt;
&lt;li&gt;运行环境&lt;/li&gt;
&lt;li&gt;需求概述&lt;/li&gt;
&lt;li&gt;条件与限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总体设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理流程&lt;/li&gt;
&lt;li&gt;总体结构和模块外部设计 （给出软件系统的结构图）&lt;/li&gt;
&lt;li&gt;功能分配：表明各项功能与程序的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外部接口&lt;/li&gt;
&lt;li&gt;内部接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑结构设计&lt;/li&gt;
&lt;li&gt;物理结构设计&lt;/li&gt;
&lt;li&gt;数据结构与程序的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行模块的组合&lt;/li&gt;
&lt;li&gt;运行控制&lt;/li&gt;
&lt;li&gt;运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出错处理设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出错输出信息&lt;/li&gt;
&lt;li&gt;出错处理对策：如设置后备、性能降级、恢复及再启动等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全保密设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维护设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;说明为方便维护工作的设施，如维护模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本章小结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-4&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件总体设计的基本目的是用&lt;span class=&#34;rainbow&#34;&gt;比较抽象概括&lt;/span&gt;的方式确定系统如何完成预定的任务。总体设计阶段主要由两个小阶段组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先进行&lt;span class=&#34;blue&#34;&gt;系统设计&lt;/span&gt;，从数据流图出发设想完成系统功能的若干种推荐方案，然后比较分析这些方案，最后和用户共同选定一个最佳方案&lt;/li&gt;
&lt;li&gt;然后进行&lt;span class=&#34;blue&#34;&gt;软件结构设计&lt;/span&gt;，结构化设计方法把软件结构主要划分为&lt;span class=&#34;red&#34;&gt;交换型&lt;/span&gt;和&lt;span class=&#34;red&#34;&gt;事务型&lt;/span&gt;两大类，并且提出与之相应的变换型设计和事务型设计两种方法，以及综合型数据流图的设计方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件结构的模块化设计遵循&lt;span class=&#34;rainbow&#34;&gt;抽象、信息隐蔽、分解、逐步求精和模块独立性&lt;/span&gt;等一系列指导准则。模块独立性是一个良好设计的关键，评价标准主要是模块的耦合和内聚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库设计是指一个给定的应用环境下，确定一个最优数据模型和处理模式，主要包括&lt;span class=&#34;rainbow&#34;&gt;数据库逻辑结构设计，物理结构设计和数据规范化&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总体设计阶段产生的文档是&lt;span class=&#34;rainbow&#34;&gt;总体设计说明书&lt;/span&gt;，它既是详细设计、编码的基础，也是进行测试的依据之一。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件详细设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件详细设计&#34;&gt;#&lt;/a&gt; 软件详细设计&lt;/h1&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;详细设计的目的与任务&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;详细设计的根本目的就是&lt;span class=&#34;rainbow&#34;&gt;确定应该怎样具体实现所要求的系统&lt;/span&gt;，应该得出对目标系统的精确描述，具体的就是为软件结构图中每一个模块确定采用的&lt;span class=&#34;yello&#34;&gt;算法&lt;/span&gt;和&lt;span class=&#34;red&#34;&gt;块内数据结构&lt;/span&gt;，用某种选定的详细设计工具更清晰地描述，从而在编码阶段可以把这些描述直接翻译成某种程序设计语言书写的源程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;详细设计阶段的任务是要设计出程序的【蓝图】，以后程序员将根据这个蓝图写出实际的代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因此，详细设计的结构基本上决定了&lt;span class=&#34;rainbow&#34;&gt;最终程序代码的质量&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;程序的 &amp;quot;读者&amp;quot; 有两个，即 计算机 和 人 ！&lt;/li&gt;
&lt;li&gt;在整个软件生存周期中，软件测试、诊断程序错误、修改和软件维护等都必须先读懂程序。实际上对于长期使用的软件系统，读程序的时间可能比写程序的时间要长得多。因此，衡量程序的质量不仅仅看它的逻辑是否正确，性能是否满足要求，更重要的是看它是否易读，易理解。&lt;/li&gt;
&lt;li&gt;结构程序设计技术是实现上述目的的关键技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;结构化程序设计&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构化程序设计所使用的结构有&lt;span class=&#34;red&#34;&gt;顺序、条件和重复&lt;/span&gt;三种，&amp;quot;只有三种基本控制结构就能实现任何单入口单出口，且无死循环、死语句的程序&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构化程序设计采用自顶向下，逐步求精的设计方法和单入口单出口的控制结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逐步求精在总体设计阶段用逐步求精法可以把一个复杂问题解法分解和细化成由许多模块组成的层次结构和软件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;详细设计工具&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;程序流程图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;盒图 （N-S 图）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题分析图（PAD 图）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过程设计语言（PDL）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;人机界面设计&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无论一个软件的内部结构设计得多好，如果他的人机界面难以理解，那么软件还是失败的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人机界面设计问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行人机界面设计时，几乎都有遇到 4 个问题：系统响应时间、用户帮助设施、出错信息处理、命令交互。
&lt;ul&gt;
&lt;li&gt;系统响应时间&lt;/li&gt;
&lt;li&gt;用户帮助设施&lt;/li&gt;
&lt;li&gt;出错信息处理&lt;/li&gt;
&lt;li&gt;命令交互&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人机界面设计原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;屏幕界面设计原则可归为 4 点：界面简洁、控件摆放规范、颜色统一、符合用户习惯。&lt;/li&gt;
&lt;li&gt;让用户驾驭软件，而不是软件驾驭用户&lt;/li&gt;
&lt;li&gt;尽可能减少用户的记忆负担&lt;/li&gt;
&lt;li&gt;保持界面的一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人机界面设计过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人机界面设计已经经历了两个界限分明的时代。第一代是以文本为基础的简单交互，如常见的命令行、字符菜单等。第二代是使用图形、语音和其他交互媒介，充分地考虑了人对美的需求。更深高层的界面甚至模拟了人的生活空间，例如，虚拟现实环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人机界面设计基本过程可以分为以下步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立任务的目的和意图&lt;/li&gt;
&lt;li&gt;目标和意图明确后，建立界面需求规格模型&lt;/li&gt;
&lt;li&gt;以界面需求模型为依据创建用户界面原型&lt;/li&gt;
&lt;li&gt;用户试用并评估该界面原型&lt;/li&gt;
&lt;li&gt;设计者根据用户的意见修改设计并实现下一原型&lt;/li&gt;
&lt;li&gt;不断进行下去、直到用户感到满意为止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;详细设计说明书&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;引言
&lt;ul&gt;
&lt;li&gt;编写目的
&lt;ul&gt;
&lt;li&gt;阐明编写详细设计说明书的目的，指明读者对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目背景
&lt;ul&gt;
&lt;li&gt;应包括项目的来源和主管部门等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义
&lt;ul&gt;
&lt;li&gt;列出文档中用到的专门术语定义和缩写词的原意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参考资料
&lt;ul&gt;
&lt;li&gt;列出这些资料的作者、标题、编号、发表日期、出版单位或资料来源，包括项目经核准的计划任务书，合同或批文；项目开发计划；需求规格说明书；总体设计说明书；测试计划（初稿）；用户操作手册（初稿）；文档所引用的其他资料、软件开发标准或规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序描述
&lt;ul&gt;
&lt;li&gt;功能&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;输出和输入项目&lt;/li&gt;
&lt;li&gt;算法 (模块所选用的算法)&lt;/li&gt;
&lt;li&gt;程序逻辑
&lt;ul&gt;
&lt;li&gt;详细描述各个模块实现的算法，可以采用流程图、NS 图、PDL 语言、PAD 图、判定表和判定树等描述算法的图表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口&lt;/li&gt;
&lt;li&gt;存储分配&lt;/li&gt;
&lt;li&gt;限制条件&lt;/li&gt;
&lt;li&gt;测试要点 （给出测试模块的主要测试要求）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;本章小结&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;详细设计阶段的任务是确定如何实现所要求的目标系统，将总体设计阶段得到的模块算法用详细设计工具：程序流程图、NS 图、PAD 图和 PDL 语言描述出来，即设计出程序的 &amp;quot;蓝图&amp;quot;，从而在下一编码阶段直接翻译成用某种程序设计语言书写的程序。结构化程序设计技术是软件详细设计的基础，任何一个程序都可以用顺序、选择、循环 3 种结构来设计和实现，结构化程序设计具有可理解性和可维护性。&lt;/li&gt;
&lt;li&gt;人机界面设计质量直接影响用户对软件产品的接受程度，因此，必须对人机界面设计给予足够重视。在人机界面的设计过程中，必须充分重视并认真处理好系统响应时间、用户帮助实施、出错信息处理和命令交互 4 个设计问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件编码&#34;&gt;#&lt;/a&gt; 软件编码&lt;/h1&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;程序设计语言的分类&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;基础语言&lt;/li&gt;
&lt;li&gt;结构化语言&lt;/li&gt;
&lt;li&gt;面向对象语言&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;程序设计语言的选择&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;主要的使用标准有如下几条
&lt;ul&gt;
&lt;li&gt;待开发软件的应用领域&lt;/li&gt;
&lt;li&gt;用户的要求&lt;/li&gt;
&lt;li&gt;软件的运行环境&lt;/li&gt;
&lt;li&gt;软件开发人员的知识&lt;/li&gt;
&lt;li&gt;软件的可移植性要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;程序设计风格&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;人们在编写程序时，只追求编程的个人技巧，并不重视所编写程序的可读性、可维护性。也就是说人们并不关心源代码的编写风格。只要程序的执行效率、正确就是好程序。但是，随着软件规模的扩大，复杂性的增加，人们逐渐认识到，程序设计风格的混乱在很大程度上制约了软件的发展，并深刻认识到一个逻辑绝对正确但杂乱无章的程序不是好程序，因为这种难以供人阅读的程序，必然难以测试、排错和维护，甚至由于变得无法维护，而&lt;span class=&#34;rainbow&#34;&gt;提前报废&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序内部文档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标识符的选取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序的注解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序言性注解
&lt;ul&gt;
&lt;li&gt;序言性注解应该安排在每个模块的首部，用来简要描述模块的整体功能、主要算法、接口特点、重要数据含义以及开发简史等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功能性注解
&lt;ul&gt;
&lt;li&gt;功能性注解主要描述的是程序块，而不是解释每行代码&lt;/li&gt;
&lt;li&gt;适当使用空行、空格或括号，使读者容易区分程序和注解&lt;/li&gt;
&lt;li&gt;注解的内容一定要正确、准确，修改程序的同时也应该修改注解。【错误的或不一致的注解不仅对理解程序毫无帮助，而且会引起误导，还不如没有注解！】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序的布局&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序代码的布局对于程序的可读性也有很大的影响，应该适当利用阶梯形式，使程序的逻辑结构清晰、易读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据说明的次序应该标准化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语句构造&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要为了节省存储空间把多个语句写在同一行&lt;/li&gt;
&lt;li&gt;尽量避免复杂的条件测试，尤其是减少对 &amp;quot;非&amp;quot; 条件的测试&lt;/li&gt;
&lt;li&gt;避免大量使用循环嵌套语句和条件嵌套语句&lt;/li&gt;
&lt;li&gt;利用圆括号使逻辑表达式或算术表达式的运算次序清晰直观&lt;/li&gt;
&lt;li&gt;变量说明不要遗漏，变量的类型、长度、存储及初始化要正确&lt;/li&gt;
&lt;li&gt;心理换位：“如果我不是编码人，我能看懂它吗？”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入 / 输出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对所有输入数据都要进行校验&lt;/li&gt;
&lt;li&gt;检查输入项重要组合的合法性&lt;/li&gt;
&lt;li&gt;保持简单的输入格式，为方便用户使用&lt;/li&gt;
&lt;li&gt;输入一批数据时，使用数据或文件结束标志，不要用计数来控制，更不能要求用户自己指定输入项数或记录数。&lt;/li&gt;
&lt;li&gt;人机交互输入时，要详细说明可用的选择范围和边界值&lt;/li&gt;
&lt;li&gt;当程序设计语言对输入 / 输出格式有严格要求时，应保持输入格式与输入语句的要求一致&lt;/li&gt;
&lt;li&gt;输出报表的设计要符合用户要求，输出数据尽量表格化、图形化&lt;/li&gt;
&lt;li&gt;给有的输出数据加标志，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码效率&lt;/li&gt;
&lt;li&gt;存储效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;本章小结&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编码阶段是将详细设计的每个模块算法转换为用程序设计语言编写的源程序。用程序设计语言编写源程序时，要根据实际项目的特点，既要考虑现实可能性，又要从技术角度、工程角度和心理角度评价和比较各种语言，选择一种合适的程序设计语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码风格直接影响软件的质量，影响软件的可读性、可维护性和可移植性。因此，编码风格要简明和清晰，不要追求所谓程序设计技巧，要注重程序结构清晰，层次结构分明，语言简单明了，各种标识符名字的命名要规范，程序和复杂的数据要有注释。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件测试&#34;&gt;#&lt;/a&gt; 软件测试&lt;/h1&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件测试的目标&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件测试是为了发现错误而执行程序的过程&lt;/li&gt;
&lt;li&gt;一个好的测试用例能够发现【至今尚未发现的错误】的测试&lt;/li&gt;
&lt;li&gt;一个成功的测试是发现了【至今尚未发现的错误】的测试&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件测试的原则&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件用例既要有输入数据，又要有对应的输出结果。&lt;/li&gt;
&lt;li&gt;测试用例不仅要选合理的输入数据，还应选择不合理的输入数据。&lt;/li&gt;
&lt;li&gt;除了检查程序是否做了它应该做的工作，还应该检查是否做了它不应该做的工作。&lt;/li&gt;
&lt;li&gt;应该远在测试开始之前就制定测试计划。&lt;/li&gt;
&lt;li&gt;测试计划、测试用例、测试报告必须作为文档长期保存。&lt;/li&gt;
&lt;li&gt;Pare to 原理说明，测试发现的错误中 80% 很可能是由程序中 20% 的模块造成的，即错误出现的 &amp;quot;群集性&amp;quot; 现象。&lt;/li&gt;
&lt;li&gt;为了达到最佳的预测效果，程序员应该避免测试自己的程序。测试是一种 &amp;quot;挑剔性&amp;quot; 的行为，测试自己的程序存在心理障碍。另外，对需求规格说明书的理解而引入的错误则更不容易发现。因此，应该由独立的第三方从事测试工作，会更客观，更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件测试方法及分类&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人工测试&lt;/li&gt;
&lt;li&gt;计算机辅助静态分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;黑盒测试与白盒测试&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;黑盒测试
&lt;ul&gt;
&lt;li&gt;功能测试或数据驱动测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;白盒测试
&lt;ul&gt;
&lt;li&gt;结构测试或逻辑驱动测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件测试用例的设计&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;白盒技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑覆盖
&lt;ul&gt;
&lt;li&gt;语句覆盖&lt;/li&gt;
&lt;li&gt;判定覆盖&lt;/li&gt;
&lt;li&gt;条件覆盖&lt;/li&gt;
&lt;li&gt;判定条件覆盖&lt;/li&gt;
&lt;li&gt;条件组合覆盖&lt;/li&gt;
&lt;li&gt;路径覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环覆盖
&lt;ul&gt;
&lt;li&gt;单循环&lt;/li&gt;
&lt;li&gt;嵌套循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本路径测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑盒技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等价类划分法
&lt;ul&gt;
&lt;li&gt;有效等价类&lt;/li&gt;
&lt;li&gt;无效等价类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;边界值分析法&lt;/li&gt;
&lt;li&gt;错误推测法&lt;/li&gt;
&lt;li&gt;因果图法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件测试过程&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件产品在交付使用之前一般要经历单元测试、集成测试、确认测试和系统测试 4 个阶段的测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件过程中需要 3 类信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件配置&lt;/li&gt;
&lt;li&gt;测试配置&lt;/li&gt;
&lt;li&gt;测试工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单元测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块接口测试&lt;/li&gt;
&lt;li&gt;模块局部数据结构测试&lt;/li&gt;
&lt;li&gt;模块出错处理通路测试&lt;/li&gt;
&lt;li&gt;模块中重要的执行路径测试&lt;/li&gt;
&lt;li&gt;模块边界条件测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集成测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自顶向下集成方法&lt;/li&gt;
&lt;li&gt;自底向上集成方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效性测试&lt;/li&gt;
&lt;li&gt;软件配置报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;着重对系统的性能、特性进行测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;α 测试和 β 测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;α 测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指在软件公司进行的由内部人员指导的新产品的测试，经过测试的软件称为 Alpha 版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;β 测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指公司外部的典型用户在开发者不能控制的环境中 &amp;quot;真实&amp;quot; 应用，并要求用户报告异常情况、提出批评建议，然后对 β 版本进行修正和完善，最终得到正式发布的版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;调试&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;调试的目的和任务
&lt;ul&gt;
&lt;li&gt;目的：为了解决软件中存在的错误，即&lt;span class=&#34;rainbow&#34;&gt;错误定位&lt;/span&gt;，分析并找出原因改正错误。&lt;/li&gt;
&lt;li&gt;任务：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用调试技术
&lt;ul&gt;
&lt;li&gt;简单的调试技术&lt;/li&gt;
&lt;li&gt;消去原因法
&lt;ul&gt;
&lt;li&gt;归纳法&lt;/li&gt;
&lt;li&gt;演绎法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件测试阶段终止的条件&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;根据程序的可靠性制定测试的终止条件&lt;/li&gt;
&lt;li&gt;测试的覆盖率要达到一定的目标&lt;/li&gt;
&lt;li&gt;规定至少要查出错误数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件维护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件维护&#34;&gt;#&lt;/a&gt; 软件维护&lt;/h1&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件维护概述&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件维护定义
&lt;ul&gt;
&lt;li&gt;传统上，软件系统交付之后对其实施更改的学科叫做软件维护。&lt;/li&gt;
&lt;li&gt;通俗地说，软件维护是指软件系统交付使用以后，为了改正软件运行错误，或者因满足新的需求而加入新功能的修改软件的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件维护的分类
&lt;ul&gt;
&lt;li&gt;改正性维护 （Corrective Maintenance）&lt;/li&gt;
&lt;li&gt;适应性维护 （Adaptive Maintenance）&lt;/li&gt;
&lt;li&gt;完善性维护 （Perfective Maintenance）&lt;/li&gt;
&lt;li&gt;预防性维护 （Preventive Maintenance）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件维护的特点
&lt;ul&gt;
&lt;li&gt;软件维护是软件生存周期中延续时间最长、工作量最大的一个阶段&lt;/li&gt;
&lt;li&gt;软件维护不仅工作量大、任务重，而且维护不当的话，还会产生一些意想不到的副作用，甚至引起新的错误。&lt;/li&gt;
&lt;li&gt;软件维护活动实际上是一个修改和简化了的软件开发活动。&lt;/li&gt;
&lt;li&gt;尽管软件维护需要工作量大，但是长期以来，软件维护工作却一直未受到软件设计者们的足够重视。有关软件维护方面的文献资料很少，相应的技术手段和方法也很缺乏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件维护的过程&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结构化维护与非结构化维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维护组织&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维护工作的流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立维护机构&lt;/li&gt;
&lt;li&gt;编写软件维护申请报告&lt;/li&gt;
&lt;li&gt;确定软件维护工作的流程&lt;/li&gt;
&lt;li&gt;整理软件维护文档&lt;/li&gt;
&lt;li&gt;评价软件维护性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维护工作的组织管理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件可维护性&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件可维护性的定义
&lt;ul&gt;
&lt;li&gt;七大特性衡量程序的可维护性
&lt;ul&gt;
&lt;li&gt;可理解性&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;li&gt;可修改性&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;可使用性&lt;/li&gt;
&lt;li&gt;效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件可维护性的度量&lt;/li&gt;
&lt;li&gt;提高软件可维护性的方法
&lt;ul&gt;
&lt;li&gt;建立明确的软件质量目标和优先级&lt;/li&gt;
&lt;li&gt;使用提高软件质量的技术和工具
&lt;ul&gt;
&lt;li&gt;模块化方法&lt;/li&gt;
&lt;li&gt;结构化方法&lt;/li&gt;
&lt;li&gt;面向对象方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择便于维护的程序设计语言&lt;/li&gt;
&lt;li&gt;采取明确的、有效的质量保证审查措施
&lt;ol&gt;
&lt;li&gt;在检查点进行复查&lt;/li&gt;
&lt;li&gt;验收检查&lt;/li&gt;
&lt;li&gt;周期性的维护审查&lt;/li&gt;
&lt;li&gt;对软件包进行检查&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完善程序的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件维护中存在的问题&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件维护困难的表现
&lt;ul&gt;
&lt;li&gt;读懂别人的程序是很困难的，而文档的不足更增加了这种难度。&lt;/li&gt;
&lt;li&gt;文档的不一致性是软件维护困难的又一要素。&lt;/li&gt;
&lt;li&gt;软件开发和软件维护在人员和时间上存在差异。&lt;/li&gt;
&lt;li&gt;软件维护不是一件吸引人的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件维护的副作用&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;修改代码的副作用&lt;/li&gt;
&lt;li&gt;修改数据的副作用&lt;/li&gt;
&lt;li&gt;修改文档的副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;软件维护的代价&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;系统的大小：系统规模越大，其功能就越复杂，软件维护的工作量也随之增大。&lt;/li&gt;
&lt;li&gt;程序设计语言：使用强功能的程序设计语言就可以控制程序的规模。&lt;/li&gt;
&lt;li&gt;系统年龄：&lt;/li&gt;
&lt;li&gt;数据库技术的应用：&lt;/li&gt;
&lt;li&gt;先进的软件开发技术：&lt;/li&gt;
&lt;li&gt;其他的一些因素：如应用的类型、数学模型、任务的难度、开关与标记、if 嵌套深度、索引或下标数等，对维护工作量也有影响。&lt;/li&gt;
&lt;li&gt;无形的成本
&lt;ul&gt;
&lt;li&gt;一些看起来是合理的修复或修改请求不能及时安排，使得客户不满意&lt;/li&gt;
&lt;li&gt;变更的结果把一些潜在的错误引入正在维护的软件，使得软件开发工作受到干扰。&lt;/li&gt;
&lt;li&gt;当必须把软件人员抽调到维护工作中去时，就使得软件开发工作受到干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;再工程和逆向工程&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件再工程旨在对现存的大量软件系统进行挖掘、整理，以得到有用的软件构件，或对已有软件构件进行维护，以延长其生存期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再工程和逆向工程的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件再工程的定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增进对软件的理解&lt;/li&gt;
&lt;li&gt;准备或直接提高软件的可维护性、复用性或演化性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逆向工程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么要实施软件再工程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再工程可帮助软件机构降低软件演化的风险&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再工程可帮助软件机构补偿软件的投资&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再工程可使得软件易于进一步变更&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再工程有着广阔的市场&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件再工程技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改进软件
&lt;ul&gt;
&lt;li&gt;软件重构：&lt;/li&gt;
&lt;li&gt;文档重写、加注释及文档更新：&lt;/li&gt;
&lt;li&gt;复用工程：&lt;/li&gt;
&lt;li&gt;重新划分模块：&lt;/li&gt;
&lt;li&gt;数据再工程：&lt;/li&gt;
&lt;li&gt;业务过程再工程：&lt;/li&gt;
&lt;li&gt;可维护性分析、业务量分析和经济分析：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理解软件
&lt;ul&gt;
&lt;li&gt;浏览：&lt;/li&gt;
&lt;li&gt;分析与度量：&lt;/li&gt;
&lt;li&gt;逆向工程与设计恢复：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;获取、保护及扩充软件的已有知识
&lt;ul&gt;
&lt;li&gt;程序分解&lt;/li&gt;
&lt;li&gt;对象恢复&lt;/li&gt;
&lt;li&gt;程序理解&lt;/li&gt;
&lt;li&gt;知识库和程序变换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note default&#34;&gt;
&lt;p&gt;再工程和逆向工程&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件系统开发完成，经测试达到可靠性指标后，就交给用户，进入软件生存周期的最后一个阶段，即运行维护阶段。软件维护阶段是软件生存周期中时间最长的一个阶段，也是所花费精力和费用最多的一个阶段。软件维护有 4 种类型，即&lt;span class=&#34;rainbow&#34;&gt;改正性、适应性、完善性和预防性&lt;/span&gt;维护。软件维护过程需要建立相应的维护组织，按照一定的维护流程进行结构化维护工作。&lt;/li&gt;
&lt;li&gt;软件可维护性是衡量软件质量的重要指标，主要通过&lt;span class=&#34;rainbow&#34;&gt;可理解性、可测试性、可修改性、可靠性、可移植性、可使用性、效率&lt;/span&gt; 7 个特性来度量，提高软件可维护性需要从 5 个方面入手完善维护工作。软件维护工作本身的副作用，因此，维护人员更应遵守软件维护流程。&lt;/li&gt;
&lt;li&gt;软件维护阶段还有一个重要工作是进行软件再工程，实施软件再工程首先需要理解系统，此外还会涉及软件再工程的一些相关技术。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <updated>2023-09-08T09:55:00.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/09/08/note/softwareEnginee2/</id>
        <title>2024面向对象的软件工程</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/09/08/note/softwareEnginee2/"/>
        <content type="html">&lt;h1 id=&#34;面向对象方法学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象方法学&#34;&gt;#&lt;/a&gt; 面向对象方法学&lt;/h1&gt;
&lt;h2 id=&#34;面向对象方法概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象方法概述&#34;&gt;#&lt;/a&gt; 面向对象方法概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面向对象（Object Oriented，OO）方法学的出发点和基本原则是尽可能模拟人类习惯的思维方式，使开发软件的方法与过程尽可能接近人类解决问题的方法与过程。&lt;/li&gt;
&lt;li&gt;OO = Objects + Classes + Inheritance + Communication with messages&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;面向对象方法学的发展&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;初期阶段（20 世纪 60 年代开始）&lt;/li&gt;
&lt;li&gt;发展阶段（20 世纪 80 年代中期到 90 年代）&lt;/li&gt;
&lt;li&gt;成熟阶段（20 世纪 90 年代以后）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;面向对象方法学的优点与不足&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向对象方法学的主要优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与人类习惯的思维方式一致&lt;/li&gt;
&lt;li&gt;软件稳定性好&lt;/li&gt;
&lt;li&gt;可重用性好&lt;/li&gt;
&lt;li&gt;较易开发大型软件产品&lt;/li&gt;
&lt;li&gt;可维护性好，易于测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象方法学的不足之处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对面向过程而言比较麻烦，需要写更多的代码&lt;/li&gt;
&lt;li&gt;占用空间比较多，程序效率比较低，如多态等特性会降低性能&lt;/li&gt;
&lt;li&gt;创建对象实例的过程往往是非常耗时的工作，因为一些认为【万事皆对象】的语言，对于一些简单类型的操作性能比较低&lt;/li&gt;
&lt;li&gt;对系统动态特征表述不充分（主要是整体动态特征），且反映系统整体功能特征的能力比较差。&lt;/li&gt;
&lt;li&gt;面向对象方法学 4 大特性（抽象、封装、继承和多态）在一定程度上避免了不合理的操作，并能有效地阻止错误的扩散，减轻了维护工作量，但是也加大了测试的难度，给软件测试带来不便。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象的软件工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的软件工程&#34;&gt;#&lt;/a&gt; 面向对象的软件工程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OOA (Objected Oriented Analysis) 面向对象的分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOD (Objected Oriented Design) 面向对象的设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOP (Objected Oriented Programming) 面向对象的编程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOT (Objected Oriented Test) 面向对象的测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOSM (Objected Oriented Software Maintenance) 面向对象的软件维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOA -&amp;gt; OOD -&amp;gt; OOP -&amp;gt; OOT -&amp;gt; OOSM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;面向对象的基本概念&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;对象
&lt;ul&gt;
&lt;li&gt;是一组静态特征和动态特征的封装体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类
&lt;ul&gt;
&lt;li&gt;具有抽象，无值的特征&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息&lt;/li&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;对象、类及类之间关系的分析&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;类与对象的关系
&lt;ul&gt;
&lt;li&gt;模板与实例的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类与类之间的关系
&lt;ul&gt;
&lt;li&gt;继承 (Inheritance)&lt;/li&gt;
&lt;li&gt;多态性 (polymorphism)&lt;/li&gt;
&lt;li&gt;关联 (Association)&lt;/li&gt;
&lt;li&gt;依赖 (dependency)&lt;/li&gt;
&lt;li&gt;实现 (Realization)&lt;/li&gt;
&lt;li&gt;聚集 (Aggregation) 与 组合 (Composition)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;关联与聚合的区别如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关联和聚合在代码层面是一致的，只能从语义级别来区分。&lt;/li&gt;
&lt;li&gt;关联的两个对象之间一般是平等的&lt;/li&gt;
&lt;li&gt;聚集则一般是不平等的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强弱关系：组合 &amp;gt; 聚集 &amp;gt; 关联 &amp;gt; 依赖&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;典型的面向对象开发方法&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Booch 方法&lt;/li&gt;
&lt;li&gt;Coad/Yourdon 方法 (简称 Coad 方法或 OOAD 方法)
&lt;ul&gt;
&lt;li&gt;OOA 面向对象的分析&lt;/li&gt;
&lt;li&gt;OOD 面向对象的分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OMT/Rumbaugh 方法
&lt;ul&gt;
&lt;li&gt;OMT (Object Modeling Technique) 对象模型化技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OOSE 方法 / Jacobson 方法
&lt;ul&gt;
&lt;li&gt;OOSE (Object Oriented Software Engineering) 面向对象软件工程&lt;/li&gt;
&lt;li&gt;需求模型&lt;/li&gt;
&lt;li&gt;分析模型&lt;/li&gt;
&lt;li&gt;设计模型&lt;/li&gt;
&lt;li&gt;实现模型&lt;/li&gt;
&lt;li&gt;测试模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wirfs - Brock 方法
&lt;ul&gt;
&lt;li&gt;Wirfs - Brock 方法主要包括以下步骤
&lt;ol&gt;
&lt;li&gt;评估客户规约&lt;/li&gt;
&lt;li&gt;使用语法分析从规约中抽取候选类&lt;/li&gt;
&lt;li&gt;组合类以试图标识超类&lt;/li&gt;
&lt;li&gt;为每个类定义责任&lt;/li&gt;
&lt;li&gt;为每个类赋予责任&lt;/li&gt;
&lt;li&gt;标识类之间的关系&lt;/li&gt;
&lt;li&gt;定义类之间基于责任的协作&lt;/li&gt;
&lt;li&gt;构造类的层次表示以显示继承关系&lt;/li&gt;
&lt;li&gt;构造系统的协作图&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上述 5 种方法的比较
&lt;ul&gt;
&lt;li&gt;Booch 方法并不是一个开发过程，只是在开发面向对象系统时应遵循的一些技术和原则。&lt;/li&gt;
&lt;li&gt;OMT 方法覆盖了应用开发的全过程，是一种比较成熟的方法，用几种不同的观念来适应不同的建模场合，他在许多重要观念上受到关系数据库设计的影响，适用于数据数据密集型的信息系统的开发，是一种比较完善和有效的分析与设计方法。&lt;/li&gt;
&lt;li&gt;在 OOAD 方法中，OOA 把系统横向划分为 5 个层次，OOD 把系统纵向划分为 4 个部分，从而形成了一个清晰的系统模型。OOAD 适用于小型系统的开发。&lt;/li&gt;
&lt;li&gt;OOSE 能够较好地描述系统的需求，是一种实用的面向对象的系统开发方法，适用于商务处理方面的应用开发。&lt;/li&gt;
&lt;li&gt;Wirfs-Brock 方法不明确区分分析和设计任务，从评估客户规格说明到设计完成，是一个连续的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;统一建模语言 UML (Unified Modeling Language)
&lt;ul&gt;
&lt;li&gt;该方法力图实现 OMT 方法和 Booch 方法的统一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;统一建模语言-uml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统一建模语言-uml&#34;&gt;#&lt;/a&gt; 统一建模语言 UML&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;概述&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;UML 是一种编制软件蓝图的标准化语言，需要强调的是，UML 是一种建模语言而不是方法，UML 本身是独立于过程的。&lt;/li&gt;
&lt;li&gt;UML 建立在当今国际上最具有代表性的 3 种面向对象方法（Booch 方法，OMT 方法，OOSE 方法）的基础之上，由 OMG (Object Management Group) 国际对象管理组织 于 1997 年 11 月批准为标准建模语言，支持面向对象的技术和方法，能够准确方便地表达面向对象的概念，体现面向对象的分析和设计风格。&lt;/li&gt;
&lt;li&gt;UML 的建模过程包括分析和设计两个建模阶段
&lt;ul&gt;
&lt;li&gt;分析阶段主要通过 [用例图、类图、活动图、类分析图、顺序图].{rainbow} 等表示分析结果；&lt;/li&gt;
&lt;li&gt;设计阶段主要通过&lt;span class=&#34;rainbow&#34;&gt;类设计图、通信图、状态图、构件图、部署图&lt;/span&gt;等表示设计结果；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;UML 的发展&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;统一建模语言 UML 起源于两位杰出的面向对象方法大师 Booch 和 Rumbaugh 及 著名的软件工具制造企业 Rational Software。他们于 1994 年 10 月加盟了该公司，于 1995 年 10 月将两种方法合并，推出统一方法（Unified Method）。同年......&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;UML 的定义及主要内容&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;UML 的语义
&lt;ul&gt;
&lt;li&gt;UML 的语义在一个四层抽象级别的建模框架中定义。&lt;/li&gt;
&lt;li&gt;元元模型 (Meta-Meta Model) 层&lt;/li&gt;
&lt;li&gt;元模型 (Meta Model) 层&lt;/li&gt;
&lt;li&gt;模型层 (Model) 层&lt;/li&gt;
&lt;li&gt;用户模型 (User Model) 层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML 的表示方法
&lt;ul&gt;
&lt;li&gt;视图 (View)&lt;/li&gt;
&lt;li&gt;图 (Diagram)&lt;/li&gt;
&lt;li&gt;模型元素 (Model Element)&lt;/li&gt;
&lt;li&gt;公共机制 (Common Mechanism)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML 的构成 (3 类主要元素)
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;label primary&#34;&gt;基本构造块&lt;/span&gt; (Basic Building Block)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;事物&lt;/span&gt; (Thing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;结构事物&lt;/span&gt; (Structural Thing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类 (Class)&lt;/li&gt;
&lt;li&gt;接口 (Interface)&lt;/li&gt;
&lt;li&gt;协作 (Collaboration)&lt;/li&gt;
&lt;li&gt;用例 (Use Case)&lt;/li&gt;
&lt;li&gt;主动类 (Active Class)&lt;/li&gt;
&lt;li&gt;构件 (Component)&lt;/li&gt;
&lt;li&gt;结点 (Node)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;行为事物&lt;/span&gt; (Behavioral Thing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交互 (Interaction)&lt;/li&gt;
&lt;li&gt;状态机 (State Machine)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;分组事物&lt;/span&gt; (Grouping Thing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包 (package)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;注释事物&lt;/span&gt; (Annotation Thing)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注解 (Note)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;关系&lt;/span&gt; (Relationship)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;label info&#34;&gt;图&lt;/span&gt; (Diagram)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;label primary&#34;&gt;规则&lt;/span&gt; (Rule)
&lt;ul&gt;
&lt;li&gt;命名 (Name)&lt;/li&gt;
&lt;li&gt;范围 (Scope)&lt;/li&gt;
&lt;li&gt;可见性 (Visibility)&lt;/li&gt;
&lt;li&gt;完整性 (Integrity)&lt;/li&gt;
&lt;li&gt;执行 (Execution)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;label primary&#34;&gt;公共机制&lt;/span&gt; (Common Mechanism)
&lt;ul&gt;
&lt;li&gt;规范说明 (Specification)&lt;/li&gt;
&lt;li&gt;修饰 (Adornment)&lt;/li&gt;
&lt;li&gt;通用划分 (Common Division)&lt;/li&gt;
&lt;li&gt;扩展机制 (Extensibility Mechanism)
&lt;ul&gt;
&lt;li&gt;版型 (Stereotype)&lt;/li&gt;
&lt;li&gt;标记值 (Tagged Value)&lt;/li&gt;
&lt;li&gt;约束 (Constraint)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML 的构成图&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/img/software/UML%E7%9A%84%E6%9E%84%E6%88%90%E5%9B%BE.png&#34; alt=&#34;UML的构成图&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;UML 的特点和用途&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;统一的标准&lt;/li&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;可视化，表示能力强大&lt;/li&gt;
&lt;li&gt;独立于过程&lt;/li&gt;
&lt;li&gt;易于掌握应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML 是一个通用的标准语言，在系统开发的各个阶段的都可使用 UML, 其应用覆盖了从需求分析到软件测试的各阶段。
&lt;ul&gt;
&lt;li&gt;需求分析阶段&lt;/li&gt;
&lt;li&gt;系统分析阶段&lt;/li&gt;
&lt;li&gt;系统设计阶段&lt;/li&gt;
&lt;li&gt;编码阶段&lt;/li&gt;
&lt;li&gt;测试阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;UML 的模型视图简介&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;静态图
&lt;ul&gt;
&lt;li&gt;类图&lt;/li&gt;
&lt;li&gt;对象图&lt;/li&gt;
&lt;li&gt;用例图&lt;/li&gt;
&lt;li&gt;构件图&lt;/li&gt;
&lt;li&gt;部署图&lt;/li&gt;
&lt;li&gt;包图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态图
&lt;ul&gt;
&lt;li&gt;状态图&lt;/li&gt;
&lt;li&gt;顺序图&lt;/li&gt;
&lt;li&gt;通信图&lt;/li&gt;
&lt;li&gt;活动图&lt;/li&gt;
&lt;li&gt;计时图&lt;/li&gt;
&lt;li&gt;交互概览图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;视图
&lt;ul&gt;
&lt;li&gt;用例视图 (Use Case View)&lt;/li&gt;
&lt;li&gt;逻辑视图 (Logical View)&lt;/li&gt;
&lt;li&gt;进程视图 (Process View)&lt;/li&gt;
&lt;li&gt;实现视图 (Realization View)&lt;/li&gt;
&lt;li&gt;部署视图 (Deployment View)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;UML 常用工具&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Rational Rose&lt;/li&gt;
&lt;li&gt;Star UML&lt;/li&gt;
&lt;li&gt;Visio Professional&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;Rational Rose&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;对面向对象模型的支持&lt;/li&gt;
&lt;li&gt;对螺旋上升式开发过程的支持&lt;/li&gt;
&lt;li&gt;对双向工程的支持&lt;/li&gt;
&lt;li&gt;对团队开发的支持
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;个人工作间 (Workspace)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置管理 CM (Configuration Management)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟路径地图 (Virtual Path Maps)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供与 ClearCase (Rational 公司的软件版本控制产品)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在对项目团队开发的管理方面，Rational Rose 支持的每次迭代包括 6 个阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计划&lt;/li&gt;
&lt;li&gt;蔓延&lt;/li&gt;
&lt;li&gt;延伸&lt;/li&gt;
&lt;li&gt;整合&lt;/li&gt;
&lt;li&gt;评估&lt;/li&gt;
&lt;li&gt;发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对工具的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;统一软件开发过程-rup-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统一软件开发过程-rup-概述&#34;&gt;#&lt;/a&gt; 统一软件开发过程 RUP 概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RUP (Rational Unified Process) 是一个面向对象软件工程的通用业务流程。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;RUP 的历史&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;RUP 的特色&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;迭代和增量方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以软件体系结构为中心&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;RUP 软件开发的生存周期&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;动态结构
&lt;ul&gt;
&lt;li&gt;初始阶段&lt;/li&gt;
&lt;li&gt;细化阶段&lt;/li&gt;
&lt;li&gt;构造阶段&lt;/li&gt;
&lt;li&gt;交付阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;静态结构
&lt;ul&gt;
&lt;li&gt;业务建模 (Business Modeling)&lt;/li&gt;
&lt;li&gt;需求 (Requirements)&lt;/li&gt;
&lt;li&gt;分析和设计 (Analysis &amp;amp; Design)&lt;/li&gt;
&lt;li&gt;实现 (Realization)&lt;/li&gt;
&lt;li&gt;测试 (Test)&lt;/li&gt;
&lt;li&gt;部署 (Deployment)&lt;/li&gt;
&lt;li&gt;项目管理 (Project Management)&lt;/li&gt;
&lt;li&gt;配置与变更管理 (Configuration &amp;amp; Change Management)&lt;/li&gt;
&lt;li&gt;环境 (Environment)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;RUP 过程的建模&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;初始阶段&lt;/li&gt;
&lt;li&gt;细化阶段&lt;/li&gt;
&lt;li&gt;构造阶段&lt;/li&gt;
&lt;li&gt;交付阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本章小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向对象方法学尽可能模拟人类认识客观世界的思维方式来进行软件开发、使开发软件的方法与过程尽可能接近人类解决问题的方法与过程，能够开发出稳定性好、可重用性好、可维护性好的软件，并且较易开发大型软件产品，这些都是面向对象方法学的突出优点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象软件工程是面向对象方法学在软件工程领域的全面应用，可应用在生存周期的各个阶段。本章还介绍 5 种典型的面向对象方法及其特点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一建模语言 UML 是在面向对象方法学大战后的集成和统一，被国际对象管理组织 OMG 接纳为标准建模方法和语言。最新的 UML2.0 版共包含 3 类主要元素、4 类事物和 13 种图形，并提供 5 种视图用于系统的建模指导，本章还介绍了支持 UML 的相关工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统一软件开发过程 RUP (Rational Unified Process) 是一个面向对象软件工程的通用业务流程，强调整个开发过程中的多次迭代，为在开发组织中分配任务和职责提供了一种规范的方法。RUP 软件开发生存周期是一个二维的软件开发模型，横轴代表时间，显示过程的生存周期，体现了过程的动态结构；纵轴给出 RUP 软件开发过程中的核心工作流，表示 RUP 软件开发过程的静态结构。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;面向对象的分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的分析&#34;&gt;#&lt;/a&gt; 面向对象的分析&lt;/h1&gt;
&lt;h2 id=&#34;面向对象的分析过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的分析过程&#34;&gt;#&lt;/a&gt; 面向对象的分析过程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向对象分析就是抽取和整理用户需求并建立问题领域精确模型的过程。OOA 强调运用面向对象方法，对问题域和系统职责进行分析和理解，找出描述问题域及系统职责所需要的对象，定义对象的属性、服务及他们之间的关系，以便建立一个符合问题领域、满足用户需求的 OOA 模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象分析过程，首要的是先建模，通常需要建立 4 种形式的模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用类和对象表示的对象 (静态) 模型&lt;/li&gt;
&lt;li&gt;用用例和场景表示的用例 (功能) 模型&lt;/li&gt;
&lt;li&gt;由状态机和交互图表示的动态行为模型&lt;/li&gt;
&lt;li&gt;由构件图和部署图表示的物理实现模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 种模型之间的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对每个类建立的动态模型，描述类实例的生存周期或运行周期&lt;/li&gt;
&lt;li&gt;状态转换驱使行为发生，这些行为在数据流图中被映射成处理，在用例图中被映射成用例，他们同时与类图中的服务相对应。&lt;/li&gt;
&lt;li&gt;用例 (功能) 模型中的用例 (或处理) 对应于对象模型中的类所提供的服务。&lt;/li&gt;
&lt;li&gt;数据流图中数据存储及数据的源点 / 终点通常是对象模型中的对象&lt;/li&gt;
&lt;li&gt;数据流图中数据流往往是对象模型中对象的属性值，也可能是整个对象&lt;/li&gt;
&lt;li&gt;用例图中的参与者可能是对象模型中的对象&lt;/li&gt;
&lt;li&gt;用例 (功能) 模型中的用例 (或处理) 可能产生动态模型中的事件&lt;/li&gt;
&lt;li&gt;对象模型描述数据流图中的数据流、数据存储及数据源点 / 终点的结构&lt;/li&gt;
&lt;li&gt;物理实现模型中的构件通常对应对象模型中的类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;建立用例模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立用例模型&#34;&gt;#&lt;/a&gt; 建立用例模型&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;需求分析与用例建模&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定系统范围和系统边界&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定参与者&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;通常通过回答以下问题找到参与者
&lt;ul&gt;
&lt;li&gt;谁使用系统的主要功能？&lt;/li&gt;
&lt;li&gt;谁需要系统的支持已完成其日常工作任务？&lt;/li&gt;
&lt;li&gt;谁负责维护、管理并保证系统的正常运行？&lt;/li&gt;
&lt;li&gt;系统需要和那些外部系统交互？&lt;/li&gt;
&lt;li&gt;系统需要处理那些设备？&lt;/li&gt;
&lt;li&gt;对系统产生的结果感兴趣的人或事物是那些？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定用例&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定用例之间的关系&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;包含关系&lt;/li&gt;
&lt;li&gt;扩展关系&lt;/li&gt;
&lt;li&gt;泛化关系&lt;/li&gt;
&lt;li&gt;使用关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;建立对象模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立对象模型&#34;&gt;#&lt;/a&gt; 建立对象模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5 个层次对应着建立对象模型的 5 项活动：
&lt;ul&gt;
&lt;li&gt;找出类和对象&lt;/li&gt;
&lt;li&gt;识别结构&lt;/li&gt;
&lt;li&gt;识别主题&lt;/li&gt;
&lt;li&gt;定义属性&lt;/li&gt;
&lt;li&gt;定义服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;dl&gt;
&lt;dt&gt;面向对象分析大体上按照下列顺序进行:&lt;/dt&gt;
&lt;dd&gt;寻找类和对象 -&amp;gt; 识别结构 -&amp;gt; 识别主题 -&amp;gt; 定义属性 -&amp;gt; 建立动态模型 -&amp;gt; 建立功能模型 -&amp;gt; 定义服务&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定类和对象&lt;/p&gt;
&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;筛选过程主要依据下列标准来删除不正确或不必要的类和对象&lt;/dt&gt;
&lt;dd&gt;冗余&lt;/dd&gt;
&lt;dd&gt;无关&lt;/dd&gt;
&lt;dd&gt;笼统&lt;/dd&gt;
&lt;dd&gt;属性&lt;/dd&gt;
&lt;dd&gt;操作&lt;/dd&gt;
&lt;dd&gt;实现&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定关联&lt;/p&gt;
&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;标识关联的启发式规则有&lt;/dt&gt;
&lt;dd&gt;从需求描述中查找动词或动词短语，识别动作的主体和客体，从角色寻找关联；&lt;/dd&gt;
&lt;dd&gt;准确地命名关联和角色；&lt;/dd&gt;
&lt;dd&gt;尽量使用常用的修饰词标识名字空间和关键属性；&lt;/dd&gt;
&lt;dd&gt;应删除派生关联，即可由其他关联导出的关联；&lt;/dd&gt;
&lt;dd&gt;在一组关联被确定下来之前，先不必考虑实例之间的多重性&lt;/dd&gt;
&lt;dd&gt;为适用于不同的关联，必要时要分解以前确定的类；&lt;/dd&gt;
&lt;dd&gt;分析过程中，及时补上遗漏的关联&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;确定属性&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立对象类图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;划分主题&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;优化对象模型&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;建立动态行为模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立动态行为模型&#34;&gt;#&lt;/a&gt; 建立动态行为模型&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立顺序图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立通信图&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立状态图&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;状态机及状态图的定义&lt;/li&gt;
&lt;li&gt;状态&lt;/li&gt;
&lt;li&gt;事件
&lt;ol&gt;
&lt;li&gt;入口事件&lt;/li&gt;
&lt;li&gt;出口事件&lt;/li&gt;
&lt;li&gt;动作事件&lt;/li&gt;
&lt;li&gt;信号事件&lt;/li&gt;
&lt;li&gt;调用事件&lt;/li&gt;
&lt;li&gt;修改事件&lt;/li&gt;
&lt;li&gt;时间事件&lt;/li&gt;
&lt;li&gt;延迟事件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;转换
&lt;ol&gt;
&lt;li&gt;外部转换&lt;/li&gt;
&lt;li&gt;内部转换&lt;/li&gt;
&lt;li&gt;完成转换：又称自转换&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;触发事件&lt;/li&gt;
&lt;li&gt;监护条件&lt;/li&gt;
&lt;li&gt;动作&lt;/li&gt;
&lt;li&gt;状态图的建模步骤
&lt;ol&gt;
&lt;li&gt;找出适合用模型描述其行为的类&lt;/li&gt;
&lt;li&gt;确定对象可能存在的状态&lt;/li&gt;
&lt;li&gt;确定引起状态转换的事件&lt;/li&gt;
&lt;li&gt;确定转换进行时对象执行的相应动作&lt;/li&gt;
&lt;li&gt;对建模的结果进行相应的精化和细化&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;建立状态图
&lt;ol&gt;
&lt;li&gt;编写典型交互行为脚本&lt;/li&gt;
&lt;li&gt;从脚本中提取出事物，确定触发每个事件的动作对象及接受事件的目标对象。&lt;/li&gt;
&lt;li&gt;排列事件发生的次序，确定每个对象可能有的状态及状态间转换关系，并用状态图描绘出来。&lt;/li&gt;
&lt;li&gt;比较各个对象的状态图，检查它们之间的一致性，确保事件之间的匹配。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立活动图&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;活动图与流程图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动图与状态图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动图的组成及 UML 图形表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动作状态&lt;/li&gt;
&lt;li&gt;活动状态&lt;/li&gt;
&lt;li&gt;动作流&lt;/li&gt;
&lt;li&gt;分支与合并&lt;/li&gt;
&lt;li&gt;分叉与汇合&lt;/li&gt;
&lt;li&gt;分区&lt;/li&gt;
&lt;li&gt;对象流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动的分解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;活动图建模技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;识别要对工作流描述的类或对象。&lt;/li&gt;
&lt;li&gt;确定工作流的初始状态和终止阶段，明确工作流的边界。&lt;/li&gt;
&lt;li&gt;对动作状态或活动状态建模。&lt;/li&gt;
&lt;li&gt;对动作流建模&lt;/li&gt;
&lt;li&gt;对对象流建模&lt;/li&gt;
&lt;li&gt;对建立的模型进行精化和细化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;建立物理实现模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立物理实现模型&#34;&gt;#&lt;/a&gt; 建立物理实现模型&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立构件图&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;构件 (Component)&lt;/li&gt;
&lt;li&gt;构件的接口&lt;/li&gt;
&lt;li&gt;对构件和构件关系建模的用途&lt;/li&gt;
&lt;li&gt;构件图 (Component Diagram)
&lt;ul&gt;
&lt;li&gt;源代码文件建模&lt;/li&gt;
&lt;li&gt;可执行文件和库建模&lt;/li&gt;
&lt;li&gt;表、文件和文档建模&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;建立部署图&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;部署图的要素
&lt;ul&gt;
&lt;li&gt;结点&lt;/li&gt;
&lt;li&gt;连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何开发部署模型
&lt;ul&gt;
&lt;li&gt;确定模型范围&lt;/li&gt;
&lt;li&gt;确定分布结构&lt;/li&gt;
&lt;li&gt;确定结点和他们的连接&lt;/li&gt;
&lt;li&gt;把构件分布到结点&lt;/li&gt;
&lt;li&gt;为不同构件之间的依赖建模&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;几种部署图建模方法
&lt;ul&gt;
&lt;li&gt;构建的分布建模&lt;/li&gt;
&lt;li&gt;嵌入式系统建模&lt;/li&gt;
&lt;li&gt;客户机 / 服务器建模&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面向对象软件开发过程的案例分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象软件开发过程的案例分析&#34;&gt;#&lt;/a&gt; 面向对象软件开发过程的案例分析&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统需求&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;客户预约汽车&lt;/li&gt;
&lt;li&gt;客户得到汽车&lt;/li&gt;
&lt;li&gt;客户返还汽车&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统用例模型&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;定义参与者&lt;/li&gt;
&lt;li&gt;用例图&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统对象模型&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统动态行为模型&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;顺序图和通信图
&lt;ul&gt;
&lt;li&gt;顺序图&lt;/li&gt;
&lt;li&gt;通信图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;状态图和活动图
&lt;ul&gt;
&lt;li&gt;状态图&lt;/li&gt;
&lt;li&gt;活动图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统物理实现模型&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;构件图&lt;/li&gt;
&lt;li&gt;部署图&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本章小结-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-2&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面向对象的分析就是抽取和整理用户需求，并建立问题领域精确模型的过程。&lt;/li&gt;
&lt;li&gt;分析工作主要包括 3 项内容：理解、表达和验证。与传统的面向数据流的结构化方法以功能为导向的分析，构建的是面向类的模型。一般地，可通过对象模型、用例 (功能) 模型、动态 (行为) 模型和物理实现模型来表达分析结果。&lt;/li&gt;
&lt;li&gt;本章最后通过一个简化的汽车租赁系统的分析过程给出面向对象分析的应用案例。&lt;/li&gt;
&lt;li&gt;本章以面向对象的概念为基础，介绍了以这 4 种模型为基础进行建模的基本方法和注意事项，为面向对象软件的分析过程提供指导。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;面向对象的设计与实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的设计与实现&#34;&gt;#&lt;/a&gt; 面向对象的设计与实现&lt;/h1&gt;
&lt;h2 id=&#34;面向对象的设计准则和启发式规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的设计准则和启发式规则&#34;&gt;#&lt;/a&gt; 面向对象的设计准则和启发式规则&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;面向对象设计准则&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;抽象&lt;/li&gt;
&lt;li&gt;信息隐蔽&lt;/li&gt;
&lt;li&gt;弱耦合
&lt;ul&gt;
&lt;li&gt;交互耦合&lt;/li&gt;
&lt;li&gt;继承耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;强内聚
&lt;ul&gt;
&lt;li&gt;服务内聚&lt;/li&gt;
&lt;li&gt;类内聚&lt;/li&gt;
&lt;li&gt;一般 - 特殊内聚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可重用
&lt;ul&gt;
&lt;li&gt;尽量使用已有的类&lt;/li&gt;
&lt;li&gt;如果确实需要创建新类，则在设计这些新类的协议时，应该考虑将来的可重复使用性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;启发式规则&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;设计结果应该清晰易懂
&lt;ul&gt;
&lt;li&gt;用词一致&lt;/li&gt;
&lt;li&gt;使用已有的的协议&lt;/li&gt;
&lt;li&gt;减少消息模式的数据&lt;/li&gt;
&lt;li&gt;避免模糊的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般 - 特殊结构的深度应适当&lt;/li&gt;
&lt;li&gt;设计简单的类&lt;/li&gt;
&lt;li&gt;使用简单的协议&lt;/li&gt;
&lt;li&gt;使用简单的服务&lt;/li&gt;
&lt;li&gt;把设计变动减至最小&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;系统设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统设计&#34;&gt;#&lt;/a&gt; 系统设计&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;问题域子系统设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;为复用设计与编程的类而增加结构&lt;/li&gt;
&lt;li&gt;按编程语言调整继承关系&lt;/li&gt;
&lt;li&gt;提高性能&lt;/li&gt;
&lt;li&gt;为编程方便增加底层成分，通过细化对象的分类来实现&lt;/li&gt;
&lt;li&gt;对复杂关联的转化并决定关联的实现方式&lt;/li&gt;
&lt;li&gt;调整与完善属性&lt;/li&gt;
&lt;li&gt;构造或优化算法，调整服务&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;人机交互子系统设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;用户分类&lt;/li&gt;
&lt;li&gt;描述与系统交互的参与者的脚本&lt;/li&gt;
&lt;li&gt;设计详细的交互&lt;/li&gt;
&lt;li&gt;设计命令层&lt;/li&gt;
&lt;li&gt;设计人机交互类&lt;/li&gt;
&lt;li&gt;继续做原型&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;任务管理子系统设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;确定任务的特征 (如事件驱动、时钟驱动等)&lt;/li&gt;
&lt;li&gt;定义协调者任务和关联的对象&lt;/li&gt;
&lt;li&gt;集成协调者和其他任务&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;任务管理子系统设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;选择数据存储管理的模式
&lt;ul&gt;
&lt;li&gt;文件管理系统&lt;/li&gt;
&lt;li&gt;关系数据库管理系统&lt;/li&gt;
&lt;li&gt;面向对象数据库管理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计数据管理子系统
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;label&#34;&gt;数据格式设计&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;文件管理系统&lt;/li&gt;
&lt;li&gt;关系数据库管理系统&lt;/li&gt;
&lt;li&gt;面向对象数据库管理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;label&#34;&gt;服务设计&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;文件管理系统&lt;/li&gt;
&lt;li&gt;关系数据库管理系统&lt;/li&gt;
&lt;li&gt;面向对象数据库管理系统&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;服务-关联与聚合关系设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务-关联与聚合关系设计&#34;&gt;#&lt;/a&gt; 服务、关联与聚合关系设计&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;服务设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确定类中应有的服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从对象模型中引入服务&lt;/li&gt;
&lt;li&gt;从动态模型中确定服务&lt;/li&gt;
&lt;li&gt;从用例模型中确定服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计实现服务的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择数据结构&lt;/li&gt;
&lt;li&gt;定义内部类和内部操作&lt;/li&gt;
&lt;li&gt;设计实现服务的算法&lt;/li&gt;
&lt;li&gt;算法复杂度&lt;/li&gt;
&lt;li&gt;容易理解和实现&lt;/li&gt;
&lt;li&gt;易修改和易维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;关联设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;单向关联与双向关联&lt;/li&gt;
&lt;li&gt;关联的命名&lt;/li&gt;
&lt;li&gt;角色&lt;/li&gt;
&lt;li&gt;关联类及其属性&lt;/li&gt;
&lt;li&gt;关联的约束&lt;/li&gt;
&lt;li&gt;关联的限定符&lt;/li&gt;
&lt;li&gt;关联的种类&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;聚合关系设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;简化了对象的定义&lt;/li&gt;
&lt;li&gt;支持软件重用&lt;/li&gt;
&lt;li&gt;聚集和组合的区别如下：
&lt;ul&gt;
&lt;li&gt;聚集关系称为 &amp;quot;has-a&amp;quot; 关系，组合关系称为 &amp;quot;contains-a&amp;quot; 关系&lt;/li&gt;
&lt;li&gt;聚集关系表示事物的整体 / 部分关系的较&lt;span class=&#34;red&#34;&gt;弱&lt;/span&gt;的情况，组合关系表示事物的整体 / 部分关系的较&lt;span class=&#34;red&#34;&gt;强&lt;/span&gt;的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面向对象设计优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象设计优化&#34;&gt;#&lt;/a&gt; 面向对象设计优化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;确定优先级&lt;/li&gt;
&lt;li&gt;提高效率的几项技术
&lt;ul&gt;
&lt;li&gt;增加冗余关联以提高访问效率&lt;/li&gt;
&lt;li&gt;调整查询次序&lt;/li&gt;
&lt;li&gt;保留派生属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整继承关系
&lt;ul&gt;
&lt;li&gt;抽象与具体&lt;/li&gt;
&lt;li&gt;为提高继承程度而修改类定义&lt;/li&gt;
&lt;li&gt;利用委托实现行为共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面向对象系统的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象系统的实现&#34;&gt;#&lt;/a&gt; 面向对象系统的实现&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;面向对象程序设计语言的选择&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;面向对象程序设计语言的优点&lt;/li&gt;
&lt;li&gt;面向对象语言的技术特点&lt;/li&gt;
&lt;li&gt;选择面向对象语言的实际原因&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;面向对象程序设计风格&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;提高可重用性&lt;/li&gt;
&lt;li&gt;提高可扩充性&lt;/li&gt;
&lt;li&gt;提高健壮性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本章小结-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-3&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面向对象设计是面向对象分析内容的细化和扩展，目的是解决分析阶段所得到模型 “如何做” 的问题。面向对象设计把分析阶段得到的对目标系统的需求转变为符合成本和质量要求的、抽象的系统实现方案。&lt;/li&gt;
&lt;li&gt;面向对象方法学在概念和表示方法上的一致性，保证了在各开发活动之间的平滑过渡，从面向对象分析、面向对象设计，再到面向对象的实现，实际上就变成了一个逐渐扩充模型的过程。面向对象分析、设计和实现是一个多次反复迭代的过程。&lt;/li&gt;
&lt;li&gt;本章首先介绍了面向对象设计应遵循的准则和启发式准则。大多数求解空间模型，在逻辑上由问题域、人机交互、任务管理和数据管理 4 大部分组成，本章按照系统分解的观点，介绍了这 4 个子系统的设计策略和方法。根据面向对象分析和设计过程的迭代特性，面向对象设计阶段需要对类中的服务、关联和聚合等关系进行细化，同时需要按照一定规则对设计进行优化。本章最后对面向对象实现所涉及的程序设计语言的选择和程序设计的风格问题进行了介绍。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件开发工具-staruml-及其应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件开发工具-staruml-及其应用&#34;&gt;#&lt;/a&gt; 软件开发工具 StarUML 及其应用&lt;/h1&gt;
&lt;h2 id=&#34;软件开发工具-staruml-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件开发工具-staruml-概述&#34;&gt;#&lt;/a&gt; 软件开发工具 StarUML 概述&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;StarUML 的安装及使用&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;运行 StarUML (tm) 的最低系统需求&lt;/li&gt;
&lt;li&gt;StarUML 的安装步骤&lt;/li&gt;
&lt;li&gt;StarUML 的使用&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;StarUML 的主要功能&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;staruml-环境下的-uml-图形建模&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#staruml-环境下的-uml-图形建模&#34;&gt;#&lt;/a&gt; StarUML 环境下的 UML 图形建模&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;StarUML 的用例图、类图和包图&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;用例图&lt;/li&gt;
&lt;li&gt;类图&lt;/li&gt;
&lt;li&gt;包图&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;StarUML 的交互图和状态机图&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;顺序图和通信图&lt;/li&gt;
&lt;li&gt;状态图和活动图&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;StarUML 的构件图与部署图&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;构件图&lt;/li&gt;
&lt;li&gt;部署图&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;StarUML 的正向工程和逆向工程&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;代码生成&lt;/li&gt;
&lt;li&gt;逆向工程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;一个简易教学管理系统的分析和设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一个简易教学管理系统的分析和设计&#34;&gt;#&lt;/a&gt; 一个简易教学管理系统的分析和设计&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统需求描述及分析&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统问题领域分析&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;确定系统范围和系统边界&lt;/li&gt;
&lt;li&gt;定义参与者&lt;/li&gt;
&lt;li&gt;定义用例&lt;/li&gt;
&lt;li&gt;绘制用例图&lt;/li&gt;
&lt;li&gt;绘制主要交互图&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;静态结构模型的建立&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;动态行为模型的建立&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;建立顺序图&lt;/li&gt;
&lt;li&gt;建立通讯图&lt;/li&gt;
&lt;li&gt;建立状态图&lt;/li&gt;
&lt;li&gt;建立活动图&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;系统物理模型的建立&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;代码框架自动生成的过程&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;本章小结-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-4&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;StarUML 是一款开源的 UML 建模工具，基于 UML1.4 版本，提供 11 种不同类型的图，支持 UML2.0 的表示法。另外，StarUML 的扩展机制还允许用户增加定制内容，使用灵活、方便。&lt;/li&gt;
&lt;li&gt;本章介绍了 StarUML 环境下几种典型的 UML 图形建模的基本用法，并通过一个简易教学管理系统的分析和设计，展示了 StarUML 用于分析设计过程的辅助用法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件体系结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件体系结构&#34;&gt;#&lt;/a&gt; 软件体系结构&lt;/h1&gt;
&lt;h2 id=&#34;软件体系结构概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件体系结构概述&#34;&gt;#&lt;/a&gt; 软件体系结构概述&lt;/h2&gt;
&lt;h2 id=&#34;经典的软件体系结构风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#经典的软件体系结构风格&#34;&gt;#&lt;/a&gt; 经典的软件体系结构风格&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;管道 - 过滤器 (流程处理) 体系结构&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;流程处理系统 (Procedure Processing System) 以程序算法和数据结构为中心，由称作过滤器的构件和称作管道的连接件组成的体系结构 (常常被称作管道 - 过滤器体系结构)。每一个处理过程中，先接收数据、进行处理 (过滤)，最后产生输出数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;分层体系结构&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;客户机 / 服务器体系结构&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;两层的客户机 / 服务器体系结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 层和多层体系结构&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;浏览器 / 服务器体系结构 (B/S)&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;现代的软件体系结构风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#现代的软件体系结构风格&#34;&gt;#&lt;/a&gt; 现代的软件体系结构风格&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;公共对象请求代理体系结构&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;基于层次消息总线的体系结构风格&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;异构结构风格&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按功能不同构成的混合体系结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按结点组合方式的不同构成的混合体系结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机式&lt;/li&gt;
&lt;li&gt;轮流式&lt;/li&gt;
&lt;li&gt;负载平分式&lt;/li&gt;
&lt;li&gt;多队列式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本章小结-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-5&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向对象技术的出现和广泛使用，在一定程度上解决了软件可复用性的问题，但同时对软件的可复用性提出了更高的要求，从程序代码的复用逐渐过渡到分析、设计的复用上来。软件体系结构就是希望为软件开发的工程化提供更高抽象层次的复用粒度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件体系结构可以看作是面向对象设计阶段中的总体设计，提供系统设计的总体架构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本章分别介绍几种经典的和现代的软件体系结构的风格和模式，为面向对象设计的总体架构设计提供指导，同时希望在设计复用方面对现代软件工程开发过程提供一些帮助。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计模式&#34;&gt;#&lt;/a&gt; 设计模式&lt;/h1&gt;
&lt;h2 id=&#34;设计模式概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计模式概述&#34;&gt;#&lt;/a&gt; 设计模式概述&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;设计模式的出现和发展&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;设计模式和软件体系结构的关系&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;设计模式的优点和分类&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;grasp-设计模式及其应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#grasp-设计模式及其应用&#34;&gt;#&lt;/a&gt; GRASP 设计模式及其应用&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;GRASP 设计模式概念及其分类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;几种典型的 GRASP 设计模式应用简介&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;信息专家 (Information Expert)&lt;/li&gt;
&lt;li&gt;创建者 (Creator)&lt;/li&gt;
&lt;li&gt;高内聚 (Hign Cohesion)&lt;/li&gt;
&lt;li&gt;低耦合 (Low Goupling)&lt;/li&gt;
&lt;li&gt;控制者 (Controller)&lt;/li&gt;
&lt;li&gt;多态 (Polymorphism)&lt;/li&gt;
&lt;li&gt;纯虚构 (Pure Fabrication)&lt;/li&gt;
&lt;li&gt;间接，也成为中介者 (Indirection)&lt;/li&gt;
&lt;li&gt;受保护变化 (Protected Variations)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;gof-设计模式及其应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gof-设计模式及其应用&#34;&gt;#&lt;/a&gt; GoF 设计模式及其应用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;模式名称&lt;/li&gt;
&lt;li&gt;问题&lt;/li&gt;
&lt;li&gt;解决方案&lt;/li&gt;
&lt;li&gt;效果&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;设计模式的描述&lt;/li&gt;
&lt;li&gt;设计模式的用途&lt;/li&gt;
&lt;li&gt;GoF 给出的 &amp;quot;使用设计模式的循序渐进的方法&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;GoF 设计模式的组成及其分类&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建型模式 (Creational Pattern)：处理新对象的创建过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂方法 (Factory Method)&lt;/li&gt;
&lt;li&gt;抽象工厂 (Abstract Factory)&lt;/li&gt;
&lt;li&gt;生成器 (Builder)&lt;/li&gt;
&lt;li&gt;原型 (Prototype)&lt;/li&gt;
&lt;li&gt;单例 (Singleton)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构性模式 (Structural Pattern)：处理类和对象的组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器 (Adapter)&lt;/li&gt;
&lt;li&gt;桥接 (Bridge)&lt;/li&gt;
&lt;li&gt;组成 (Composite)&lt;/li&gt;
&lt;li&gt;装饰 (Decorator)&lt;/li&gt;
&lt;li&gt;外观 (Facade)&lt;/li&gt;
&lt;li&gt;享元 (FlyWeight)&lt;/li&gt;
&lt;li&gt;代理 (Proxy)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行为型模式 (Behavioral Pattern)：详细说明对象或类之间如何交互及如何分配职责。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;责任链 (Chain of Responsibility)&lt;/li&gt;
&lt;li&gt;命令 (Command)&lt;/li&gt;
&lt;li&gt;解释器 (Interpreter)&lt;/li&gt;
&lt;li&gt;迭代器 (Iterator)&lt;/li&gt;
&lt;li&gt;中介者 (Mediator)&lt;/li&gt;
&lt;li&gt;备忘录 (Memento)&lt;/li&gt;
&lt;li&gt;观察者 (Observer)&lt;/li&gt;
&lt;li&gt;状态 (State)&lt;/li&gt;
&lt;li&gt;策略 (Strategy)&lt;/li&gt;
&lt;li&gt;模板方法 (Template Method)&lt;/li&gt;
&lt;li&gt;访问者 (Visitor)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;本章小结-6&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-6&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格及解决问题的思考方式。使用设计模式是为了重用已有的设计经验、框架、代码，以便让代码更容易被他人理解，保证代码可靠性。对设计模式的理解和掌握是程序员提高自身素质的一个很好的方面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GRASP 模式着重考虑设计类的原则及如何分配类的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoF 模式着重考虑设计的实现、类的交互和软件质量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GRASP 可以说是 GoF 设计模式的基础，GoF 模式是符合 GRASP 模式要求的面向对象设计模式。GoF 设计模式针对特定问题提出相应解决方法，是目前常用的设计模式之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本章主要介绍设计模式的基本概念和发展、GRASP 设计模式和 GoF 设计模式的概念及其分类，并给出典型的应用实例，目的是使读者掌握设计模式的基本理论及应用设计模式解决软件设计中的实际问题的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;软件工程新技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件工程新技术&#34;&gt;#&lt;/a&gt; 软件工程新技术&lt;/h1&gt;
&lt;h2 id=&#34;软件复用技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件复用技术&#34;&gt;#&lt;/a&gt; 软件复用技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;软件复用 (Software Reuse) 是指在软件开发过程中重复使用相同或相似软件元素的过程。通过软件复用，可以提高软件开发的效率和质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;软件复用概念及分类&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;软件复用的关键技术和复用粒度&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件复用有 3 个基本问题
&lt;ol&gt;
&lt;li&gt;必须有可以复用的对象&lt;/li&gt;
&lt;li&gt;所复用的对象必须是有用的&lt;/li&gt;
&lt;li&gt;复用者需要知道如何去使用被服用的对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于构件的软件工程技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于构件的软件工程技术&#34;&gt;#&lt;/a&gt; 基于构件的软件工程技术&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;中间件技术&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;中间件是一个用应用程序接口定义的分布式软件管理框架，其有强大的通信能力和良好的可扩展性。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;中间件要解决的问题
&lt;ul&gt;
&lt;li&gt;互连和互操作的问题&lt;/li&gt;
&lt;li&gt;核心要解决名字服务、安全控制、并发控制、可靠性保证、效率保证等&lt;/li&gt;
&lt;li&gt;特点
&lt;ol&gt;
&lt;li&gt;满足大量应用的需要&lt;/li&gt;
&lt;li&gt;运行于多种硬件和操作系统平台&lt;/li&gt;
&lt;li&gt;支持分布式计算&lt;/li&gt;
&lt;li&gt;提供跨网络、硬件和操作系统平台的透明性&lt;/li&gt;
&lt;li&gt;支持标准的协议和接口&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中间件的分类
&lt;ul&gt;
&lt;li&gt;根据中间件具有的功能和所提供的服务分类：
&lt;ol&gt;
&lt;li&gt;面向对象中间件&lt;/li&gt;
&lt;li&gt;面向消息中间件&lt;/li&gt;
&lt;li&gt;容错中间件&lt;/li&gt;
&lt;li&gt;反射中间件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;基于 IDC 分类
&lt;ol&gt;
&lt;li&gt;终端仿真 / 屏幕转换&lt;/li&gt;
&lt;li&gt;数据访问中间件&lt;/li&gt;
&lt;li&gt;远程过程调用中间件&lt;/li&gt;
&lt;li&gt;消息中间件&lt;/li&gt;
&lt;li&gt;交易中间件&lt;/li&gt;
&lt;li&gt;基于对象请求代理 (Object Request Broker ,ORB) 中间件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中间件的发展及认识度&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;构件与构件化&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;构件技术的基本思想在于：创建和利用可复用的软件构件来解决软件开发的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;构件模型及描述语言&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;构建模型
&lt;ul&gt;
&lt;li&gt;构件实现模型的基本思想:
&lt;ul&gt;
&lt;li&gt;采用将构件的接口和实现相分离的原则；&lt;/li&gt;
&lt;li&gt;采用黑盒重用的方式，外界仅可以通过构件的接口来访问构件的功能；&lt;/li&gt;
&lt;li&gt;在实现方法上都使用接口描述语言 (Interface Description Language , IDL) 进行构件接口定义，利用相应的中间件作为支撑该构件模型的运行时环境，从而达到由不同的编程语言所实现、运行在不同的操作系统环境中及不同主机上的构件都能相互交互的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构件描述语言&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;构件的检索与组装&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;构件的检索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;枚举分类&lt;/li&gt;
&lt;li&gt;刻面分类&lt;/li&gt;
&lt;li&gt;属性值分类&lt;/li&gt;
&lt;li&gt;正文检索&lt;/li&gt;
&lt;li&gt;关键词分类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件组装技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件组装技术及方法的分类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构件组装的实现方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;基于构件的软件工程方法&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;软件团队针对系统需求的构件，采用如下问题列表的方式确认本系统中需要的构件的获取方式：
&lt;ol&gt;
&lt;li&gt;现有的商业成品构件 (Commercial Off-The-Shelf, COTS) 是否能够实现该需求？&lt;/li&gt;
&lt;li&gt;内部开发的可复用构件是否能够实现该需求？&lt;/li&gt;
&lt;li&gt;可用构件的接口与待构造系统的体系结构是否相容？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;SOA 与 SaaS&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;SOA (Service-Oriented Architecture, 面向服务架构)&lt;/li&gt;
&lt;li&gt;SaaS (Software-as-a-Service, 软件即服务)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软件过程与标准化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件过程与标准化&#34;&gt;#&lt;/a&gt; 软件过程与标准化&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;软件过程及其改进&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;对比目前的状态和期望达到的状态，找出存在的差距。&lt;/li&gt;
&lt;li&gt;确定要改变那些差距，需要改变到什么程度。&lt;/li&gt;
&lt;li&gt;制定相应的具体实施计划，其中的 &amp;quot;具体&amp;quot; 包括
&lt;ul&gt;
&lt;li&gt;要有明确的、可以检验的目标；&lt;/li&gt;
&lt;li&gt;要定出检验成功与否的标准；&lt;/li&gt;
&lt;li&gt;要有具体的实施办法；&lt;/li&gt;
&lt;li&gt;指定具体执行计划的人，明确具体的职责和任务；&lt;/li&gt;
&lt;li&gt;明确执行计划的主要领导或协调者，以负责解决在计划执行中出现的问题&lt;/li&gt;
&lt;li&gt;要列出 &amp;quot;实施计划&amp;quot; 所应用的新技术与新工具及如何获得这些新技术与新工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;ISO 9000 标准&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;软件能力成熟度模型 (CMM)&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;CMM (Capability Maturity Model) 卡内基梅隆大学软件工程研究院 SEI 受美国国防部委托制定的软件过程的改良、评估模型，也称为 SEI SW-CMM (Software Engineering Institute Software-Capability Maturity Model).&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CMM 的内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始级 (Initial)&lt;/li&gt;
&lt;li&gt;可重复级 (Repeatable)&lt;/li&gt;
&lt;li&gt;已定义级 (Defined)&lt;/li&gt;
&lt;li&gt;已管理级 (Managed)&lt;/li&gt;
&lt;li&gt;优化级 (Optimizing)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键过程域 (Key Process Area,KPA)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CMM 实施中应注意的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;PSP、TSP 和 CMMI&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;个体软件过程 (Personal Software Process , PSP)&lt;/li&gt;
&lt;li&gt;小组软件开发过程 (Team Software Process , TSP)&lt;/li&gt;
&lt;li&gt;能力成熟度继承模型 (Capability Maturity Model Integration , CMMI)
&lt;ul&gt;
&lt;li&gt;SW-CMM (Software CMM) 软件 CMM&lt;/li&gt;
&lt;li&gt;SE-CMM (System Engineering CMM) 系统工程 CMM&lt;/li&gt;
&lt;li&gt;SA-CMM (Software Acquisition CMM) 软件采购 CMM&lt;/li&gt;
&lt;li&gt;IPT-CMM (Integrated Product Team CMM) 集成产品群组 CMM&lt;/li&gt;
&lt;li&gt;P-CMM (People CMM) 人力资源能力成熟度模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;敏捷软件开发过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#敏捷软件开发过程&#34;&gt;#&lt;/a&gt; 敏捷软件开发过程&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;敏捷及敏捷过程的相关概念&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;敏捷过程&amp;quot; 在软件业中的提出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可工作软件胜过面面俱到的文档&lt;/li&gt;
&lt;li&gt;客户合作胜过合同谈判&lt;/li&gt;
&lt;li&gt;响应变化胜过遵循计划&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏捷的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏捷宣言所遵循的 12 条原则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人们最优先要做的是通过尽早地、持续地交付有价值的软件来使客户满意&lt;/li&gt;
&lt;li&gt;即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势&lt;/li&gt;
&lt;li&gt;经常性的交付可以工作的软件，交付的间隔可以从几个星期到几个月，交付的时间间隔越短越好。&lt;/li&gt;
&lt;li&gt;在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。&lt;/li&gt;
&lt;li&gt;围绕被激励起来的个体来构建项目。给它们提供所需的环境和支持，并且信任它们能够完成工作。&lt;/li&gt;
&lt;li&gt;在团队内部，最具有效果并且富有效率的传递信息的方法就是面对面的交谈&lt;/li&gt;
&lt;li&gt;工作的软件是首要的进度度量标准&lt;/li&gt;
&lt;li&gt;敏捷过程提倡可持续的开发进度。责任人、开发者和用户应保持一个长期恒定的开发速度。&lt;/li&gt;
&lt;li&gt;不断关注优秀的技能和好的设计会增强敏捷能力&lt;/li&gt;
&lt;li&gt;简单 - &lt;span class=&#34;rainbow&#34;&gt;使未完成的工作最大化的艺术&lt;/span&gt; - 是根本的&lt;/li&gt;
&lt;li&gt;最好的架构、需求和设计出自于自组织的团队&lt;/li&gt;
&lt;li&gt;每隔一定时间，团队会在如何才能更有效的工作方面进行反省，然后相应地对自己的行为进行调整。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏捷软件过程的特性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;轻载软件过程&lt;/li&gt;
&lt;li&gt;基于时间&lt;/li&gt;
&lt;li&gt;够用就好&lt;/li&gt;
&lt;li&gt;并行&lt;/li&gt;
&lt;li&gt;基于构建的软件工程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏捷软件过程模型 = 功能模型 + 合作模型 + 资源模型 + 产品模型&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;典型的敏捷过程模型&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;极限编程 (eXtreme Programming , XP)&lt;/li&gt;
&lt;li&gt;Scrum 方法
&lt;ul&gt;
&lt;li&gt;待定项 (Backlog)&lt;/li&gt;
&lt;li&gt;冲刺 (Sprint)&lt;/li&gt;
&lt;li&gt;例会&lt;/li&gt;
&lt;li&gt;演示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特征驱动开发 (Feature Driven Development , FDD)
&lt;ul&gt;
&lt;li&gt;FDD 的核心
&lt;ul&gt;
&lt;li&gt;领域对象建模&lt;/li&gt;
&lt;li&gt;按照特征开发&lt;/li&gt;
&lt;li&gt;类 (代码) 拥有权&lt;/li&gt;
&lt;li&gt;特征小组&lt;/li&gt;
&lt;li&gt;审查&lt;/li&gt;
&lt;li&gt;定期构造&lt;/li&gt;
&lt;li&gt;配置管理&lt;/li&gt;
&lt;li&gt;可视性进度报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FDD 方法包括 5 个过程组成
&lt;ul&gt;
&lt;li&gt;开发整体模型&lt;/li&gt;
&lt;li&gt;构建特征列表&lt;/li&gt;
&lt;li&gt;依据特征规划&lt;/li&gt;
&lt;li&gt;依据特征设计&lt;/li&gt;
&lt;li&gt;依据特征构建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;web-软件工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-软件工程&#34;&gt;#&lt;/a&gt; Web 软件工程&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;Web 软件工程概述&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;基于 Web 的系统和应用的属性和特点
&lt;ul&gt;
&lt;li&gt;网络密集型 (Network Intensive)&lt;/li&gt;
&lt;li&gt;访问并发性 (Concurrency)&lt;/li&gt;
&lt;li&gt;工作负荷的跳跃性 (Unpredictable load)&lt;/li&gt;
&lt;li&gt;性能 (Performance)&lt;/li&gt;
&lt;li&gt;安全性 (Security)&lt;/li&gt;
&lt;li&gt;可用性 (Availability)&lt;/li&gt;
&lt;li&gt;数据驱动 (Data driven)&lt;/li&gt;
&lt;li&gt;内容敏感性 (Content Sensitive)&lt;/li&gt;
&lt;li&gt;持续演化 (Continuous Evolution)&lt;/li&gt;
&lt;li&gt;即时性 (Immediacy)&lt;/li&gt;
&lt;li&gt;美观性 (Aesthetics)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web 工程过程
&lt;ul&gt;
&lt;li&gt;计划阶段&lt;/li&gt;
&lt;li&gt;建模阶段&lt;/li&gt;
&lt;li&gt;构建阶段&lt;/li&gt;
&lt;li&gt;部署阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;Web 软件的需求分析&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;内容模型&lt;/li&gt;
&lt;li&gt;交互模型&lt;/li&gt;
&lt;li&gt;功能模型&lt;/li&gt;
&lt;li&gt;配置模型&lt;/li&gt;
&lt;li&gt;导航模型&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;Web 软件的设计&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;WebApp 界面设计&lt;/li&gt;
&lt;li&gt;美学设计&lt;/li&gt;
&lt;li&gt;内容设计&lt;/li&gt;
&lt;li&gt;体系结构设计
&lt;ul&gt;
&lt;li&gt;线性结构&lt;/li&gt;
&lt;li&gt;网络结构&lt;/li&gt;
&lt;li&gt;层次结构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;导航设计
&lt;ul&gt;
&lt;li&gt;单独的导航链接&lt;/li&gt;
&lt;li&gt;水平导航条&lt;/li&gt;
&lt;li&gt;垂直导航列&lt;/li&gt;
&lt;li&gt;标签&lt;/li&gt;
&lt;li&gt;网站地图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构件级设计&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;Web 软件的测试&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;内容&lt;/li&gt;
&lt;li&gt;功能&lt;/li&gt;
&lt;li&gt;结构&lt;/li&gt;
&lt;li&gt;易用性&lt;/li&gt;
&lt;li&gt;导航性&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;兼容性&lt;/li&gt;
&lt;li&gt;互操作性&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;软件产品线技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件产品线技术&#34;&gt;#&lt;/a&gt; 软件产品线技术&lt;/h2&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;软件产品线基本概念&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件产品线的 3 大基本活动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件产品线的特点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;软件产品线方法&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note primary&#34;&gt;
&lt;p&gt;北大青鸟工程&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;青鸟工程简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;青鸟软件生产线系统&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本章小结-7&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本章小结-7&#34;&gt;#&lt;/a&gt; 本章小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;随着软、硬件技术、网络的发展及计算理念的变化，软件工程领域也出现了很多新的技术。本章主要介绍继面向对象技术之后软件工程领域研究使用的新技术，包括软件复用技术、基于构建的软件工程技术（中间件和构件技术）、软件能力成熟度模型、敏捷软件工程、Web 软件工程及软件产品线技术。&lt;/li&gt;
&lt;li&gt;软件复用技术是其他软件工程技术的核心和基础。基于构建的软件工程技术需要软件体系结构的支持。软件能力成熟度模型则是从软件过程改进的角度为个人、团队和整个软件开发组织提供参考。敏捷软件过程改变了传统的软件开发过程中先设计后实现的思想，敏捷更强调快速灵活反应，主动迎接和适应变化。敏捷开发能够适应中小型快速软件开发的需求，代表了 21 世纪互联网时代软件开发模式的一种先进理念和价值观。随着网络应用逐渐成为人们生活中不可或缺的组成部分，以 Web 系统和应用为主体的 Web 软件工程 (简称 Web 工程) 成为软件工程中一个渐渐分离的独立分支。Web 工程借用了软件工程的许多基本概念和原理，以相同的技术和管理活动完成具有 Web 应用特色的软件生存周期。软件产品线方法是软件工程领域中软件体系结构和软件重用技术发展的结果，产品线方法可以看作是软件复用发展的一个更高阶段，目前关于软件产品线的研究更多还在实验阶段。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <updated>2023-09-08T09:54:00.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/09/08/note/CLanguage/</id>
        <title>2024 C语言程序设计</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/09/08/note/CLanguage/"/>
        <content type="html">&lt;h1 id=&#34;c语言与程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言与程序设计&#34;&gt;#&lt;/a&gt; C 语言与程序设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C 语言特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语言本身简洁、灵活、表达能力强，被广泛运用于系统软件和应用软件的开发，并且具有良好的可移植性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算机的解题过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分析问题&lt;/li&gt;
&lt;li&gt;设计算法&lt;/li&gt;
&lt;li&gt;编写程序&lt;/li&gt;
&lt;li&gt;运行验证&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法是精确定义的一系列规则的集合，这些规则规定了解决特定问题的一系列操作，以便于在有限的步骤内产生出问题的答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法的特性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有穷性&lt;/li&gt;
&lt;li&gt;确定性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法的表示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自然语言的描述&lt;/li&gt;
&lt;li&gt;传统流程图&lt;/li&gt;
&lt;li&gt;N-S 流程图&lt;/li&gt;
&lt;li&gt;伪代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用的算法介绍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;枚举法&lt;/li&gt;
&lt;li&gt;递推法&lt;/li&gt;
&lt;li&gt;递归法&lt;/li&gt;
&lt;li&gt;回溯法&lt;/li&gt;
&lt;li&gt;贪婪法&lt;/li&gt;
&lt;li&gt;动态规划法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构化程序的设计基本思想&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用自顶向下，逐步求精的程序设计&lt;/li&gt;
&lt;li&gt;任何程序只使用顺序、选择和循环这三种基本控制结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;c语言基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言基本概念&#34;&gt;#&lt;/a&gt; C 语言基本概念&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简单的 C 语言程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单输出一个 &lt;span class=&#34;rainbow&#34;&gt;hello world&lt;/span&gt; 字符串，表明向全世界宣布 &amp;quot;C 语言我来了！&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字和标识符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符集&lt;/li&gt;
&lt;li&gt;关键字&lt;/li&gt;
&lt;li&gt;标识符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型
&lt;ul&gt;
&lt;li&gt;整数类型&lt;/li&gt;
&lt;li&gt;浮点类型&lt;/li&gt;
&lt;li&gt;字符类型&lt;/li&gt;
&lt;li&gt;枚举类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构造类型&lt;/li&gt;
&lt;li&gt;指针类型&lt;/li&gt;
&lt;li&gt;空类型 (void)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常量和变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数常量&lt;/li&gt;
&lt;li&gt;浮点数常量&lt;/li&gt;
&lt;li&gt;字符常量&lt;/li&gt;
&lt;li&gt;字符串常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;PI&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;3.14159&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量声明
&lt;ul&gt;
&lt;li&gt;格式： 数据类型  变量名列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运算符和表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;li&gt;自增自减运算符&lt;/li&gt;
&lt;li&gt;算术运算符 (实际运用中少，考试出题较多)&lt;/li&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;li&gt;其他运算符
&lt;ul&gt;
&lt;li&gt;逗号运算符&lt;/li&gt;
&lt;li&gt;条件运算符&lt;/li&gt;
&lt;li&gt;求字节运算符 (sizeof ())&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式转换
&lt;ul&gt;
&lt;li&gt;自动类型类型转换&lt;/li&gt;
&lt;li&gt;赋值类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;显式转换
&lt;ul&gt;
&lt;li&gt;强制类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;程序控制结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#程序控制结构&#34;&gt;#&lt;/a&gt; 程序控制结构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;顺序结构
&lt;ul&gt;
&lt;li&gt;赋值
&lt;ul&gt;
&lt;li&gt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据输出
&lt;ul&gt;
&lt;li&gt;putchar() , printf()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据输入
&lt;ul&gt;
&lt;li&gt;getchar() , scanf()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择结构
&lt;ul&gt;
&lt;li&gt;关系运算符、关系表达式&lt;/li&gt;
&lt;li&gt;逻辑运算符、逻辑表达式&lt;/li&gt;
&lt;li&gt;if, else, else if, switch&lt;/li&gt;
&lt;li&gt;选择嵌套&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环结构
&lt;ul&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;do while&lt;/li&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;li&gt;循环嵌套&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数组和字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组和字符串&#34;&gt;#&lt;/a&gt; 数组和字符串&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一维数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二维数组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多维数组&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;指针&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指针&#34;&gt;#&lt;/a&gt; 指针&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;指针是表示计算机内存地址的数据类型，
&lt;ul&gt;
&lt;li&gt;指针就是地址，指针变量就是存储地址的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数&#34;&gt;#&lt;/a&gt; 函数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;结构体-共用体和枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构体-共用体和枚举&#34;&gt;#&lt;/a&gt; 结构体、共用体和枚举&lt;/h1&gt;
&lt;h1 id=&#34;文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件&#34;&gt;#&lt;/a&gt; 文件&lt;/h1&gt;
&lt;h1 id=&#34;编译预处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编译预处理&#34;&gt;#&lt;/a&gt; 编译预处理&lt;/h1&gt;
&lt;h1 id=&#34;实验指导&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实验指导&#34;&gt;#&lt;/a&gt; 实验指导&lt;/h1&gt;
</content>
        <category term="总结" />
        <updated>2023-09-08T09:51:00.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/01/16/note/securityFrame/</id>
        <title>亚信安全框架遇到的坑</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/01/16/note/securityFrame/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;问题一
&lt;ol&gt;
&lt;li&gt;框架表单配置问题预览&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%B8%80.png&#34; alt=&#34;页面显示问题&#34; /&gt;&lt;/li&gt;
&lt;li&gt;该框架页面配置设计 f_page 以开头的&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%BA%8C.png&#34; alt=&#34;解决问题思路&#34; /&gt;&lt;/li&gt;
&lt;li&gt;从前端查看并定位请求后端的路径&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%B8%89.png&#34; alt=&#34;第一步&#34; /&gt;&lt;/li&gt;
&lt;li&gt;找到 f_page_cmpt_attr 表，ctrl + f 全局搜索路径，找到对应的 cmpt_id&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E5%9B%9B.png&#34; alt=&#34;第二步&#34; /&gt;&lt;/li&gt;
&lt;li&gt;找到 f_page_view_layout 找到 view_id 为 10007，business_id 为 9300003&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%BA%94.png&#34; alt=&#34;第三步&#34; /&gt;&lt;/li&gt;
&lt;li&gt;输入账号登录系统，然后刷新系统&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E5%85%AD.png&#34; alt=&#34;第四步&#34; /&gt;&lt;/li&gt;
&lt;li&gt;最后成功的样例图&lt;br /&gt;
&lt;img data-src=&#34;/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%B8%83.png&#34; alt=&#34;第五步&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <updated>2023-01-16T05:48:53.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/01/13/note/hexoUseReport/</id>
        <title>hexo使用问题记录</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/01/13/note/hexoUseReport/"/>
        <content type="html">&lt;h2 id=&#34;hexo-d-timeout&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hexo-d-timeout&#34;&gt;#&lt;/a&gt; hexo d timeout&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hexo d 部署到 github 仓库，经常超时，科学上网也用！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/hexoPushTimeOut.png&#34; alt=&#34;提交代码超时问题&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决方法
&lt;ul&gt;
&lt;li&gt;找到项目的 _config.yml 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: https://hexo.io/docs/one-command-deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;deploy:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  type: &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 1. 问题： 仓库地址 repository 设置成 https 开头，会经常超时&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# repo: https://github.com/hk2012/hk2012.github.io.git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 2. 解决方法   &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  repo: git@github.com:hk2012/hk2012.github.io.git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  branch: master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="总结" />
        <updated>2023-01-13T03:04:53.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/01/12/note/npmUse/</id>
        <title>npm 使用记录</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/01/12/note/npmUse/"/>
        <content type="html">&lt;h2 id=&#34;npm-使用记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#npm-使用记录&#34;&gt;#&lt;/a&gt; npm 使用记录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;npm 版本升级&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;npm 版本降级  （6.14 就是你想要降的版本）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; npm@6.14 &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;npm 清理缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; cache clean &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;vue-通过-nginx-部署-404-问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-通过-nginx-部署-404-问题&#34;&gt;#&lt;/a&gt; vue 通过 nginx 部署 404 问题&lt;/h2&gt;
&lt;p&gt;效果图&lt;br /&gt;
&lt;img data-src=&#34;/img/nginx_404_route.png&#34; alt=&#34;vue history模式 404&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PS : 之所以出现上面的现象，是因为在 nginx 配置的文件下面压根没有 &#39;build/index&#39; 这个真实资源存在，这些访问&lt;br /&gt;
资源都是在 js 里渲染的。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;问题： 出现 404 的原因是由于在这个域名根目录 /data/irs/irs-caster/frontend 文件下面压根没有 &#39;build/index&#39; 这个真实资源存在&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        listen       &lt;span class=&#34;token number&#34;&gt;2643&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        server_name  &lt;span class=&#34;token number&#34;&gt;43.192&lt;/span&gt;.4.68&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        index index.php index.html index.htm default.php default.htm default.html&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        root /data/irs/irs-caster/frontend&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;解决问题&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;server &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    listen       &lt;span class=&#34;token number&#34;&gt;2643&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    server_name  &lt;span class=&#34;token number&#34;&gt;43.192&lt;/span&gt;.4.68&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    index index.php index.html index.htm default.php default.htm default.html&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    root /data/irs/irs-caster/frontend&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;#vue-router 配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    location / &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    try_files &lt;span class=&#34;token variable&#34;&gt;$uri&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$uri&lt;/span&gt;/ @router&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    index index.html&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    location @router &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rewrite ^.*$ /index.html last&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;重启 nginx 后，问题就迎刃而解了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="总结" />
        <updated>2023-01-12T08:36:53.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/01/11/note/influxdbTheory/</id>
        <title>influxdb 知识总结</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/01/11/note/influxdbTheory/"/>
        <content type="html">&lt;h2 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义：influxDB 是一个有 influxData 开发的开源时序型数据库，专注于海量时序数据的高性能读和写、高效存储和实时分析。广泛应用于 DevOps 监控、实时分析，物联网监控（loT 监控）等.&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <updated>2023-01-11T08:25:53.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2023/01/11/note/messageQueue/</id>
        <title>消息队列 知识总结</title>
        <link rel="alternate" href="https://hongkuan.github.io/2023/01/11/note/messageQueue/"/>
        <content type="html">&lt;h3 id=&#34;定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;消息队列：消息是进程或是系统之间通讯的一种方式。系统之间通讯还有另一种方式：RPC（目前的 gRPC）.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组成部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Broker (消息服务器，核心部分)&lt;/li&gt;
&lt;li&gt;producer (消息生产者)&lt;/li&gt;
&lt;li&gt;consumer (消息消费者)&lt;/li&gt;
&lt;li&gt;Topic (主题)&lt;/li&gt;
&lt;li&gt;Queue (队列)&lt;/li&gt;
&lt;li&gt;Message (消息体)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息队列&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用解耦&lt;/li&gt;
&lt;li&gt;流量削峰&lt;/li&gt;
&lt;li&gt;异步通信&lt;/li&gt;
&lt;li&gt;日志收集&lt;/li&gt;
&lt;li&gt;事务最终一致性 ：定义全局事务管理器，和局部资源管理器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <updated>2023-01-11T07:25:53.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2022/11/17/note/dataTransferOptimization/</id>
        <title>二级节点同步数据优化至每日1500万</title>
        <link rel="alternate" href="https://hongkuan.github.io/2022/11/17/note/dataTransferOptimization/"/>
        <content type="html">&lt;h3 id=&#34;背景介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#背景介绍&#34;&gt;#&lt;/a&gt; 背景介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;二级节点：相当于标识解析系统的上级，标识解析系统所产生的 &amp;lt;产品模板&amp;gt; 和 &amp;lt; 产品标识 &amp;gt; 的数据都要同步到 2 级节点平台上&lt;/li&gt;
&lt;li&gt;同步：二级节点为我们提供对外的 api，我们通过 api 文档上传对应的数据&lt;/li&gt;
&lt;li&gt;同步顺序：先同步产品模板，后同步产品标识。因为同步的标识会关联到对应的产品模板.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;优化历程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优化历程&#34;&gt;#&lt;/a&gt; 优化历程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;将同步二级节点的接口，从同步单个接口换成了批量同步接口 (每次最多同步 2k 个)&lt;/li&gt;
&lt;li&gt;将前缀索引查询换成偏移量进行查询优化&lt;/li&gt;
&lt;li&gt;将 for 循环里的 sql 语句，修改为批量同步和查询，减少系统和数据库的请求次数。节省大量创建连接和断开连接的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方案&#34;&gt;#&lt;/a&gt; 方案&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;将每一个可能消耗时间的步骤都添加了时间消耗统计，分析一下代码每次同步 2k 条数据消耗时长大概在 12s 左右&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;原来的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;updateStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; status&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 这个 values 是从数据库查询出来的 2000 条数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt; rowValue &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; update &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;update irs_single_product_data set status= &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; status &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;  where &#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;handle =&#39;&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; rowValue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                wapiBaseService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;customSql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;db_irs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;更新标识状态异常，&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;优化后的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mapper层&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * 通过 handle 批量修改状态&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param status&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @param handles&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     * @return&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;updateBatchStatusByHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Param&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;status&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt; status&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token annotation punctuation&#34;&gt;@Param&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;handles&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; handles&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mapperxml层：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;update id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;updateBatchStatusByHandle&#34;&lt;/span&gt; parameterType&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;java.util.List&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@mbg.generated&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;foreach  collection&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;handles&#34;&lt;/span&gt; item&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;item&#34;&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;index&#34;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; close&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt; separator&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            update irs_single_product_data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;set&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                 status &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; #&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;status&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;set&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            where handle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; #&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;foreach&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;update&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;service层：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;updateStatus&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; status&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; handle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; statusInteger &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;status&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            irsSingleProductDataMapper&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;updateBatchStatusByHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;statusInteger&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; handle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;更新标识状态异常，&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;最后还要再jdbc url配置文件拼接 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;allowMultiQueries&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; ，还要在mysql中配置max_allowed_packet 大小，我目前设置的是&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;G&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;此次优化将时间控制在 5s 左右&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在同步多家不同的企业发现，在同步和验证数据的时候发现花费的时间不同，有长有短&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;原来的代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;synchSingleDatas&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; state_url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; templates&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; state_url &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/identityv2/data/batchCreate&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 批量注册&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 查询 prefix 关联模板&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; handles &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; productMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HashMap&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tempId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt; template &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; templates&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; resultlist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; piciHandle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; template&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;pici_handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; proHandle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; template&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;product_handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;StringUtils&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;productMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;proHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    resultlist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; wapiBaseService&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;customQuerySql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                    &lt;span class=&#34;token string&#34;&gt;&#34; select * from irs_standerd_register_data where handle = &#39;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                            &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; proHandle &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#39; and opreate=1 and state=1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                    &lt;span class=&#34;token string&#34;&gt;&#34;db_irs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resultlist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        tempId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; resultlist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;template_id&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        productMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;template&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;product_handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tempId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    tempId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; productMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;template&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;product_handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;formatCreateSingleHandleContent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;template&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tempId&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        handles&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; map&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; piciHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; content &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;handles&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; responses &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; irsHttpService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;batchRegisterHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;同步接口返回： &amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;responses&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; responses&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;status&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;标识数据同步失败,&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;99&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;formatCreateSingleHandleContent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; product&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tempId&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                                &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; handles&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; map&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; piciHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt; handle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        handleValue value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;HandleData&lt;/span&gt; data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        handle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;handleValue&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; values &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        handle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;product&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        handle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setTemplateVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;单品模板&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tempId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; datas &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;StringUtils&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tempId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            datas &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; wapiBaseService&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;customQuerySql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;SELECT * FROM irs_template_elements WHERE template_id = &#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tempId &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; AND property != &#39;private&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;db_irs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tempId&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; datas&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            datas &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tempId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;datas &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;datas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt; temp &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; datas&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 查询 handle 的 value 值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;handleValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HandleData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;English_name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAuth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;string&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                index&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            handle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            handles&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;handle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;单品模板异常,&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;handles&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;优化后的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;span&gt;a&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;synchSingleDatas&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; state_url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; state_url &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/identityv2/data/batchCreate&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 批量注册&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;StopWatch&lt;/span&gt; stopWatch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StopWatch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;同步接口返回耗时&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        stopWatch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; handles &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; collect &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parallelStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;groupingBy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;product_handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token class-name&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mapping&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;handle&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;AtomicReference&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; datas &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AtomicReference&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            collect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;productHandleKey&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; singleHandleValues&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; resultlist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; wapiBaseService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;customQuerySql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;select template_id from irs_standerd_register_data where handle = &#39;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; productHandleKey &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#39; and opreate = 1 and state = 1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;db_irs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; tempId &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; resultlist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;template_id&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    datas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wapiBaseService&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;customQuerySql&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;SELECT * FROM irs_template_elements WHERE template_id = &#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                    &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tempId &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; AND property != &#39;private&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;db_irs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; singleHandle &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; singleHandleValues&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt; handle&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        handleValue value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token class-name&#34;&gt;HandleData&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        handle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SynchCreateHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;handleValue&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; elementValues &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        handle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;singleHandle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        handle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setTemplateVersion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;单品模板&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tempId&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;RowValue&lt;/span&gt; temp &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; datas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            &lt;span class=&#34;token comment&#34;&gt;// 查询 handle 的 value 值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;handleValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HandleData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;English_name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAuth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setFormat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;string&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFieldValue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            elementValues&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                            index&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                        handles&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;handle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;单品模板异常,&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; content &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;handles&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; responses &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; irsHttpService&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;batchRegisterHandle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; content&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;同步接口返回： &amp;#123;&amp;#125;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toJSONString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;responses&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            stopWatch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;stopWatch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTotalTimeMillis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; responses&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;status&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Exception&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;标识数据同步失败,&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;99&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;此次优化将时间控制在 2s 左右&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="总结" />
        <updated>2022-11-17T07:27:53.000Z</updated>
    </entry>
    <entry>
        <id>https://hongkuan.github.io/2022/10/16/note/kafkaManual/</id>
        <title>kafka使用手册</title>
        <link rel="alternate" href="https://hongkuan.github.io/2022/10/16/note/kafkaManual/"/>
        <content type="html">&lt;p&gt;systemctl start kafka&lt;br /&gt;
systemctl start zookeeper&lt;/p&gt;
&lt;p&gt;zookeeper 启动：&lt;br /&gt;
cd zookeeper home&lt;br /&gt;
 例如：&lt;br /&gt;
cd /home/user/app/zookeeper/bin&lt;br /&gt;
sh &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3prU2VydmVyLnNo&#34;&gt;zkServer.sh&lt;/span&gt; start&lt;/p&gt;
&lt;p&gt;1、启动 kafka&lt;br /&gt;
nohup bin/kafka-server-start.sh config/server.properties &amp;amp;&lt;/p&gt;
&lt;p&gt;2、创建 topic：&lt;br /&gt;
bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 &lt;br /&gt;
--create --partitions 1 --replication-factor 1 --topic flowpush&lt;br /&gt;
 测试环境中&lt;br /&gt;
 bin/kafka-topics.sh --bootstrap-server 192.168.199.83:22390 &lt;br /&gt;
--create --partitions 1 --replication-factor 1 --topic flowpush&lt;/p&gt;
&lt;p&gt;bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 &lt;br /&gt;
--create --topic goods --partitions 1 --replication-factor 2&lt;/p&gt;
&lt;p&gt;bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 &lt;br /&gt;
--create --topic provider --partitions 1 --replication-factor 2&lt;/p&gt;
&lt;p&gt;bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 &lt;br /&gt;
--create --topic orders --partitions 10 --replication-factor 2&lt;/p&gt;
&lt;p&gt;3、删除 topic&lt;br /&gt;
bin/kafka-topics.sh --delete --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --topic orders&lt;/p&gt;
&lt;p&gt;3、查看 topic&lt;br /&gt;
bin/kafka-topics.sh --list --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390&lt;br /&gt;
 测试环境中&lt;br /&gt;
 bin/kafka-topics.sh --list --bootstrap-server 192.168.199.83:22390&lt;/p&gt;
&lt;p&gt;bin/kafka-topics.sh --describe --bootstrap-server 192.168.199.83:22390 --topic orderSec-3&lt;/p&gt;
&lt;p&gt;4、发送消息到 topic = orders  ------&lt;br /&gt;
bin/kafka-console-producer.sh --broker-list 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --topic orders&lt;/p&gt;
&lt;p&gt;5、从头查看 topic=orders 的消息&lt;br /&gt;
 bin/kafka-console-consumer.sh --bootstrap-server 192.168.199.83:22390,192.168.199.83:22390,192.168.199.83:22390 --from-beginning --topic test&lt;br /&gt;
bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:22390  --from-beginning --topic leakdatas&lt;br /&gt;
6、查看 topic 最近的消息&lt;br /&gt;
查看最新：&lt;br /&gt;
bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:22390 --topic notes&lt;/p&gt;
&lt;p&gt;7、查看每个分区的 offset&lt;br /&gt;
./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list 192.168.139.199:22390,192.168.139.209:22390,192.168.139.210:22390 --topic test1&lt;br /&gt;
./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list  127.0.0.1:22390 --topic leakdatas&lt;/p&gt;
&lt;p&gt;8、分区扩展&lt;br /&gt;
 bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --alter --topic orders --partitions 10&lt;/p&gt;
&lt;p&gt;配置 jks 访问：&lt;br /&gt;
查看 topic&lt;br /&gt;
./kafka-topics.sh --list --zookeeper &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2thZmthLmJyb2tlci5jb206NjAwNjU=&#34;&gt;kafka.broker.com:60065&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;9、移动偏移量&lt;br /&gt;
注意：执行此命令前需先断开消费者&lt;br /&gt;
 bin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.83:22390 --group report --reset-offsets --all-topics --to-latest --execute&lt;br /&gt;
 修改 topic 所有分区偏移量为指定偏移量：&lt;br /&gt;
bin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.83:22390 --group report --topic reportData --reset-offsets --to-offset 10 --execute&lt;br /&gt;
 修改 topic 指定分区的偏移量：&lt;br /&gt;
bin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.83:22390 --group report --topic reportData:0 --reset-offsets --to-offset 15 --execute&lt;/p&gt;
&lt;p&gt;10、查看 group 描述&lt;/p&gt;
&lt;p&gt;删除 group 记录&lt;br /&gt;
./kafka-consumer-groups.sh --bootstrap-server &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2thZmthLmJyb2tlci5jb206NjAwNjU=&#34;&gt;kafka.broker.com:60065&lt;/span&gt; --delete --group export&lt;/p&gt;
&lt;p&gt;bin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.95:22390,192.168.199.81:22390,192.168.199.120:22390 --group leakinfo --describe&lt;/p&gt;
&lt;p&gt;11、查看 topic 描述&lt;br /&gt;
 bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 --topic lx_test_topic --describe&lt;br /&gt;
bin/kafka-topics.sh --bootstrap-server 192.168.199.95:22390 --describe --topic reportData&lt;br /&gt;
bin/kafka-topics.sh --bootstrap-server 127.0.0.1:22390 --describe --topic reportData&lt;/p&gt;
&lt;p&gt;12、修改日志保留时间&lt;br /&gt;
 2.3 版本：&lt;br /&gt;
bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name smsMessage --alter --add-config retention.ms=864000000    //10 天&lt;br /&gt;
 bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name quickRecognise --alter --add-config retention.ms=259200000   //3 天&lt;br /&gt;
 bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name leakdatas --alter --add-config retention.ms=259200000&lt;br /&gt;
bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name leftDevices --alter --add-config retention.ms=259200000&lt;br /&gt;
bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name reinstall --alter --add-config retention.ms=259200000&lt;br /&gt;
bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name flowpush --alter --add-config retention.ms=604800000&lt;br /&gt;
2.5 版本：&lt;br /&gt;
bin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type topics --entity-name my-topic --alter --add-config retention.ms=864000000&lt;/p&gt;
&lt;p&gt;13、导出 topic 所有信息到文件&lt;br /&gt;
 nohup bin/kafka-console-consumer.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --from-beginning --topic testlog &amp;gt;&amp;gt; test.out &amp;amp;&lt;br /&gt;
nohup bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:22390 --from-beginning --topic leakdatas &amp;gt;&amp;gt; test.out &amp;amp;&lt;/p&gt;
&lt;p&gt;14、查看 topic 配置参数&lt;br /&gt;
 bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name flowpush --describe&lt;/p&gt;
&lt;p&gt;bin/kafka-console-consumer.sh --bootstrap-server 192.168.199.83:22390 --topic leak_plugin12 --from-beginning&lt;/p&gt;
&lt;p&gt;4、发送消息到 topic = leak_plugin12&lt;br /&gt;
bin/kafka-console-producer.sh --broker-list 192.168.199.83:22390 --topic leak_plugin12&lt;/p&gt;
&lt;p&gt;3、查看 topic&lt;br /&gt;
bin/kafka-topics.sh --list --bootstrap-server 192.168.199.95:22390,192.168.199.81:22390,192.168.199.120:22390&lt;/p&gt;
</content>
        <category term="总结" />
        <updated>2022-10-16T07:27:53.000Z</updated>
    </entry>
</feed>
