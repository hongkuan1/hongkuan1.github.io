{
    "version": "https://jsonfeed.org/version/1",
    "title": "流年印记 • All posts by \"笔记\" category",
    "description": "数学 & 软件工程",
    "home_page_url": "https://hongkuan.github.io",
    "items": [
        {
            "id": "https://hongkuan.github.io/2023/09/08/note/softwareEnginee/",
            "url": "https://hongkuan.github.io/2023/09/08/note/softwareEnginee/",
            "title": "2024软件工程",
            "date_published": "2023-09-08T09:55:00.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<h2 id=\"软件和软件危机\"><a class=\"anchor\" href=\"#软件和软件危机\">#</a> 软件和软件危机</h2>\n<div class=\"note default\">\n<p>软件的定义、特点及定义</p>\n</div>\n<ul>\n<li>\n<p>软件的定义</p>\n<ul>\n<li>软件不是程序，而是程序、数据以及开发、使用和维护程序需要的所有文档的完整集合。</li>\n</ul>\n</li>\n<li>\n<p>软件的特点</p>\n<ul>\n<li>软件是一种逻辑产品，而不是具体的物理实体，具有抽象性。</li>\n<li>软件产品的生产主要是开发研制，没有明显的制造过程。</li>\n<li>软件产品在使用过程中，不存在磨损、消耗老化等问题。</li>\n<li>软件产品的开发主要是脑力劳动，还未完全摆脱手工开发方式，大部分产品是 “定做的”，生产效率低。</li>\n<li>软件产品的成本相当昂贵，软件费用不断增加，软件的研制需要投入大量的人力、物力和资金，生产过程中还需对产品进行质量控制，对每件产品进行严格的检验。</li>\n<li>软件对硬件和环境有不同程度的依赖性，为了减少这种依赖性，在软件开发中提出了软件的可移植性问题</li>\n<li>软件是复杂的。</li>\n</ul>\n</li>\n<li>\n<p>软件的分类</p>\n<ul>\n<li>服务类软件\n<ul>\n<li>此类软件是面向用户的，为用户提供各种服务，包括多种软件开发工具和常用的库函数及多种语言的集成化软件</li>\n</ul>\n</li>\n<li>维护类软件\n<ul>\n<li>此类软件是面向计算机维护的，包括错误诊断和检测软件、测试软件、多种调试所用软件。</li>\n</ul>\n</li>\n<li>操作管理软件\n<ul>\n<li>此类软件是面向计算机操作系统和管理的，包括各种操作系统、网络通信系统、计算机管理软件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件危机的定义及表现形式</p>\n</div>\n<ul>\n<li>\n<p>软件危机</p>\n<ul>\n<li>“软件危机” 是指在计算机软件的开发和维护过程中所遇到的一系列严重问题，软件危机主要包含了两个方面的问题：\n<ul>\n<li>如何开发软件以满足软件日益增长的需求</li>\n<li>如何维护数量不断增长的已有软件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>软件危机表现形式</p>\n<ul>\n<li>软件开发成本和研制进度的估计常常很不精确。\n<ul>\n<li>经费预算经常突破，完成时间一拖再拖</li>\n<li>有时为了赶进度和节约成本所采取的一些权宜之计又往往影响了软件产品的质量</li>\n</ul>\n</li>\n<li>“已完成” 的软件不能满足用户要求。\n<ul>\n<li>软件开发人员常常对用户需求只有模糊的了解，甚至对所要解决的问题还没有确切认识的情况下，就匆忙着手编写程序了。</li>\n</ul>\n</li>\n<li>软件产品质量差，可靠性得不到保证。</li>\n<li>软件产品可维护性差，软件开发人员在开发过程中按各自的风格工作，各行其是，没有统一、公认的规范和完整规范的文档</li>\n<li>软件成本在计算机系统总成本中所占的比例逐年上升。</li>\n<li>软件开发生产率提高的速度远远跟不上计算机应用速度普及深入的趋势。</li>\n</ul>\n</li>\n<li>\n<p>软件危机的产生原因及解决途径</p>\n<ul>\n<li>\n<p>产生软件危机的原因</p>\n<ol>\n<li>软件是计算机的逻辑部件</li>\n<li>软件开发的管理困难</li>\n<li>软件开发费用不断增加，维护费用急剧上升</li>\n<li>软件开发技术落后。</li>\n<li>生产方式落后。</li>\n<li>开发工具落后，生产效率提高缓慢</li>\n</ol>\n</li>\n<li>\n<p>解决软件危机途径</p>\n<ol>\n<li>首先应该对计算机软件有一个正确的认识，彻底清除 &quot;软件就是程序&quot; 的错误观念。</li>\n<li>要使用好的开发技术和方法，并且要不断研究探索更好更有效的技术和方法。</li>\n<li>要有良好的组织、严密的管理，各类人员要相互配合，共同完成任务。（软件开发不是某种个体劳动的神秘技巧）</li>\n<li>应该开发和使用好的软件工具。</li>\n</ol>\n<ul>\n<li>软件系统开发与制造一台机器或建造一栋大厦有许多相同之处，所以要采用 “工程化” 的思想做指导来解决软件研究中面临的困难和混乱，从而走出软件危机的困境。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"软件工程\"><a class=\"anchor\" href=\"#软件工程\">#</a> 软件工程</h2>\n<div class=\"note default\">\n<p>软件工程的定义及目标</p>\n</div>\n<div class=\"note default\">\n<p>软件工程的研究内容和基本原理</p>\n</div>\n<div class=\"note default\">\n<p>软件工程的发展史</p>\n</div>\n<h2 id=\"软件过程和软件的生存周期\"><a class=\"anchor\" href=\"#软件过程和软件的生存周期\">#</a> 软件过程和软件的生存周期</h2>\n<div class=\"note default\">\n<p>软件过程</p>\n</div>\n<div class=\"note default\">\n<p>软件生存周期</p>\n</div>\n<h2 id=\"软件开发模型\"><a class=\"anchor\" href=\"#软件开发模型\">#</a> 软件开发模型</h2>\n<div class=\"note default\">\n<p>瀑布模型</p>\n</div>\n<div class=\"note default\">\n<p>快速原型模型</p>\n</div>\n<div class=\"note default\">\n<p>增量模型</p>\n</div>\n<div class=\"note default\">\n<p>螺旋模型</p>\n</div>\n<div class=\"note default\">\n<p>喷泉模型</p>\n</div>\n<div class=\"note default\">\n<p>基于构建的开发模型</p>\n</div>\n<div class=\"note default\">\n<p>统一过程（RUP）模型</p>\n</div>\n<div class=\"note default\">\n<p>基于形式化的开发模型</p>\n</div>\n<h2 id=\"传统的软件工程和面向对象的软件工程\"><a class=\"anchor\" href=\"#传统的软件工程和面向对象的软件工程\">#</a> 传统的软件工程和面向对象的软件工程</h2>\n<div class=\"note default\">\n<p>传统的软件工程方法</p>\n</div>\n<div class=\"note default\">\n<p>面向对象的软件工程方法</p>\n</div>\n<div class=\"note default\">\n<p>传统的软件工程和面向对象的软件工程的分析方法对比</p>\n</div>\n<h2 id=\"本章小结\"><a class=\"anchor\" href=\"#本章小结\">#</a> 本章小结</h2>\n<ul>\n<li>软件工程自 1968 年提出至今，正式发展成为用于指导软件生产工程化，覆盖软件开发方法学、软件工具和环境、软件工程管理学等内容的一门课程。</li>\n<li>本章节主要介绍了软件工程的基本内容，包括软件工程的学科背景、软件生存周期理论、软件开发模型、软件工程方法论等</li>\n</ul>\n<h1 id=\"可行性研究\"><a class=\"anchor\" href=\"#可行性研究\">#</a> 可行性研究</h1>\n<div class=\"note default\">\n<p>可行性研究的目的和任务</p>\n</div>\n<ul>\n<li>\n<p>目的：用最小的代价在尽可能短的时间内确定问题是否能够解决。</p>\n</li>\n<li>\n<p>主要任务：</p>\n<ul>\n<li>进行概要的分析研究</li>\n<li>初步确定项目的规模和目标</li>\n<li>确定项目的约束和限制</li>\n<li>分析几种可能解法的利弊</li>\n</ul>\n</li>\n<li>\n<p>四个方面研究各种解法的可行性</p>\n<ul>\n<li>经济可行性</li>\n<li>技术可行性</li>\n<li>操作可行性</li>\n<li>法律可行性</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>可行性研究的步骤</p>\n</div>\n<ul>\n<li>复查并确定系统规模和目标</li>\n<li>研究目前正在使用的系统</li>\n<li>建立新系统的高层逻辑模型</li>\n<li>导出和评价各种方案</li>\n<li>推荐可行方案</li>\n<li>草拟初步的开发计划</li>\n<li>编写可行性研究报告提交审查</li>\n</ul>\n<div class=\"note default\">\n<p>系统流程图</p>\n</div>\n<ul>\n<li>系统流程图符号\n<ul>\n<li>\n<p>常用 5 种基本符号</p>\n</li>\n<li>\n<p><img data-src=\"/img/software/%E5%B8%B8%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"常用系统流程图\" /></p>\n</li>\n<li>\n<p>11 种系统符号</p>\n</li>\n<li>\n<p><img data-src=\"/img/software/11%E7%A7%8D%E7%B3%BB%E7%BB%9F%E7%AC%A6%E5%8F%B7.png\" alt=\"11种系统符号\" /></p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>成本 - 效益分析</p>\n</div>\n<ul>\n<li>\n<p>货币的时间价值</p>\n<ul>\n<li>成本估算的目的是对项目投资。经过成本估算后，得到项目开发时需要的费用，该费用就是项目的投资</li>\n<li>项目完成后，应取得相应的效益。有多少效益才划算？这就是应该考虑货币的时间价值。因为投资是现在进行的，而效益是将来获得的。</li>\n</ul>\n</li>\n<li>\n<p>投资回收期</p>\n<ul>\n<li>通常用投资回收期衡量一个开发项目的价值。所谓投资回收期就是使累计的经济效益等于最初的投资费用所需要的时间</li>\n<li>总的来说就是，投资回收期越短，就可以越快获得利润，该项目就越值得投资开发。</li>\n</ul>\n</li>\n<li>\n<p>纯收入</p>\n<ul>\n<li>整个生存周期之内系统的累计经济效益与投资之差</li>\n<li>这相当于投资一个软件系统和把钱存入银行中 （或做其他项目）两种方案的优劣比较。</li>\n<li>如一个项目纯收入为零，而开发一个系统还要冒风险，则不值得投资开发</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>可行性研究报告的主要内容</p>\n</div>\n<ul>\n<li>可行性研究结束后要提交的文档是可行性研究报告，尽管可行性研究报告的格式各有不同，但主要内容应该包括以下几项\n<ul>\n<li>引言</li>\n<li>可行性研究前提</li>\n<li>对现有系统的分析</li>\n<li>对所建设系统的分析\n<ul>\n<li>经济可行性</li>\n<li>技术可行性</li>\n<li>社会因素的可行性</li>\n</ul>\n</li>\n<li>其他与设计有关选择方案</li>\n<li>其他与设计有关的专门问题</li>\n<li>结论意见</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"本章小结-2\"><a class=\"anchor\" href=\"#本章小结-2\">#</a> 本章小结</h2>\n<ul>\n<li>\n<p>可行性研究阶段是进一步探讨问题定义阶段所确定的问题是否有可行性的解。尤其对于大型项目的开发，可行性研究是<span class=\"rainbow\">必需的</span>。主要通过<span class=\"rainbow\">经济可行性、技术可行性、法律可行性、操作可行性</span>这四个方面来探讨，是否能够解决以及是否值得去解决。通过可行性研究可以减少技术风险和投资风险。</p>\n</li>\n<li>\n<p>系统流程图用来表达分析员对现有系统的认识和描绘他对未来物理系统的设想</p>\n</li>\n<li>\n<p>成本 - 效益分析是可行性研究的一项主要内容，它主要是从经济角度判断该项目是否继续下去的依据。</p>\n</li>\n</ul>\n<h1 id=\"软件需求分析\"><a class=\"anchor\" href=\"#软件需求分析\">#</a> 软件需求分析</h1>\n<div class=\"note default\">\n<p>需求分析的任务和步骤</p>\n</div>\n<ul>\n<li>\n<p>需求分析的任务</p>\n<ul>\n<li>确定对系统的综合需求\n<ul>\n<li>功能需求</li>\n<li>性能需求</li>\n<li>环境需求</li>\n<li>接口要求</li>\n<li>用户界面需求</li>\n</ul>\n</li>\n<li>分析系统的数据需求</li>\n<li>建立软件的逻辑模型</li>\n<li>编写软件需求规格说明书 (Software Requirement Specification SRS)</li>\n<li>需求分析评审</li>\n</ul>\n</li>\n<li>\n<p>需求分析的步骤 (四个步骤)</p>\n<ul>\n<li>需求获取：调查研究</li>\n<li>需求提炼：分析建模</li>\n<li>需求描述：编写 SRS（需求规格说明书）</li>\n<li>需求验证：需求不清，不一致，二义性等问题</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>需求获取的常用方法</p>\n</div>\n<ol>\n<li>客户访谈</li>\n<li>建立联合分析小组</li>\n<li>问题分析与确认</li>\n</ol>\n<div class=\"note default\">\n<p>快速建立软件原型来获取需求</p>\n</div>\n<ul>\n<li>\n<p>快速原型 特点</p>\n<ul>\n<li>快速</li>\n<li>容易修改</li>\n</ul>\n</li>\n<li>\n<p>判断是否选择原型法来帮助获取需求</p>\n<ul>\n<li>需求已经建立，并且可以预见是相当稳定吗？</li>\n<li>软件开发人员和用户已经理解了目标系统的应用领域吗？</li>\n<li>问题是否可被模型化？</li>\n<li>用户能否清楚地确定基本的系统需求？</li>\n<li>有任何需求是含糊的吗？</li>\n<li>已知的需求中存在矛盾吗？</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>快速建立软件原型来获取需求</p>\n</div>\n<ul>\n<li>\n<p>功能分解方法</p>\n</li>\n<li>\n<p>结构化分析方法</p>\n</li>\n<li>\n<p>信息建模方法</p>\n</li>\n<li>\n<p>面向对象方法</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>结构化分析方法</p>\n</div>\n<ul>\n<li>\n<p>自顶向下逐层分解的分析策略</p>\n</li>\n<li>\n<p>结构化分析描述工具</p>\n</li>\n<li>\n<p>数据流图</p>\n</li>\n<li>\n<p>数据字典</p>\n<ul>\n<li>数据字典的内容及使用符号</li>\n<li>数据字典的实现</li>\n</ul>\n</li>\n<li>\n<p>加工逻辑的描述</p>\n<ul>\n<li>结构化语言</li>\n<li>判定表</li>\n<li>判定树</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>需求分析图形工具</p>\n</div>\n<ul>\n<li>\n<p>层次方框图</p>\n</li>\n<li>\n<p>维纳图</p>\n<ul>\n<li>用 大括号 [{].{.label} 区分信息的层次</li>\n</ul>\n</li>\n<li>\n<p>IPO 图 (Input - Process - Output)</p>\n</li>\n<li>\n<p>SA (Structured Analysis 结构化分析) 方法应用</p>\n<ul>\n<li>项目说明</li>\n<li>数据流图</li>\n<li>数据字典</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>数据库内容的需求分析和描述</p>\n</div>\n<ul>\n<li>\n<p>数据库内容的需求分析</p>\n<ul>\n<li>信息需求</li>\n<li>处理需求</li>\n<li>使用需求\n<ul>\n<li>建立各局部应用的 E-R 模型</li>\n<li>建立全局 E-R 模型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据库内容的需求分析描述</p>\n<ul>\n<li>\n<p>实体联系 （E-R）</p>\n<ul>\n<li>实体型</li>\n<li>属性和联系</li>\n</ul>\n</li>\n<li>\n<p>联系</p>\n<ul>\n<li>一对一联系</li>\n<li>一对多联系</li>\n<li>多对多联系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>需求规格说明书</p>\n</div>\n<ul>\n<li>需求规格说明书主要内容\n<ol>\n<li>引言\n<ul>\n<li>编写目的</li>\n<li>项目背景</li>\n<li>定义</li>\n<li>参考资料</li>\n</ul>\n</li>\n<li>任务概述\n<ul>\n<li>目标</li>\n<li>运行环境</li>\n<li>条件和约束</li>\n</ul>\n</li>\n<li>数据描述\n<ul>\n<li>静态数据</li>\n<li>动态数据：（输入、输出数据）</li>\n<li>数据库描述</li>\n<li>数据字典</li>\n<li>数据采集</li>\n</ul>\n</li>\n<li>功能需求\n<ul>\n<li>功能划分</li>\n<li>功能描述</li>\n</ul>\n</li>\n<li>性能需求\n<ul>\n<li>数据精确度</li>\n<li>时间特性</li>\n<li>适应性</li>\n</ul>\n</li>\n<li>运行需求\n<ul>\n<li>用户界面</li>\n<li>硬件接口</li>\n<li>软件接口</li>\n<li>故障处理</li>\n</ul>\n</li>\n<li>其他需求\n<ul>\n<li>包括可使用性、安全保密性、可维护性、可移植性等</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"本章小结-3\"><a class=\"anchor\" href=\"#本章小结-3\">#</a> 本章小结</h2>\n<ul>\n<li>\n<p>软件分析是软件生存周期一个十分重要的阶段，其根本任务是确定用户对软件系统的需求。他是项目开发的<span class=\"ranibow\">基础</span>，他要确定软件系统做什么，具有什么功能、性能，有什么约束条件等。把这些问题搞清楚之后，要用某种无二义性的描述形成需求规格说明书。</p>\n</li>\n<li>\n<p>需求分析的结构是软件开发的重要基础，必须经过严格评审并得到用户确认。要从一致性、完整性、现实性和有效性四个方面复审软件需求规格说明书</p>\n</li>\n</ul>\n<h1 id=\"软件总体设计\"><a class=\"anchor\" href=\"#软件总体设计\">#</a> 软件总体设计</h1>\n<h2 id=\"软件总体设计的目标和任务\"><a class=\"anchor\" href=\"#软件总体设计的目标和任务\">#</a> 软件总体设计的目标和任务</h2>\n<ul>\n<li>总体设计阶段的基本目标就是回答：“系统应该如何实现？”，所以总体设计又称概要设计。</li>\n<li>总体设计以模块为基础，以需求分析阶段得到的数据流图为依据来设计软件结构。</li>\n</ul>\n<h2 id=\"软件结构设计准则\"><a class=\"anchor\" href=\"#软件结构设计准则\">#</a> 软件结构设计准则</h2>\n<div class=\"note default\">\n<p>软件体系结构设计准则</p>\n</div>\n<ol>\n<li>体系结构是对复杂事务的一种抽象</li>\n<li>体系结构在一定的时间内保持稳定</li>\n<li>良好的体系结构意味着普通、高效和稳定</li>\n</ol>\n<div class=\"note default\">\n<p>软件模块设计准则</p>\n</div>\n<ol>\n<li>降低模块之间的耦合性，提高模块的内聚性</li>\n<li>模块结构的深度、宽度、扇出和扇入适当</li>\n<li>模块的作用范围应该在控制范围内</li>\n<li>模块接口设计要简单，以便降低复杂程度和冗余度</li>\n<li>设计功能可预测并能得到验证的模块</li>\n<li>适当划分模块规模，以保持其独立性</li>\n</ol>\n<h2 id=\"软件设计的概念和原理\"><a class=\"anchor\" href=\"#软件设计的概念和原理\">#</a> 软件设计的概念和原理</h2>\n<div class=\"note default\">\n<p>模块和模块化</p>\n</div>\n<ul>\n<li>\n<p>模块是软件结构的基础，是软件元素，能够单独命名、独立完成一定功能的程序语句的集合。</p>\n</li>\n<li>\n<p>模块化</p>\n<ul>\n<li>模块化是使得软件能够对付复杂问题所具备的属性。</li>\n<li>模块化是指解决一个复杂问题时，自顶向下逐层把软件系统划分成若干模块的过程。</li>\n<li>模块化的目的是为了降低软件复杂性，使软件设计、测试、维护等操作变得简易。</li>\n<li>运用模块化技术还可以防止错误蔓延，从而可以提高系统的可靠性。</li>\n<li>模块与外部联系多，模块的独立性差。模块与外部联系少，模块的独立性强。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>抽象</p>\n</div>\n<ul>\n<li>\n<p>模块最重要的特征：</p>\n<ul>\n<li>抽象</li>\n<li>信息隐蔽</li>\n</ul>\n</li>\n<li>\n<p>抽象：过程抽象、数据抽象、控制抽象</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>信息隐蔽和局部化</p>\n</div>\n<ul>\n<li>\n<p>信息隐蔽意味着有效的模块化可以通过定义一组独立的模块来实现，这些模块彼此之间仅仅交换那些为了完成系统功能所必须交换的信息。</p>\n</li>\n<li>\n<p>局部化概念和信息隐蔽是密切相关的。</p>\n</li>\n<li>\n<p>局部化就是把一些关系密切的软件元素物理地放的彼此靠近。</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>模块独立性及其度量</p>\n</div>\n<ul>\n<li>\n<p>模块独立性的概念是模块化、抽象、信息隐蔽和局部化概念的直接结果。</p>\n</li>\n<li>\n<p>耦合：模块之间相互独立性的度量</p>\n<ul>\n<li>无直接耦合</li>\n<li>数据耦合</li>\n<li>标记耦合</li>\n<li>控制耦合</li>\n<li>公共环境耦合</li>\n<li>内容耦合</li>\n</ul>\n</li>\n<li>\n<p>尽量使用数据耦合，少用标记耦合和控制耦合，限制公共环境耦合的范围，完全不用内容耦合。</p>\n</li>\n<li>\n<p>内聚：模块内部各个成分之间彼此结合的紧密程度的度量</p>\n<ul>\n<li>低内聚\n<ul>\n<li>偶然内聚</li>\n<li>逻辑内聚</li>\n<li>时间内聚</li>\n</ul>\n</li>\n<li>中内聚\n<ul>\n<li>通信内聚</li>\n</ul>\n</li>\n<li>高内聚\n<ul>\n<li>顺序内聚</li>\n<li>功能内聚</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>尽可能做到高内聚，并且能辨认出低内聚的模块。从而通过修改设计提高模块的内聚性，降低模块之间的耦合程度，提高模块的独立性，为设计高质量的软件结构奠定基础。</p>\n</li>\n</ul>\n<h2 id=\"数据库设计\"><a class=\"anchor\" href=\"#数据库设计\">#</a> 数据库设计</h2>\n<div class=\"note default\">\n<p>数据库系统的三级模式概念</p>\n</div>\n<ul>\n<li>\n<p>外模式： 子模式或用户模式</p>\n</li>\n<li>\n<p>模式：逻辑模式</p>\n</li>\n<li>\n<p>内模式：存储模式</p>\n</li>\n<li>\n<p>三级模式之间提供了两层映像</p>\n<ul>\n<li>外模式 / 模式</li>\n<li>模式 / 内模式</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>数据库逻辑设计原则</p>\n</div>\n<ul>\n<li>目前 DBMS 产品一般支持 3 种模型：关系、网状、层次</li>\n</ul>\n<div class=\"note default\">\n<p>关系数据库规范化</p>\n</div>\n<ul>\n<li>\n<p>第一范式</p>\n<ul>\n<li>消除原关系中非主属性对码的<span class=\"label\">部分函数依赖</span></li>\n<li>满足第一范式的关系模式并不一定是一个好的关系模式，由于数据冗余度大，有可能出现插入异常、删除异常和修改异常现象</li>\n</ul>\n</li>\n<li>\n<p>第二范式</p>\n<ul>\n<li>采用投影分解法将一个 1NF 的关系分解为多个 2NF 的关系</li>\n<li>消除原关系中非主属性对码的<span class=\"label\">传递函数依赖</span></li>\n<li>满足第二范式的关系模式并不一定是一个好的关系模式</li>\n<li>并不能完全消除关系模式中的各种异常情况和数据冗余</li>\n</ul>\n</li>\n<li>\n<p>第三范式</p>\n<ul>\n<li>将一个 2NF 关系分解为多个 3NF 的关系后，并不能完全消除关系模式中的各种异常情况和数据冗余，虽然 3NF 范式，基本上消除了大部分异常问题，但解决的并不彻底，仍然存在改进的余地</li>\n<li>消除原关系中非主属性对码的<span class=\"label\">部分函数依赖</span>和<span class=\"label\">传递函数依赖</span></li>\n</ul>\n</li>\n<li>\n<p>BC 范式</p>\n<ul>\n<li>BCNF 是从 1NF 直接定义而成的</li>\n<li>规范化的基本思想是逐步消除数据依赖中不合适的部分，使模式中各关系模式达到某种程度的 【分离】，即采用 一事一地 的模式设计原则。</li>\n<li>在函数依赖范畴，属于 BCNF 的关系模式已经很完美了。</li>\n</ul>\n</li>\n<li>\n<p>第四范式</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>第五范式</p>\n<ul>\n<li>略</li>\n</ul>\n</li>\n<li>\n<p>范式化程度过低的关系可能会存在插入异常、删除异常、修改复杂、数据冗余等问题。需要对其进行范式化，转换为高级范式。</p>\n</li>\n<li>\n<p>但并不意味着范式化程度越高的关系模式越好，在设计数据库模式结构时，如关系模式分解过多，势必在数据查询时要用到较多的连接运算，这样就会影响查询速度。</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件结构设计的图形工具</p>\n</div>\n<ol>\n<li>\n<p>软件结构图</p>\n</li>\n<li>\n<p>层次图</p>\n</li>\n<li>\n<p>HIPO 图</p>\n</li>\n</ol>\n<div class=\"note default\">\n<p>结构化设计方法</p>\n</div>\n<ol>\n<li>\n<p>数据流图机器类型</p>\n</li>\n<li>\n<p>结构化设计方法的步骤</p>\n</li>\n<li>\n<p>变换型数据流图的分析设计</p>\n</li>\n<li>\n<p>事务型数据流图的分析设计</p>\n</li>\n<li>\n<p>综合分析设计</p>\n<ul>\n<li>首先确定数据流图整体上的类型</li>\n<li>然后利用变换型数据流图的分析方法，先找出主加工，把软件系统分为输入、变换、输出三部分，由此设计出软件系统的顶层和第一层</li>\n<li>最后根据数据流图各个部分的结构特点，适当地运用 <span class=\"label\">变换分析</span> 或 <span class=\"label\">事务分析</span>，就可得出初始软件结构图的某个方案。</li>\n</ul>\n</li>\n</ol>\n<div class=\"note default\">\n<p>总体设计说明书</p>\n</div>\n<ol>\n<li>\n<p>引言</p>\n<ul>\n<li>编写目的</li>\n<li>项目背景</li>\n<li>定义</li>\n<li>参考资料</li>\n</ul>\n</li>\n<li>\n<p>任务概述</p>\n<ul>\n<li>目标</li>\n<li>运行环境</li>\n<li>需求概述</li>\n<li>条件与限制</li>\n</ul>\n</li>\n<li>\n<p>总体设计</p>\n<ul>\n<li>处理流程</li>\n<li>总体结构和模块外部设计 （给出软件系统的结构图）</li>\n<li>功能分配：表明各项功能与程序的关系</li>\n</ul>\n</li>\n<li>\n<p>接口设计</p>\n<ul>\n<li>外部接口</li>\n<li>内部接口</li>\n</ul>\n</li>\n<li>\n<p>数据结构设计</p>\n<ul>\n<li>逻辑结构设计</li>\n<li>物理结构设计</li>\n<li>数据结构与程序的关系</li>\n</ul>\n</li>\n<li>\n<p>运行设计</p>\n<ul>\n<li>运行模块的组合</li>\n<li>运行控制</li>\n<li>运行时间</li>\n</ul>\n</li>\n<li>\n<p>出错处理设计</p>\n<ul>\n<li>出错输出信息</li>\n<li>出错处理对策：如设置后备、性能降级、恢复及再启动等</li>\n</ul>\n</li>\n<li>\n<p>安全保密设计</p>\n</li>\n<li>\n<p>维护设计</p>\n<ul>\n<li>说明为方便维护工作的设施，如维护模块</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"本章小结-4\"><a class=\"anchor\" href=\"#本章小结-4\">#</a> 本章小结</h2>\n<ul>\n<li>\n<p>软件总体设计的基本目的是用<span class=\"rainbow\">比较抽象概括</span>的方式确定系统如何完成预定的任务。总体设计阶段主要由两个小阶段组成：</p>\n<ul>\n<li>首先进行<span class=\"blue\">系统设计</span>，从数据流图出发设想完成系统功能的若干种推荐方案，然后比较分析这些方案，最后和用户共同选定一个最佳方案</li>\n<li>然后进行<span class=\"blue\">软件结构设计</span>，结构化设计方法把软件结构主要划分为<span class=\"red\">交换型</span>和<span class=\"red\">事务型</span>两大类，并且提出与之相应的变换型设计和事务型设计两种方法，以及综合型数据流图的设计方法。</li>\n</ul>\n</li>\n<li>\n<p>软件结构的模块化设计遵循<span class=\"rainbow\">抽象、信息隐蔽、分解、逐步求精和模块独立性</span>等一系列指导准则。模块独立性是一个良好设计的关键，评价标准主要是模块的耦合和内聚。</p>\n</li>\n<li>\n<p>数据库设计是指一个给定的应用环境下，确定一个最优数据模型和处理模式，主要包括<span class=\"rainbow\">数据库逻辑结构设计，物理结构设计和数据规范化</span>。</p>\n</li>\n<li>\n<p>总体设计阶段产生的文档是<span class=\"rainbow\">总体设计说明书</span>，它既是详细设计、编码的基础，也是进行测试的依据之一。</p>\n</li>\n</ul>\n<h1 id=\"软件详细设计\"><a class=\"anchor\" href=\"#软件详细设计\">#</a> 软件详细设计</h1>\n<div class=\"note default\">\n<p>详细设计的目的与任务</p>\n</div>\n<ul>\n<li>\n<p>详细设计的根本目的就是<span class=\"rainbow\">确定应该怎样具体实现所要求的系统</span>，应该得出对目标系统的精确描述，具体的就是为软件结构图中每一个模块确定采用的<span class=\"yello\">算法</span>和<span class=\"red\">块内数据结构</span>，用某种选定的详细设计工具更清晰地描述，从而在编码阶段可以把这些描述直接翻译成某种程序设计语言书写的源程序。</p>\n</li>\n<li>\n<p>详细设计阶段的任务是要设计出程序的【蓝图】，以后程序员将根据这个蓝图写出实际的代码。</p>\n<ul>\n<li>因此，详细设计的结构基本上决定了<span class=\"rainbow\">最终程序代码的质量</span>。</li>\n<li>程序的 &quot;读者&quot; 有两个，即 计算机 和 人 ！</li>\n<li>在整个软件生存周期中，软件测试、诊断程序错误、修改和软件维护等都必须先读懂程序。实际上对于长期使用的软件系统，读程序的时间可能比写程序的时间要长得多。因此，衡量程序的质量不仅仅看它的逻辑是否正确，性能是否满足要求，更重要的是看它是否易读，易理解。</li>\n<li>结构程序设计技术是实现上述目的的关键技术</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>结构化程序设计</p>\n</div>\n<ul>\n<li>\n<p>结构化程序设计所使用的结构有<span class=\"red\">顺序、条件和重复</span>三种，&quot;只有三种基本控制结构就能实现任何单入口单出口，且无死循环、死语句的程序&quot;。</p>\n</li>\n<li>\n<p>结构化程序设计采用自顶向下，逐步求精的设计方法和单入口单出口的控制结构。</p>\n<ul>\n<li>逐步求精在总体设计阶段用逐步求精法可以把一个复杂问题解法分解和细化成由许多模块组成的层次结构和软件系统。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>详细设计工具</p>\n</div>\n<ul>\n<li>\n<p>程序流程图</p>\n</li>\n<li>\n<p>盒图 （N-S 图）</p>\n</li>\n<li>\n<p>问题分析图（PAD 图）</p>\n</li>\n<li>\n<p>过程设计语言（PDL）</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>人机界面设计</p>\n</div>\n<ul>\n<li>\n<p>无论一个软件的内部结构设计得多好，如果他的人机界面难以理解，那么软件还是失败的。</p>\n</li>\n<li>\n<p>人机界面设计问题</p>\n<ul>\n<li>进行人机界面设计时，几乎都有遇到 4 个问题：系统响应时间、用户帮助设施、出错信息处理、命令交互。\n<ul>\n<li>系统响应时间</li>\n<li>用户帮助设施</li>\n<li>出错信息处理</li>\n<li>命令交互</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>人机界面设计原则</p>\n<ul>\n<li>屏幕界面设计原则可归为 4 点：界面简洁、控件摆放规范、颜色统一、符合用户习惯。</li>\n<li>让用户驾驭软件，而不是软件驾驭用户</li>\n<li>尽可能减少用户的记忆负担</li>\n<li>保持界面的一致性</li>\n</ul>\n</li>\n<li>\n<p>人机界面设计过程</p>\n</li>\n<li>\n<p>人机界面设计已经经历了两个界限分明的时代。第一代是以文本为基础的简单交互，如常见的命令行、字符菜单等。第二代是使用图形、语音和其他交互媒介，充分地考虑了人对美的需求。更深高层的界面甚至模拟了人的生活空间，例如，虚拟现实环境。</p>\n</li>\n<li>\n<p>人机界面设计基本过程可以分为以下步骤:</p>\n<ul>\n<li>建立任务的目的和意图</li>\n<li>目标和意图明确后，建立界面需求规格模型</li>\n<li>以界面需求模型为依据创建用户界面原型</li>\n<li>用户试用并评估该界面原型</li>\n<li>设计者根据用户的意见修改设计并实现下一原型</li>\n<li>不断进行下去、直到用户感到满意为止</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>详细设计说明书</p>\n</div>\n<ul>\n<li>引言\n<ul>\n<li>编写目的\n<ul>\n<li>阐明编写详细设计说明书的目的，指明读者对象</li>\n</ul>\n</li>\n<li>项目背景\n<ul>\n<li>应包括项目的来源和主管部门等</li>\n</ul>\n</li>\n<li>定义\n<ul>\n<li>列出文档中用到的专门术语定义和缩写词的原意</li>\n</ul>\n</li>\n<li>参考资料\n<ul>\n<li>列出这些资料的作者、标题、编号、发表日期、出版单位或资料来源，包括项目经核准的计划任务书，合同或批文；项目开发计划；需求规格说明书；总体设计说明书；测试计划（初稿）；用户操作手册（初稿）；文档所引用的其他资料、软件开发标准或规范。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>程序描述\n<ul>\n<li>功能</li>\n<li>性能</li>\n<li>输出和输入项目</li>\n<li>算法 (模块所选用的算法)</li>\n<li>程序逻辑\n<ul>\n<li>详细描述各个模块实现的算法，可以采用流程图、NS 图、PDL 语言、PAD 图、判定表和判定树等描述算法的图表。</li>\n</ul>\n</li>\n<li>接口</li>\n<li>存储分配</li>\n<li>限制条件</li>\n<li>测试要点 （给出测试模块的主要测试要求）</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>本章小结</p>\n</div>\n<ul>\n<li>详细设计阶段的任务是确定如何实现所要求的目标系统，将总体设计阶段得到的模块算法用详细设计工具：程序流程图、NS 图、PAD 图和 PDL 语言描述出来，即设计出程序的 &quot;蓝图&quot;，从而在下一编码阶段直接翻译成用某种程序设计语言书写的程序。结构化程序设计技术是软件详细设计的基础，任何一个程序都可以用顺序、选择、循环 3 种结构来设计和实现，结构化程序设计具有可理解性和可维护性。</li>\n<li>人机界面设计质量直接影响用户对软件产品的接受程度，因此，必须对人机界面设计给予足够重视。在人机界面的设计过程中，必须充分重视并认真处理好系统响应时间、用户帮助实施、出错信息处理和命令交互 4 个设计问题。</li>\n</ul>\n<h1 id=\"软件编码\"><a class=\"anchor\" href=\"#软件编码\">#</a> 软件编码</h1>\n<div class=\"note default\">\n<p>程序设计语言的分类</p>\n</div>\n<ul>\n<li>基础语言</li>\n<li>结构化语言</li>\n<li>面向对象语言</li>\n</ul>\n<div class=\"note default\">\n<p>程序设计语言的选择</p>\n</div>\n<ul>\n<li>主要的使用标准有如下几条\n<ul>\n<li>待开发软件的应用领域</li>\n<li>用户的要求</li>\n<li>软件的运行环境</li>\n<li>软件开发人员的知识</li>\n<li>软件的可移植性要求</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>程序设计风格</p>\n</div>\n<ul>\n<li>\n<p>人们在编写程序时，只追求编程的个人技巧，并不重视所编写程序的可读性、可维护性。也就是说人们并不关心源代码的编写风格。只要程序的执行效率、正确就是好程序。但是，随着软件规模的扩大，复杂性的增加，人们逐渐认识到，程序设计风格的混乱在很大程度上制约了软件的发展，并深刻认识到一个逻辑绝对正确但杂乱无章的程序不是好程序，因为这种难以供人阅读的程序，必然难以测试、排错和维护，甚至由于变得无法维护，而<span class=\"rainbow\">提前报废</span>。</p>\n</li>\n<li>\n<p>程序内部文档</p>\n<ul>\n<li>\n<p>标识符的选取</p>\n</li>\n<li>\n<p>程序的注解</p>\n<ul>\n<li>序言性注解\n<ul>\n<li>序言性注解应该安排在每个模块的首部，用来简要描述模块的整体功能、主要算法、接口特点、重要数据含义以及开发简史等。</li>\n</ul>\n</li>\n<li>功能性注解\n<ul>\n<li>功能性注解主要描述的是程序块，而不是解释每行代码</li>\n<li>适当使用空行、空格或括号，使读者容易区分程序和注解</li>\n<li>注解的内容一定要正确、准确，修改程序的同时也应该修改注解。【错误的或不一致的注解不仅对理解程序毫无帮助，而且会引起误导，还不如没有注解！】</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>程序的布局</p>\n<ul>\n<li>程序代码的布局对于程序的可读性也有很大的影响，应该适当利用阶梯形式，使程序的逻辑结构清晰、易读。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据说明</p>\n<ul>\n<li>数据说明的次序应该标准化</li>\n</ul>\n</li>\n<li>\n<p>语句构造</p>\n<ul>\n<li>不要为了节省存储空间把多个语句写在同一行</li>\n<li>尽量避免复杂的条件测试，尤其是减少对 &quot;非&quot; 条件的测试</li>\n<li>避免大量使用循环嵌套语句和条件嵌套语句</li>\n<li>利用圆括号使逻辑表达式或算术表达式的运算次序清晰直观</li>\n<li>变量说明不要遗漏，变量的类型、长度、存储及初始化要正确</li>\n<li>心理换位：“如果我不是编码人，我能看懂它吗？”</li>\n</ul>\n</li>\n<li>\n<p>输入 / 输出</p>\n<ul>\n<li>对所有输入数据都要进行校验</li>\n<li>检查输入项重要组合的合法性</li>\n<li>保持简单的输入格式，为方便用户使用</li>\n<li>输入一批数据时，使用数据或文件结束标志，不要用计数来控制，更不能要求用户自己指定输入项数或记录数。</li>\n<li>人机交互输入时，要详细说明可用的选择范围和边界值</li>\n<li>当程序设计语言对输入 / 输出格式有严格要求时，应保持输入格式与输入语句的要求一致</li>\n<li>输出报表的设计要符合用户要求，输出数据尽量表格化、图形化</li>\n<li>给有的输出数据加标志，</li>\n</ul>\n</li>\n<li>\n<p>效率</p>\n<ul>\n<li>代码效率</li>\n<li>存储效率</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>本章小结</p>\n</div>\n<ul>\n<li>\n<p>编码阶段是将详细设计的每个模块算法转换为用程序设计语言编写的源程序。用程序设计语言编写源程序时，要根据实际项目的特点，既要考虑现实可能性，又要从技术角度、工程角度和心理角度评价和比较各种语言，选择一种合适的程序设计语言。</p>\n</li>\n<li>\n<p>编码风格直接影响软件的质量，影响软件的可读性、可维护性和可移植性。因此，编码风格要简明和清晰，不要追求所谓程序设计技巧，要注重程序结构清晰，层次结构分明，语言简单明了，各种标识符名字的命名要规范，程序和复杂的数据要有注释。</p>\n</li>\n</ul>\n<h1 id=\"软件测试\"><a class=\"anchor\" href=\"#软件测试\">#</a> 软件测试</h1>\n<div class=\"note default\">\n<p>软件测试的目标</p>\n</div>\n<ul>\n<li>软件测试是为了发现错误而执行程序的过程</li>\n<li>一个好的测试用例能够发现【至今尚未发现的错误】的测试</li>\n<li>一个成功的测试是发现了【至今尚未发现的错误】的测试</li>\n</ul>\n<div class=\"note default\">\n<p>软件测试的原则</p>\n</div>\n<ul>\n<li>软件用例既要有输入数据，又要有对应的输出结果。</li>\n<li>测试用例不仅要选合理的输入数据，还应选择不合理的输入数据。</li>\n<li>除了检查程序是否做了它应该做的工作，还应该检查是否做了它不应该做的工作。</li>\n<li>应该远在测试开始之前就制定测试计划。</li>\n<li>测试计划、测试用例、测试报告必须作为文档长期保存。</li>\n<li>Pare to 原理说明，测试发现的错误中 80% 很可能是由程序中 20% 的模块造成的，即错误出现的 &quot;群集性&quot; 现象。</li>\n<li>为了达到最佳的预测效果，程序员应该避免测试自己的程序。测试是一种 &quot;挑剔性&quot; 的行为，测试自己的程序存在心理障碍。另外，对需求规格说明书的理解而引入的错误则更不容易发现。因此，应该由独立的第三方从事测试工作，会更客观，更有效。</li>\n</ul>\n<div class=\"note default\">\n<p>软件测试方法及分类</p>\n</div>\n<ul>\n<li>\n<p>静态测试</p>\n<ul>\n<li>人工测试</li>\n<li>计算机辅助静态分析</li>\n</ul>\n</li>\n<li>\n<p>动态测试</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>黑盒测试与白盒测试</p>\n</div>\n<ul>\n<li>黑盒测试\n<ul>\n<li>功能测试或数据驱动测试</li>\n</ul>\n</li>\n<li>白盒测试\n<ul>\n<li>结构测试或逻辑驱动测试</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件测试用例的设计</p>\n</div>\n<ul>\n<li>\n<p>白盒技术</p>\n<ul>\n<li>逻辑覆盖\n<ul>\n<li>语句覆盖</li>\n<li>判定覆盖</li>\n<li>条件覆盖</li>\n<li>判定条件覆盖</li>\n<li>条件组合覆盖</li>\n<li>路径覆盖</li>\n</ul>\n</li>\n<li>循环覆盖\n<ul>\n<li>单循环</li>\n<li>嵌套循环</li>\n</ul>\n</li>\n<li>基本路径测试</li>\n</ul>\n</li>\n<li>\n<p>黑盒技术</p>\n<ul>\n<li>等价类划分法\n<ul>\n<li>有效等价类</li>\n<li>无效等价类</li>\n</ul>\n</li>\n<li>边界值分析法</li>\n<li>错误推测法</li>\n<li>因果图法</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件测试过程</p>\n</div>\n<ul>\n<li>\n<p>软件产品在交付使用之前一般要经历单元测试、集成测试、确认测试和系统测试 4 个阶段的测试。</p>\n</li>\n<li>\n<p>软件过程中需要 3 类信息</p>\n<ul>\n<li>软件配置</li>\n<li>测试配置</li>\n<li>测试工具</li>\n</ul>\n</li>\n<li>\n<p>单元测试</p>\n<ul>\n<li>模块接口测试</li>\n<li>模块局部数据结构测试</li>\n<li>模块出错处理通路测试</li>\n<li>模块中重要的执行路径测试</li>\n<li>模块边界条件测试</li>\n</ul>\n</li>\n<li>\n<p>集成测试</p>\n<ul>\n<li>自顶向下集成方法</li>\n<li>自底向上集成方法</li>\n</ul>\n</li>\n<li>\n<p>确认测试</p>\n<ul>\n<li>有效性测试</li>\n<li>软件配置报告</li>\n</ul>\n</li>\n<li>\n<p>系统测试</p>\n<ul>\n<li>着重对系统的性能、特性进行测试。</li>\n</ul>\n</li>\n<li>\n<p>α 测试和 β 测试</p>\n<ul>\n<li>\n<p>α 测试</p>\n<ul>\n<li>指在软件公司进行的由内部人员指导的新产品的测试，经过测试的软件称为 Alpha 版本。</li>\n</ul>\n</li>\n<li>\n<p>β 测试</p>\n<ul>\n<li>指公司外部的典型用户在开发者不能控制的环境中 &quot;真实&quot; 应用，并要求用户报告异常情况、提出批评建议，然后对 β 版本进行修正和完善，最终得到正式发布的版本。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>调试</p>\n</div>\n<ul>\n<li>调试的目的和任务\n<ul>\n<li>目的：为了解决软件中存在的错误，即<span class=\"rainbow\">错误定位</span>，分析并找出原因改正错误。</li>\n<li>任务：</li>\n</ul>\n</li>\n<li>常用调试技术\n<ul>\n<li>简单的调试技术</li>\n<li>消去原因法\n<ul>\n<li>归纳法</li>\n<li>演绎法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件测试阶段终止的条件</p>\n</div>\n<ul>\n<li>根据程序的可靠性制定测试的终止条件</li>\n<li>测试的覆盖率要达到一定的目标</li>\n<li>规定至少要查出错误数量</li>\n</ul>\n<h1 id=\"软件维护\"><a class=\"anchor\" href=\"#软件维护\">#</a> 软件维护</h1>\n<div class=\"note default\">\n<p>软件维护概述</p>\n</div>\n<ul>\n<li>软件维护定义\n<ul>\n<li>传统上，软件系统交付之后对其实施更改的学科叫做软件维护。</li>\n<li>通俗地说，软件维护是指软件系统交付使用以后，为了改正软件运行错误，或者因满足新的需求而加入新功能的修改软件的过程。</li>\n</ul>\n</li>\n<li>软件维护的分类\n<ul>\n<li>改正性维护 （Corrective Maintenance）</li>\n<li>适应性维护 （Adaptive Maintenance）</li>\n<li>完善性维护 （Perfective Maintenance）</li>\n<li>预防性维护 （Preventive Maintenance）</li>\n</ul>\n</li>\n<li>软件维护的特点\n<ul>\n<li>软件维护是软件生存周期中延续时间最长、工作量最大的一个阶段</li>\n<li>软件维护不仅工作量大、任务重，而且维护不当的话，还会产生一些意想不到的副作用，甚至引起新的错误。</li>\n<li>软件维护活动实际上是一个修改和简化了的软件开发活动。</li>\n<li>尽管软件维护需要工作量大，但是长期以来，软件维护工作却一直未受到软件设计者们的足够重视。有关软件维护方面的文献资料很少，相应的技术手段和方法也很缺乏。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件维护的过程</p>\n</div>\n<ul>\n<li>\n<p>结构化维护与非结构化维护</p>\n</li>\n<li>\n<p>维护组织</p>\n</li>\n<li>\n<p>维护工作的流程</p>\n<ul>\n<li>建立维护机构</li>\n<li>编写软件维护申请报告</li>\n<li>确定软件维护工作的流程</li>\n<li>整理软件维护文档</li>\n<li>评价软件维护性能</li>\n</ul>\n</li>\n<li>\n<p>维护工作的组织管理</p>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件可维护性</p>\n</div>\n<ul>\n<li>软件可维护性的定义\n<ul>\n<li>七大特性衡量程序的可维护性\n<ul>\n<li>可理解性</li>\n<li>可测试性</li>\n<li>可修改性</li>\n<li>可靠性</li>\n<li>可移植性</li>\n<li>可使用性</li>\n<li>效率</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>软件可维护性的度量</li>\n<li>提高软件可维护性的方法\n<ul>\n<li>建立明确的软件质量目标和优先级</li>\n<li>使用提高软件质量的技术和工具\n<ul>\n<li>模块化方法</li>\n<li>结构化方法</li>\n<li>面向对象方法</li>\n</ul>\n</li>\n<li>选择便于维护的程序设计语言</li>\n<li>采取明确的、有效的质量保证审查措施\n<ol>\n<li>在检查点进行复查</li>\n<li>验收检查</li>\n<li>周期性的维护审查</li>\n<li>对软件包进行检查</li>\n</ol>\n</li>\n<li>完善程序的文档</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件维护中存在的问题</p>\n</div>\n<ul>\n<li>软件维护困难的表现\n<ul>\n<li>读懂别人的程序是很困难的，而文档的不足更增加了这种难度。</li>\n<li>文档的不一致性是软件维护困难的又一要素。</li>\n<li>软件开发和软件维护在人员和时间上存在差异。</li>\n<li>软件维护不是一件吸引人的工作。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>软件维护的副作用</p>\n</div>\n<ul>\n<li>修改代码的副作用</li>\n<li>修改数据的副作用</li>\n<li>修改文档的副作用</li>\n</ul>\n<div class=\"note default\">\n<p>软件维护的代价</p>\n</div>\n<ul>\n<li>系统的大小：系统规模越大，其功能就越复杂，软件维护的工作量也随之增大。</li>\n<li>程序设计语言：使用强功能的程序设计语言就可以控制程序的规模。</li>\n<li>系统年龄：</li>\n<li>数据库技术的应用：</li>\n<li>先进的软件开发技术：</li>\n<li>其他的一些因素：如应用的类型、数学模型、任务的难度、开关与标记、if 嵌套深度、索引或下标数等，对维护工作量也有影响。</li>\n<li>无形的成本\n<ul>\n<li>一些看起来是合理的修复或修改请求不能及时安排，使得客户不满意</li>\n<li>变更的结果把一些潜在的错误引入正在维护的软件，使得软件开发工作受到干扰。</li>\n<li>当必须把软件人员抽调到维护工作中去时，就使得软件开发工作受到干扰。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>再工程和逆向工程</p>\n</div>\n<ul>\n<li>\n<p>软件再工程旨在对现存的大量软件系统进行挖掘、整理，以得到有用的软件构件，或对已有软件构件进行维护，以延长其生存期。</p>\n</li>\n<li>\n<p>再工程和逆向工程的概念</p>\n<ul>\n<li>\n<p>软件再工程的定义</p>\n<ol>\n<li>增进对软件的理解</li>\n<li>准备或直接提高软件的可维护性、复用性或演化性</li>\n</ol>\n</li>\n<li>\n<p>逆向工程</p>\n</li>\n</ul>\n</li>\n<li>\n<p>为什么要实施软件再工程</p>\n<ul>\n<li>\n<p>再工程可帮助软件机构降低软件演化的风险</p>\n</li>\n<li>\n<p>再工程可帮助软件机构补偿软件的投资</p>\n</li>\n<li>\n<p>再工程可使得软件易于进一步变更</p>\n</li>\n<li>\n<p>再工程有着广阔的市场</p>\n</li>\n</ul>\n</li>\n<li>\n<p>软件再工程技术</p>\n<ul>\n<li>改进软件\n<ul>\n<li>软件重构：</li>\n<li>文档重写、加注释及文档更新：</li>\n<li>复用工程：</li>\n<li>重新划分模块：</li>\n<li>数据再工程：</li>\n<li>业务过程再工程：</li>\n<li>可维护性分析、业务量分析和经济分析：</li>\n</ul>\n</li>\n<li>理解软件\n<ul>\n<li>浏览：</li>\n<li>分析与度量：</li>\n<li>逆向工程与设计恢复：</li>\n</ul>\n</li>\n<li>获取、保护及扩充软件的已有知识\n<ul>\n<li>程序分解</li>\n<li>对象恢复</li>\n<li>程序理解</li>\n<li>知识库和程序变换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note default\">\n<p>再工程和逆向工程</p>\n</div>\n<ul>\n<li>软件系统开发完成，经测试达到可靠性指标后，就交给用户，进入软件生存周期的最后一个阶段，即运行维护阶段。软件维护阶段是软件生存周期中时间最长的一个阶段，也是所花费精力和费用最多的一个阶段。软件维护有 4 种类型，即<span class=\"rainbow\">改正性、适应性、完善性和预防性</span>维护。软件维护过程需要建立相应的维护组织，按照一定的维护流程进行结构化维护工作。</li>\n<li>软件可维护性是衡量软件质量的重要指标，主要通过<span class=\"rainbow\">可理解性、可测试性、可修改性、可靠性、可移植性、可使用性、效率</span> 7 个特性来度量，提高软件可维护性需要从 5 个方面入手完善维护工作。软件维护工作本身的副作用，因此，维护人员更应遵守软件维护流程。</li>\n<li>软件维护阶段还有一个重要工作是进行软件再工程，实施软件再工程首先需要理解系统，此外还会涉及软件再工程的一些相关技术。</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/09/08/note/softwareEnginee2/",
            "url": "https://hongkuan.github.io/2023/09/08/note/softwareEnginee2/",
            "title": "2024面向对象的软件工程",
            "date_published": "2023-09-08T09:54:00.000Z",
            "content_html": "<h1 id=\"面向对象方法学\"><a class=\"anchor\" href=\"#面向对象方法学\">#</a> 面向对象方法学</h1>\n<h2 id=\"面向对象方法概述\"><a class=\"anchor\" href=\"#面向对象方法概述\">#</a> 面向对象方法概述</h2>\n<ul>\n<li>面向对象（Object Oriented，OO）方法学的出发点和基本原则是尽可能模拟人类习惯的思维方式，使开发软件的方法与过程尽可能接近人类解决问题的方法与过程。</li>\n<li>OO = Objects + Classes + Inheritance + Communication with messages</li>\n</ul>\n<div class=\"note primary\">\n<p>面向对象方法学的发展</p>\n</div>\n<ul>\n<li>初期阶段（20 世纪 60 年代开始）</li>\n<li>发展阶段（20 世纪 80 年代中期到 90 年代）</li>\n<li>成熟阶段（20 世纪 90 年代以后）</li>\n</ul>\n<div class=\"note primary\">\n<p>面向对象方法学的优点与不足</p>\n</div>\n<ul>\n<li>\n<p>面向对象方法学的主要优点</p>\n<ul>\n<li>与人类习惯的思维方式一致</li>\n<li>软件稳定性好</li>\n<li>可重用性好</li>\n<li>较易开发大型软件产品</li>\n<li>可维护性好，易于测试</li>\n</ul>\n</li>\n<li>\n<p>面向对象方法学的不足之处</p>\n<ul>\n<li>相对面向过程而言比较麻烦，需要写更多的代码</li>\n<li>占用空间比较多，程序效率比较低，如多态等特性会降低性能</li>\n<li>创建对象实例的过程往往是非常耗时的工作，因为一些认为【万事皆对象】的语言，对于一些简单类型的操作性能比较低</li>\n<li>对系统动态特征表述不充分（主要是整体动态特征），且反映系统整体功能特征的能力比较差。</li>\n<li>面向对象方法学 4 大特性（抽象、封装、继承和多态）在一定程度上避免了不合理的操作，并能有效地阻止错误的扩散，减轻了维护工作量，但是也加大了测试的难度，给软件测试带来不便。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"面向对象的软件工程\"><a class=\"anchor\" href=\"#面向对象的软件工程\">#</a> 面向对象的软件工程</h2>\n<ul>\n<li>\n<p>OOA (Objected Oriented Analysis) 面向对象的分析</p>\n</li>\n<li>\n<p>OOD (Objected Oriented Design) 面向对象的设计</p>\n</li>\n<li>\n<p>OOP (Objected Oriented Programming) 面向对象的编程</p>\n</li>\n<li>\n<p>OOT (Objected Oriented Test) 面向对象的测试</p>\n</li>\n<li>\n<p>OOSM (Objected Oriented Software Maintenance) 面向对象的软件维护</p>\n</li>\n<li>\n<p>OOA -&gt; OOD -&gt; OOP -&gt; OOT -&gt; OOSM</p>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>面向对象的基本概念</p>\n</div>\n<ul>\n<li>对象\n<ul>\n<li>是一组静态特征和动态特征的封装体</li>\n</ul>\n</li>\n<li>类\n<ul>\n<li>具有抽象，无值的特征</li>\n</ul>\n</li>\n<li>消息</li>\n<li>封装</li>\n</ul>\n<div class=\"note primary\">\n<p>对象、类及类之间关系的分析</p>\n</div>\n<ul>\n<li>类与对象的关系\n<ul>\n<li>模板与实例的关系</li>\n</ul>\n</li>\n<li>类与类之间的关系\n<ul>\n<li>继承 (Inheritance)</li>\n<li>多态性 (polymorphism)</li>\n<li>关联 (Association)</li>\n<li>依赖 (dependency)</li>\n<li>实现 (Realization)</li>\n<li>聚集 (Aggregation) 与 组合 (Composition)\n<ul>\n<li>\n<p>关联与聚合的区别如下</p>\n<ul>\n<li>关联和聚合在代码层面是一致的，只能从语义级别来区分。</li>\n<li>关联的两个对象之间一般是平等的</li>\n<li>聚集则一般是不平等的</li>\n</ul>\n</li>\n<li>\n<p>强弱关系：组合 &gt; 聚集 &gt; 关联 &gt; 依赖</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>典型的面向对象开发方法</p>\n</div>\n<ul>\n<li>Booch 方法</li>\n<li>Coad/Yourdon 方法 (简称 Coad 方法或 OOAD 方法)\n<ul>\n<li>OOA 面向对象的分析</li>\n<li>OOD 面向对象的分析</li>\n</ul>\n</li>\n<li>OMT/Rumbaugh 方法\n<ul>\n<li>OMT (Object Modeling Technique) 对象模型化技术</li>\n</ul>\n</li>\n<li>OOSE 方法 / Jacobson 方法\n<ul>\n<li>OOSE (Object Oriented Software Engineering) 面向对象软件工程</li>\n<li>需求模型</li>\n<li>分析模型</li>\n<li>设计模型</li>\n<li>实现模型</li>\n<li>测试模型</li>\n</ul>\n</li>\n<li>Wirfs - Brock 方法\n<ul>\n<li>Wirfs - Brock 方法主要包括以下步骤\n<ol>\n<li>评估客户规约</li>\n<li>使用语法分析从规约中抽取候选类</li>\n<li>组合类以试图标识超类</li>\n<li>为每个类定义责任</li>\n<li>为每个类赋予责任</li>\n<li>标识类之间的关系</li>\n<li>定义类之间基于责任的协作</li>\n<li>构造类的层次表示以显示继承关系</li>\n<li>构造系统的协作图</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>上述 5 种方法的比较\n<ul>\n<li>Booch 方法并不是一个开发过程，只是在开发面向对象系统时应遵循的一些技术和原则。</li>\n<li>OMT 方法覆盖了应用开发的全过程，是一种比较成熟的方法，用几种不同的观念来适应不同的建模场合，他在许多重要观念上受到关系数据库设计的影响，适用于数据数据密集型的信息系统的开发，是一种比较完善和有效的分析与设计方法。</li>\n<li>在 OOAD 方法中，OOA 把系统横向划分为 5 个层次，OOD 把系统纵向划分为 4 个部分，从而形成了一个清晰的系统模型。OOAD 适用于小型系统的开发。</li>\n<li>OOSE 能够较好地描述系统的需求，是一种实用的面向对象的系统开发方法，适用于商务处理方面的应用开发。</li>\n<li>Wirfs-Brock 方法不明确区分分析和设计任务，从评估客户规格说明到设计完成，是一个连续的过程。</li>\n</ul>\n</li>\n<li>统一建模语言 UML (Unified Modeling Language)\n<ul>\n<li>该方法力图实现 OMT 方法和 Booch 方法的统一。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"统一建模语言-uml\"><a class=\"anchor\" href=\"#统一建模语言-uml\">#</a> 统一建模语言 UML</h2>\n<div class=\"note primary\">\n<p>概述</p>\n</div>\n<ul>\n<li>UML 是一种编制软件蓝图的标准化语言，需要强调的是，UML 是一种建模语言而不是方法，UML 本身是独立于过程的。</li>\n<li>UML 建立在当今国际上最具有代表性的 3 种面向对象方法（Booch 方法，OMT 方法，OOSE 方法）的基础之上，由 OMG (Object Management Group) 国际对象管理组织 于 1997 年 11 月批准为标准建模语言，支持面向对象的技术和方法，能够准确方便地表达面向对象的概念，体现面向对象的分析和设计风格。</li>\n<li>UML 的建模过程包括分析和设计两个建模阶段\n<ul>\n<li>分析阶段主要通过 [用例图、类图、活动图、类分析图、顺序图].{rainbow} 等表示分析结果；</li>\n<li>设计阶段主要通过<span class=\"rainbow\">类设计图、通信图、状态图、构件图、部署图</span>等表示设计结果；</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>UML 的发展</p>\n</div>\n<ul>\n<li>统一建模语言 UML 起源于两位杰出的面向对象方法大师 Booch 和 Rumbaugh 及 著名的软件工具制造企业 Rational Software。他们于 1994 年 10 月加盟了该公司，于 1995 年 10 月将两种方法合并，推出统一方法（Unified Method）。同年......</li>\n</ul>\n<div class=\"note primary\">\n<p>UML 的定义及主要内容</p>\n</div>\n<ul>\n<li>UML 的语义\n<ul>\n<li>UML 的语义在一个四层抽象级别的建模框架中定义。</li>\n<li>元元模型 (Meta-Meta Model) 层</li>\n<li>元模型 (Meta Model) 层</li>\n<li>模型层 (Model) 层</li>\n<li>用户模型 (User Model) 层</li>\n</ul>\n</li>\n<li>UML 的表示方法\n<ul>\n<li>视图 (View)</li>\n<li>图 (Diagram)</li>\n<li>模型元素 (Model Element)</li>\n<li>公共机制 (Common Mechanism)</li>\n</ul>\n</li>\n<li>UML 的构成 (3 类主要元素)\n<ul>\n<li><span class=\"label primary\">基本构造块</span> (Basic Building Block)\n<ul>\n<li>\n<p><span class=\"label info\">事物</span> (Thing)</p>\n<ul>\n<li>\n<p><span class=\"label\">结构事物</span> (Structural Thing)</p>\n<ul>\n<li>类 (Class)</li>\n<li>接口 (Interface)</li>\n<li>协作 (Collaboration)</li>\n<li>用例 (Use Case)</li>\n<li>主动类 (Active Class)</li>\n<li>构件 (Component)</li>\n<li>结点 (Node)</li>\n</ul>\n</li>\n<li>\n<p><span class=\"label\">行为事物</span> (Behavioral Thing)</p>\n<ul>\n<li>交互 (Interaction)</li>\n<li>状态机 (State Machine)</li>\n</ul>\n</li>\n<li>\n<p><span class=\"label\">分组事物</span> (Grouping Thing)</p>\n<ul>\n<li>包 (package)</li>\n</ul>\n</li>\n<li>\n<p><span class=\"label\">注释事物</span> (Annotation Thing)</p>\n<ul>\n<li>注解 (Note)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><span class=\"label info\">关系</span> (Relationship)</p>\n</li>\n<li>\n<p><span class=\"label info\">图</span> (Diagram)</p>\n</li>\n</ul>\n</li>\n<li><span class=\"label primary\">规则</span> (Rule)\n<ul>\n<li>命名 (Name)</li>\n<li>范围 (Scope)</li>\n<li>可见性 (Visibility)</li>\n<li>完整性 (Integrity)</li>\n<li>执行 (Execution)</li>\n</ul>\n</li>\n<li><span class=\"label primary\">公共机制</span> (Common Mechanism)\n<ul>\n<li>规范说明 (Specification)</li>\n<li>修饰 (Adornment)</li>\n<li>通用划分 (Common Division)</li>\n<li>扩展机制 (Extensibility Mechanism)\n<ul>\n<li>版型 (Stereotype)</li>\n<li>标记值 (Tagged Value)</li>\n<li>约束 (Constraint)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UML 的构成图</li>\n<li><img data-src=\"/img/software/UML%E7%9A%84%E6%9E%84%E6%88%90%E5%9B%BE.png\" alt=\"UML的构成图\" /></li>\n</ul>\n<div class=\"note primary\">\n<p>UML 的特点和用途</p>\n</div>\n<ul>\n<li>特点\n<ul>\n<li>统一的标准</li>\n<li>面向对象</li>\n<li>可视化，表示能力强大</li>\n<li>独立于过程</li>\n<li>易于掌握应用</li>\n</ul>\n</li>\n<li>UML 是一个通用的标准语言，在系统开发的各个阶段的都可使用 UML, 其应用覆盖了从需求分析到软件测试的各阶段。\n<ul>\n<li>需求分析阶段</li>\n<li>系统分析阶段</li>\n<li>系统设计阶段</li>\n<li>编码阶段</li>\n<li>测试阶段</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>UML 的模型视图简介</p>\n</div>\n<ul>\n<li>静态图\n<ul>\n<li>类图</li>\n<li>对象图</li>\n<li>用例图</li>\n<li>构件图</li>\n<li>部署图</li>\n<li>包图</li>\n</ul>\n</li>\n<li>动态图\n<ul>\n<li>状态图</li>\n<li>顺序图</li>\n<li>通信图</li>\n<li>活动图</li>\n<li>计时图</li>\n<li>交互概览图</li>\n</ul>\n</li>\n<li>视图\n<ul>\n<li>用例视图 (Use Case View)</li>\n<li>逻辑视图 (Logical View)</li>\n<li>进程视图 (Process View)</li>\n<li>实现视图 (Realization View)</li>\n<li>部署视图 (Deployment View)</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>UML 常用工具</p>\n</div>\n<ul>\n<li>Rational Rose</li>\n<li>Star UML</li>\n<li>Visio Professional</li>\n</ul>\n<div class=\"note primary\">\n<p>Rational Rose</p>\n</div>\n<ul>\n<li>对面向对象模型的支持</li>\n<li>对螺旋上升式开发过程的支持</li>\n<li>对双向工程的支持</li>\n<li>对团队开发的支持\n<ul>\n<li>\n<p>个人工作间 (Workspace)</p>\n</li>\n<li>\n<p>配置管理 CM (Configuration Management)</p>\n</li>\n<li>\n<p>虚拟路径地图 (Virtual Path Maps)</p>\n</li>\n<li>\n<p>提供与 ClearCase (Rational 公司的软件版本控制产品)</p>\n</li>\n<li>\n<p>在对项目团队开发的管理方面，Rational Rose 支持的每次迭代包括 6 个阶段。</p>\n<ul>\n<li>计划</li>\n<li>蔓延</li>\n<li>延伸</li>\n<li>整合</li>\n<li>评估</li>\n<li>发布</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对工具的支持</li>\n</ul>\n<h2 id=\"统一软件开发过程-rup-概述\"><a class=\"anchor\" href=\"#统一软件开发过程-rup-概述\">#</a> 统一软件开发过程 RUP 概述</h2>\n<ul>\n<li>RUP (Rational Unified Process) 是一个面向对象软件工程的通用业务流程。</li>\n</ul>\n<div class=\"note primary\">\n<p>RUP 的历史</p>\n</div>\n<div class=\"note primary\">\n<p>RUP 的特色</p>\n</div>\n<ul>\n<li>\n<p>迭代和增量方法</p>\n</li>\n<li>\n<p>以软件体系结构为中心</p>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>RUP 软件开发的生存周期</p>\n</div>\n<ul>\n<li>动态结构\n<ul>\n<li>初始阶段</li>\n<li>细化阶段</li>\n<li>构造阶段</li>\n<li>交付阶段</li>\n</ul>\n</li>\n<li>静态结构\n<ul>\n<li>业务建模 (Business Modeling)</li>\n<li>需求 (Requirements)</li>\n<li>分析和设计 (Analysis &amp; Design)</li>\n<li>实现 (Realization)</li>\n<li>测试 (Test)</li>\n<li>部署 (Deployment)</li>\n<li>项目管理 (Project Management)</li>\n<li>配置与变更管理 (Configuration &amp; Change Management)</li>\n<li>环境 (Environment)</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>RUP 过程的建模</p>\n</div>\n<ul>\n<li>初始阶段</li>\n<li>细化阶段</li>\n<li>构造阶段</li>\n<li>交付阶段</li>\n</ul>\n<h2 id=\"本章小结\"><a class=\"anchor\" href=\"#本章小结\">#</a> 本章小结</h2>\n<ul>\n<li>\n<p>面向对象方法学尽可能模拟人类认识客观世界的思维方式来进行软件开发、使开发软件的方法与过程尽可能接近人类解决问题的方法与过程，能够开发出稳定性好、可重用性好、可维护性好的软件，并且较易开发大型软件产品，这些都是面向对象方法学的突出优点</p>\n</li>\n<li>\n<p>面向对象软件工程是面向对象方法学在软件工程领域的全面应用，可应用在生存周期的各个阶段。本章还介绍 5 种典型的面向对象方法及其特点。</p>\n</li>\n<li>\n<p>统一建模语言 UML 是在面向对象方法学大战后的集成和统一，被国际对象管理组织 OMG 接纳为标准建模方法和语言。最新的 UML2.0 版共包含 3 类主要元素、4 类事物和 13 种图形，并提供 5 种视图用于系统的建模指导，本章还介绍了支持 UML 的相关工具。</p>\n</li>\n<li>\n<p>统一软件开发过程 RUP (Rational Unified Process) 是一个面向对象软件工程的通用业务流程，强调整个开发过程中的多次迭代，为在开发组织中分配任务和职责提供了一种规范的方法。RUP 软件开发生存周期是一个二维的软件开发模型，横轴代表时间，显示过程的生存周期，体现了过程的动态结构；纵轴给出 RUP 软件开发过程中的核心工作流，表示 RUP 软件开发过程的静态结构。</p>\n</li>\n</ul>\n<h1 id=\"面向对象的分析\"><a class=\"anchor\" href=\"#面向对象的分析\">#</a> 面向对象的分析</h1>\n<h2 id=\"面向对象的分析过程\"><a class=\"anchor\" href=\"#面向对象的分析过程\">#</a> 面向对象的分析过程</h2>\n<ul>\n<li>\n<p>面向对象分析就是抽取和整理用户需求并建立问题领域精确模型的过程。OOA 强调运用面向对象方法，对问题域和系统职责进行分析和理解，找出描述问题域及系统职责所需要的对象，定义对象的属性、服务及他们之间的关系，以便建立一个符合问题领域、满足用户需求的 OOA 模型。</p>\n</li>\n<li>\n<p>面向对象分析过程，首要的是先建模，通常需要建立 4 种形式的模型：</p>\n<ul>\n<li>用类和对象表示的对象 (静态) 模型</li>\n<li>用用例和场景表示的用例 (功能) 模型</li>\n<li>由状态机和交互图表示的动态行为模型</li>\n<li>由构件图和部署图表示的物理实现模型</li>\n</ul>\n</li>\n<li>\n<p>4 种模型之间的关系</p>\n<ul>\n<li>针对每个类建立的动态模型，描述类实例的生存周期或运行周期</li>\n<li>状态转换驱使行为发生，这些行为在数据流图中被映射成处理，在用例图中被映射成用例，他们同时与类图中的服务相对应。</li>\n<li>用例 (功能) 模型中的用例 (或处理) 对应于对象模型中的类所提供的服务。</li>\n<li>数据流图中数据存储及数据的源点 / 终点通常是对象模型中的对象</li>\n<li>数据流图中数据流往往是对象模型中对象的属性值，也可能是整个对象</li>\n<li>用例图中的参与者可能是对象模型中的对象</li>\n<li>用例 (功能) 模型中的用例 (或处理) 可能产生动态模型中的事件</li>\n<li>对象模型描述数据流图中的数据流、数据存储及数据源点 / 终点的结构</li>\n<li>物理实现模型中的构件通常对应对象模型中的类</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"建立用例模型\"><a class=\"anchor\" href=\"#建立用例模型\">#</a> 建立用例模型</h2>\n<div class=\"note primary\">\n<p>需求分析与用例建模</p>\n</div>\n<div class=\"note primary\">\n<p>确定系统范围和系统边界</p>\n</div>\n<div class=\"note primary\">\n<p>确定参与者</p>\n</div>\n<ul>\n<li>通常通过回答以下问题找到参与者\n<ul>\n<li>谁使用系统的主要功能？</li>\n<li>谁需要系统的支持已完成其日常工作任务？</li>\n<li>谁负责维护、管理并保证系统的正常运行？</li>\n<li>系统需要和那些外部系统交互？</li>\n<li>系统需要处理那些设备？</li>\n<li>对系统产生的结果感兴趣的人或事物是那些？</li>\n</ul>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>确定用例</p>\n</div>\n<div class=\"note primary\">\n<p>确定用例之间的关系</p>\n</div>\n<ul>\n<li>包含关系</li>\n<li>扩展关系</li>\n<li>泛化关系</li>\n<li>使用关系</li>\n</ul>\n<h2 id=\"建立对象模型\"><a class=\"anchor\" href=\"#建立对象模型\">#</a> 建立对象模型</h2>\n<ul>\n<li>5 个层次对应着建立对象模型的 5 项活动：\n<ul>\n<li>找出类和对象</li>\n<li>识别结构</li>\n<li>识别主题</li>\n<li>定义属性</li>\n<li>定义服务</li>\n</ul>\n</li>\n</ul>\n<dl>\n<dt>面向对象分析大体上按照下列顺序进行:</dt>\n<dd>寻找类和对象 -&gt; 识别结构 -&gt; 识别主题 -&gt; 定义属性 -&gt; 建立动态模型 -&gt; 建立功能模型 -&gt; 定义服务</dd>\n</dl>\n<div class=\"note primary\">\n<p>确定类和对象</p>\n</div>\n<dl>\n<dt>筛选过程主要依据下列标准来删除不正确或不必要的类和对象</dt>\n<dd>冗余</dd>\n<dd>无关</dd>\n<dd>笼统</dd>\n<dd>属性</dd>\n<dd>操作</dd>\n<dd>实现</dd>\n</dl>\n<div class=\"note primary\">\n<p>确定关联</p>\n</div>\n<dl>\n<dt>标识关联的启发式规则有</dt>\n<dd>从需求描述中查找动词或动词短语，识别动作的主体和客体，从角色寻找关联；</dd>\n<dd>准确地命名关联和角色；</dd>\n<dd>尽量使用常用的修饰词标识名字空间和关键属性；</dd>\n<dd>应删除派生关联，即可由其他关联导出的关联；</dd>\n<dd>在一组关联被确定下来之前，先不必考虑实例之间的多重性</dd>\n<dd>为适用于不同的关联，必要时要分解以前确定的类；</dd>\n<dd>分析过程中，及时补上遗漏的关联</dd>\n</dl>\n<div class=\"note primary\">\n<p>确定属性</p>\n</div>\n<div class=\"note primary\">\n<p>建立对象类图</p>\n</div>\n<div class=\"note primary\">\n<p>划分主题</p>\n</div>\n<div class=\"note primary\">\n<p>优化对象模型</p>\n</div>\n<h2 id=\"建立动态行为模型\"><a class=\"anchor\" href=\"#建立动态行为模型\">#</a> 建立动态行为模型</h2>\n<div class=\"note primary\">\n<p>建立顺序图</p>\n</div>\n<div class=\"note primary\">\n<p>建立通信图</p>\n</div>\n<div class=\"note primary\">\n<p>建立状态图</p>\n</div>\n<ul>\n<li>状态机及状态图的定义</li>\n<li>状态</li>\n<li>事件\n<ol>\n<li>入口事件</li>\n<li>出口事件</li>\n<li>动作事件</li>\n<li>信号事件</li>\n<li>调用事件</li>\n<li>修改事件</li>\n<li>时间事件</li>\n<li>延迟事件</li>\n</ol>\n</li>\n<li>转换\n<ol>\n<li>外部转换</li>\n<li>内部转换</li>\n<li>完成转换：又称自转换</li>\n</ol>\n</li>\n<li>触发事件</li>\n<li>监护条件</li>\n<li>动作</li>\n<li>状态图的建模步骤\n<ol>\n<li>找出适合用模型描述其行为的类</li>\n<li>确定对象可能存在的状态</li>\n<li>确定引起状态转换的事件</li>\n<li>确定转换进行时对象执行的相应动作</li>\n<li>对建模的结果进行相应的精化和细化</li>\n</ol>\n</li>\n<li>建立状态图\n<ol>\n<li>编写典型交互行为脚本</li>\n<li>从脚本中提取出事物，确定触发每个事件的动作对象及接受事件的目标对象。</li>\n<li>排列事件发生的次序，确定每个对象可能有的状态及状态间转换关系，并用状态图描绘出来。</li>\n<li>比较各个对象的状态图，检查它们之间的一致性，确保事件之间的匹配。</li>\n</ol>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>建立活动图</p>\n</div>\n<ol>\n<li>\n<p>活动图与流程图</p>\n</li>\n<li>\n<p>活动图与状态图</p>\n</li>\n<li>\n<p>活动图的组成及 UML 图形表示</p>\n<ul>\n<li>动作状态</li>\n<li>活动状态</li>\n<li>动作流</li>\n<li>分支与合并</li>\n<li>分叉与汇合</li>\n<li>分区</li>\n<li>对象流</li>\n</ul>\n</li>\n<li>\n<p>活动的分解</p>\n</li>\n<li>\n<p>活动图建模技术</p>\n<ul>\n<li>识别要对工作流描述的类或对象。</li>\n<li>确定工作流的初始状态和终止阶段，明确工作流的边界。</li>\n<li>对动作状态或活动状态建模。</li>\n<li>对动作流建模</li>\n<li>对对象流建模</li>\n<li>对建立的模型进行精化和细化</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"建立物理实现模型\"><a class=\"anchor\" href=\"#建立物理实现模型\">#</a> 建立物理实现模型</h2>\n<div class=\"note primary\">\n<p>建立构件图</p>\n</div>\n<ol>\n<li>构件 (Component)</li>\n<li>构件的接口</li>\n<li>对构件和构件关系建模的用途</li>\n<li>构件图 (Component Diagram)\n<ul>\n<li>源代码文件建模</li>\n<li>可执行文件和库建模</li>\n<li>表、文件和文档建模</li>\n</ul>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>建立部署图</p>\n</div>\n<ol>\n<li>部署图的要素\n<ul>\n<li>结点</li>\n<li>连接</li>\n</ul>\n</li>\n<li>如何开发部署模型\n<ul>\n<li>确定模型范围</li>\n<li>确定分布结构</li>\n<li>确定结点和他们的连接</li>\n<li>把构件分布到结点</li>\n<li>为不同构件之间的依赖建模</li>\n</ul>\n</li>\n<li>几种部署图建模方法\n<ul>\n<li>构建的分布建模</li>\n<li>嵌入式系统建模</li>\n<li>客户机 / 服务器建模</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"面向对象软件开发过程的案例分析\"><a class=\"anchor\" href=\"#面向对象软件开发过程的案例分析\">#</a> 面向对象软件开发过程的案例分析</h2>\n<div class=\"note primary\">\n<p>系统需求</p>\n</div>\n<ol>\n<li>客户预约汽车</li>\n<li>客户得到汽车</li>\n<li>客户返还汽车</li>\n</ol>\n<div class=\"note primary\">\n<p>系统用例模型</p>\n</div>\n<ol>\n<li>定义参与者</li>\n<li>用例图</li>\n</ol>\n<div class=\"note primary\">\n<p>系统对象模型</p>\n</div>\n<div class=\"note primary\">\n<p>系统动态行为模型</p>\n</div>\n<ol>\n<li>顺序图和通信图\n<ul>\n<li>顺序图</li>\n<li>通信图</li>\n</ul>\n</li>\n<li>状态图和活动图\n<ul>\n<li>状态图</li>\n<li>活动图</li>\n</ul>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>系统物理实现模型</p>\n</div>\n<ol>\n<li>构件图</li>\n<li>部署图</li>\n</ol>\n<h2 id=\"本章小结-2\"><a class=\"anchor\" href=\"#本章小结-2\">#</a> 本章小结</h2>\n<ul>\n<li>面向对象的分析就是抽取和整理用户需求，并建立问题领域精确模型的过程。</li>\n<li>分析工作主要包括 3 项内容：理解、表达和验证。与传统的面向数据流的结构化方法以功能为导向的分析，构建的是面向类的模型。一般地，可通过对象模型、用例 (功能) 模型、动态 (行为) 模型和物理实现模型来表达分析结果。</li>\n<li>本章最后通过一个简化的汽车租赁系统的分析过程给出面向对象分析的应用案例。</li>\n<li>本章以面向对象的概念为基础，介绍了以这 4 种模型为基础进行建模的基本方法和注意事项，为面向对象软件的分析过程提供指导。</li>\n</ul>\n<h1 id=\"面向对象的设计与实现\"><a class=\"anchor\" href=\"#面向对象的设计与实现\">#</a> 面向对象的设计与实现</h1>\n<h2 id=\"面向对象的设计准则和启发式规则\"><a class=\"anchor\" href=\"#面向对象的设计准则和启发式规则\">#</a> 面向对象的设计准则和启发式规则</h2>\n<div class=\"note primary\">\n<p>面向对象设计准则</p>\n</div>\n<ol>\n<li>模块化</li>\n<li>抽象</li>\n<li>信息隐蔽</li>\n<li>弱耦合\n<ul>\n<li>交互耦合</li>\n<li>继承耦合</li>\n</ul>\n</li>\n<li>强内聚\n<ul>\n<li>服务内聚</li>\n<li>类内聚</li>\n<li>一般 - 特殊内聚</li>\n</ul>\n</li>\n<li>可重用\n<ul>\n<li>尽量使用已有的类</li>\n<li>如果确实需要创建新类，则在设计这些新类的协议时，应该考虑将来的可重复使用性</li>\n</ul>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>启发式规则</p>\n</div>\n<ol>\n<li>设计结果应该清晰易懂\n<ul>\n<li>用词一致</li>\n<li>使用已有的的协议</li>\n<li>减少消息模式的数据</li>\n<li>避免模糊的定义</li>\n</ul>\n</li>\n<li>一般 - 特殊结构的深度应适当</li>\n<li>设计简单的类</li>\n<li>使用简单的协议</li>\n<li>使用简单的服务</li>\n<li>把设计变动减至最小</li>\n</ol>\n<h2 id=\"系统设计\"><a class=\"anchor\" href=\"#系统设计\">#</a> 系统设计</h2>\n<div class=\"note primary\">\n<p>问题域子系统设计</p>\n</div>\n<ol>\n<li>为复用设计与编程的类而增加结构</li>\n<li>按编程语言调整继承关系</li>\n<li>提高性能</li>\n<li>为编程方便增加底层成分，通过细化对象的分类来实现</li>\n<li>对复杂关联的转化并决定关联的实现方式</li>\n<li>调整与完善属性</li>\n<li>构造或优化算法，调整服务</li>\n<li>其他</li>\n</ol>\n<div class=\"note primary\">\n<p>人机交互子系统设计</p>\n</div>\n<ol>\n<li>用户分类</li>\n<li>描述与系统交互的参与者的脚本</li>\n<li>设计详细的交互</li>\n<li>设计命令层</li>\n<li>设计人机交互类</li>\n<li>继续做原型</li>\n</ol>\n<div class=\"note primary\">\n<p>任务管理子系统设计</p>\n</div>\n<ol>\n<li>确定任务的特征 (如事件驱动、时钟驱动等)</li>\n<li>定义协调者任务和关联的对象</li>\n<li>集成协调者和其他任务</li>\n</ol>\n<div class=\"note primary\">\n<p>任务管理子系统设计</p>\n</div>\n<ol>\n<li>选择数据存储管理的模式\n<ul>\n<li>文件管理系统</li>\n<li>关系数据库管理系统</li>\n<li>面向对象数据库管理系统</li>\n</ul>\n</li>\n<li>设计数据管理子系统\n<ul>\n<li><span class=\"label\">数据格式设计</span>\n<ul>\n<li>文件管理系统</li>\n<li>关系数据库管理系统</li>\n<li>面向对象数据库管理系统</li>\n</ul>\n</li>\n<li><span class=\"label\">服务设计</span>\n<ul>\n<li>文件管理系统</li>\n<li>关系数据库管理系统</li>\n<li>面向对象数据库管理系统</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"服务-关联与聚合关系设计\"><a class=\"anchor\" href=\"#服务-关联与聚合关系设计\">#</a> 服务、关联与聚合关系设计</h2>\n<div class=\"note primary\">\n<p>服务设计</p>\n</div>\n<ol>\n<li>\n<p>确定类中应有的服务</p>\n<ul>\n<li>从对象模型中引入服务</li>\n<li>从动态模型中确定服务</li>\n<li>从用例模型中确定服务</li>\n</ul>\n</li>\n<li>\n<p>设计实现服务的方法</p>\n<ul>\n<li>选择数据结构</li>\n<li>定义内部类和内部操作</li>\n<li>设计实现服务的算法</li>\n<li>算法复杂度</li>\n<li>容易理解和实现</li>\n<li>易修改和易维护</li>\n</ul>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>关联设计</p>\n</div>\n<ol>\n<li>单向关联与双向关联</li>\n<li>关联的命名</li>\n<li>角色</li>\n<li>关联类及其属性</li>\n<li>关联的约束</li>\n<li>关联的限定符</li>\n<li>关联的种类</li>\n</ol>\n<div class=\"note primary\">\n<p>聚合关系设计</p>\n</div>\n<ol>\n<li>简化了对象的定义</li>\n<li>支持软件重用</li>\n<li>聚集和组合的区别如下：\n<ul>\n<li>聚集关系称为 &quot;has-a&quot; 关系，组合关系称为 &quot;contains-a&quot; 关系</li>\n<li>聚集关系表示事物的整体 / 部分关系的较<span class=\"red\">弱</span>的情况，组合关系表示事物的整体 / 部分关系的较<span class=\"red\">强</span>的情况。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"面向对象设计优化\"><a class=\"anchor\" href=\"#面向对象设计优化\">#</a> 面向对象设计优化</h2>\n<ol>\n<li>确定优先级</li>\n<li>提高效率的几项技术\n<ul>\n<li>增加冗余关联以提高访问效率</li>\n<li>调整查询次序</li>\n<li>保留派生属性</li>\n</ul>\n</li>\n<li>调整继承关系\n<ul>\n<li>抽象与具体</li>\n<li>为提高继承程度而修改类定义</li>\n<li>利用委托实现行为共享</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"面向对象系统的实现\"><a class=\"anchor\" href=\"#面向对象系统的实现\">#</a> 面向对象系统的实现</h2>\n<div class=\"note primary\">\n<p>面向对象程序设计语言的选择</p>\n</div>\n<ol>\n<li>面向对象程序设计语言的优点</li>\n<li>面向对象语言的技术特点</li>\n<li>选择面向对象语言的实际原因</li>\n</ol>\n<div class=\"note primary\">\n<p>面向对象程序设计风格</p>\n</div>\n<ol>\n<li>提高可重用性</li>\n<li>提高可扩充性</li>\n<li>提高健壮性</li>\n</ol>\n<h2 id=\"本章小结-3\"><a class=\"anchor\" href=\"#本章小结-3\">#</a> 本章小结</h2>\n<ul>\n<li>面向对象设计是面向对象分析内容的细化和扩展，目的是解决分析阶段所得到模型 “如何做” 的问题。面向对象设计把分析阶段得到的对目标系统的需求转变为符合成本和质量要求的、抽象的系统实现方案。</li>\n<li>面向对象方法学在概念和表示方法上的一致性，保证了在各开发活动之间的平滑过渡，从面向对象分析、面向对象设计，再到面向对象的实现，实际上就变成了一个逐渐扩充模型的过程。面向对象分析、设计和实现是一个多次反复迭代的过程。</li>\n<li>本章首先介绍了面向对象设计应遵循的准则和启发式准则。大多数求解空间模型，在逻辑上由问题域、人机交互、任务管理和数据管理 4 大部分组成，本章按照系统分解的观点，介绍了这 4 个子系统的设计策略和方法。根据面向对象分析和设计过程的迭代特性，面向对象设计阶段需要对类中的服务、关联和聚合等关系进行细化，同时需要按照一定规则对设计进行优化。本章最后对面向对象实现所涉及的程序设计语言的选择和程序设计的风格问题进行了介绍。</li>\n</ul>\n<h1 id=\"软件开发工具-staruml-及其应用\"><a class=\"anchor\" href=\"#软件开发工具-staruml-及其应用\">#</a> 软件开发工具 StarUML 及其应用</h1>\n<h2 id=\"软件开发工具-staruml-概述\"><a class=\"anchor\" href=\"#软件开发工具-staruml-概述\">#</a> 软件开发工具 StarUML 概述</h2>\n<div class=\"note primary\">\n<p>StarUML 的安装及使用</p>\n</div>\n<ol>\n<li>运行 StarUML (tm) 的最低系统需求</li>\n<li>StarUML 的安装步骤</li>\n<li>StarUML 的使用</li>\n</ol>\n<div class=\"note primary\">\n<p>StarUML 的主要功能</p>\n</div>\n<h2 id=\"staruml-环境下的-uml-图形建模\"><a class=\"anchor\" href=\"#staruml-环境下的-uml-图形建模\">#</a> StarUML 环境下的 UML 图形建模</h2>\n<div class=\"note primary\">\n<p>StarUML 的用例图、类图和包图</p>\n</div>\n<ol>\n<li>用例图</li>\n<li>类图</li>\n<li>包图</li>\n</ol>\n<div class=\"note primary\">\n<p>StarUML 的交互图和状态机图</p>\n</div>\n<ol>\n<li>顺序图和通信图</li>\n<li>状态图和活动图</li>\n</ol>\n<div class=\"note primary\">\n<p>StarUML 的构件图与部署图</p>\n</div>\n<ol>\n<li>构件图</li>\n<li>部署图</li>\n</ol>\n<div class=\"note primary\">\n<p>StarUML 的正向工程和逆向工程</p>\n</div>\n<ol>\n<li>代码生成</li>\n<li>逆向工程</li>\n</ol>\n<h2 id=\"一个简易教学管理系统的分析和设计\"><a class=\"anchor\" href=\"#一个简易教学管理系统的分析和设计\">#</a> 一个简易教学管理系统的分析和设计</h2>\n<div class=\"note primary\">\n<p>系统需求描述及分析</p>\n</div>\n<div class=\"note primary\">\n<p>系统问题领域分析</p>\n</div>\n<ol>\n<li>确定系统范围和系统边界</li>\n<li>定义参与者</li>\n<li>定义用例</li>\n<li>绘制用例图</li>\n<li>绘制主要交互图</li>\n</ol>\n<div class=\"note primary\">\n<p>静态结构模型的建立</p>\n</div>\n<div class=\"note primary\">\n<p>动态行为模型的建立</p>\n</div>\n<ol>\n<li>建立顺序图</li>\n<li>建立通讯图</li>\n<li>建立状态图</li>\n<li>建立活动图</li>\n</ol>\n<div class=\"note primary\">\n<p>系统物理模型的建立</p>\n</div>\n<div class=\"note primary\">\n<p>代码框架自动生成的过程</p>\n</div>\n<h2 id=\"本章小结-4\"><a class=\"anchor\" href=\"#本章小结-4\">#</a> 本章小结</h2>\n<ul>\n<li>StarUML 是一款开源的 UML 建模工具，基于 UML1.4 版本，提供 11 种不同类型的图，支持 UML2.0 的表示法。另外，StarUML 的扩展机制还允许用户增加定制内容，使用灵活、方便。</li>\n<li>本章介绍了 StarUML 环境下几种典型的 UML 图形建模的基本用法，并通过一个简易教学管理系统的分析和设计，展示了 StarUML 用于分析设计过程的辅助用法。</li>\n</ul>\n<h1 id=\"软件体系结构\"><a class=\"anchor\" href=\"#软件体系结构\">#</a> 软件体系结构</h1>\n<h2 id=\"软件体系结构概述\"><a class=\"anchor\" href=\"#软件体系结构概述\">#</a> 软件体系结构概述</h2>\n<h2 id=\"经典的软件体系结构风格\"><a class=\"anchor\" href=\"#经典的软件体系结构风格\">#</a> 经典的软件体系结构风格</h2>\n<div class=\"note primary\">\n<p>管道 - 过滤器 (流程处理) 体系结构</p>\n</div>\n<ul>\n<li>流程处理系统 (Procedure Processing System) 以程序算法和数据结构为中心，由称作过滤器的构件和称作管道的连接件组成的体系结构 (常常被称作管道 - 过滤器体系结构)。每一个处理过程中，先接收数据、进行处理 (过滤)，最后产生输出数据。</li>\n</ul>\n<div class=\"note primary\">\n<p>分层体系结构</p>\n</div>\n<div class=\"note primary\">\n<p>客户机 / 服务器体系结构</p>\n</div>\n<ol>\n<li>\n<p>两层的客户机 / 服务器体系结构</p>\n</li>\n<li>\n<p>3 层和多层体系结构</p>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>浏览器 / 服务器体系结构 (B/S)</p>\n</div>\n<h2 id=\"现代的软件体系结构风格\"><a class=\"anchor\" href=\"#现代的软件体系结构风格\">#</a> 现代的软件体系结构风格</h2>\n<div class=\"note primary\">\n<p>公共对象请求代理体系结构</p>\n</div>\n<div class=\"note primary\">\n<p>基于层次消息总线的体系结构风格</p>\n</div>\n<div class=\"note primary\">\n<p>异构结构风格</p>\n</div>\n<ol>\n<li>\n<p>按功能不同构成的混合体系结构</p>\n</li>\n<li>\n<p>按结点组合方式的不同构成的混合体系结构</p>\n<ul>\n<li>随机式</li>\n<li>轮流式</li>\n<li>负载平分式</li>\n<li>多队列式</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"本章小结-5\"><a class=\"anchor\" href=\"#本章小结-5\">#</a> 本章小结</h2>\n<ul>\n<li>\n<p>面向对象技术的出现和广泛使用，在一定程度上解决了软件可复用性的问题，但同时对软件的可复用性提出了更高的要求，从程序代码的复用逐渐过渡到分析、设计的复用上来。软件体系结构就是希望为软件开发的工程化提供更高抽象层次的复用粒度。</p>\n</li>\n<li>\n<p>软件体系结构可以看作是面向对象设计阶段中的总体设计，提供系统设计的总体架构。</p>\n</li>\n<li>\n<p>本章分别介绍几种经典的和现代的软件体系结构的风格和模式，为面向对象设计的总体架构设计提供指导，同时希望在设计复用方面对现代软件工程开发过程提供一些帮助。</p>\n</li>\n</ul>\n<h1 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<h2 id=\"设计模式概述\"><a class=\"anchor\" href=\"#设计模式概述\">#</a> 设计模式概述</h2>\n<div class=\"note primary\">\n<p>设计模式的出现和发展</p>\n</div>\n<div class=\"note primary\">\n<p>设计模式和软件体系结构的关系</p>\n</div>\n<div class=\"note primary\">\n<p>设计模式的优点和分类</p>\n</div>\n<h2 id=\"grasp-设计模式及其应用\"><a class=\"anchor\" href=\"#grasp-设计模式及其应用\">#</a> GRASP 设计模式及其应用</h2>\n<div class=\"note primary\">\n<p>GRASP 设计模式概念及其分类</p>\n</div>\n<div class=\"note primary\">\n<p>几种典型的 GRASP 设计模式应用简介</p>\n</div>\n<ol>\n<li>信息专家 (Information Expert)</li>\n<li>创建者 (Creator)</li>\n<li>高内聚 (Hign Cohesion)</li>\n<li>低耦合 (Low Goupling)</li>\n<li>控制者 (Controller)</li>\n<li>多态 (Polymorphism)</li>\n<li>纯虚构 (Pure Fabrication)</li>\n<li>间接，也成为中介者 (Indirection)</li>\n<li>受保护变化 (Protected Variations)</li>\n</ol>\n<h2 id=\"gof-设计模式及其应用\"><a class=\"anchor\" href=\"#gof-设计模式及其应用\">#</a> GoF 设计模式及其应用</h2>\n<ol>\n<li>模式名称</li>\n<li>问题</li>\n<li>解决方案</li>\n<li>效果</li>\n</ol>\n<ul>\n<li>设计模式的描述</li>\n<li>设计模式的用途</li>\n<li>GoF 给出的 &quot;使用设计模式的循序渐进的方法&quot;</li>\n</ul>\n<div class=\"note primary\">\n<p>GoF 设计模式的组成及其分类</p>\n</div>\n<ol>\n<li>\n<p>创建型模式 (Creational Pattern)：处理新对象的创建过程</p>\n<ul>\n<li>工厂方法 (Factory Method)</li>\n<li>抽象工厂 (Abstract Factory)</li>\n<li>生成器 (Builder)</li>\n<li>原型 (Prototype)</li>\n<li>单例 (Singleton)</li>\n</ul>\n</li>\n<li>\n<p>结构性模式 (Structural Pattern)：处理类和对象的组成</p>\n<ul>\n<li>适配器 (Adapter)</li>\n<li>桥接 (Bridge)</li>\n<li>组成 (Composite)</li>\n<li>装饰 (Decorator)</li>\n<li>外观 (Facade)</li>\n<li>享元 (FlyWeight)</li>\n<li>代理 (Proxy)</li>\n</ul>\n</li>\n<li>\n<p>行为型模式 (Behavioral Pattern)：详细说明对象或类之间如何交互及如何分配职责。</p>\n<ul>\n<li>责任链 (Chain of Responsibility)</li>\n<li>命令 (Command)</li>\n<li>解释器 (Interpreter)</li>\n<li>迭代器 (Iterator)</li>\n<li>中介者 (Mediator)</li>\n<li>备忘录 (Memento)</li>\n<li>观察者 (Observer)</li>\n<li>状态 (State)</li>\n<li>策略 (Strategy)</li>\n<li>模板方法 (Template Method)</li>\n<li>访问者 (Visitor)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"本章小结-6\"><a class=\"anchor\" href=\"#本章小结-6\">#</a> 本章小结</h2>\n<ul>\n<li>\n<p>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格及解决问题的思考方式。使用设计模式是为了重用已有的设计经验、框架、代码，以便让代码更容易被他人理解，保证代码可靠性。对设计模式的理解和掌握是程序员提高自身素质的一个很好的方面。</p>\n</li>\n<li>\n<p>GRASP 模式着重考虑设计类的原则及如何分配类的功能。</p>\n</li>\n<li>\n<p>GoF 模式着重考虑设计的实现、类的交互和软件质量。</p>\n</li>\n<li>\n<p>GRASP 可以说是 GoF 设计模式的基础，GoF 模式是符合 GRASP 模式要求的面向对象设计模式。GoF 设计模式针对特定问题提出相应解决方法，是目前常用的设计模式之一。</p>\n</li>\n<li>\n<p>本章主要介绍设计模式的基本概念和发展、GRASP 设计模式和 GoF 设计模式的概念及其分类，并给出典型的应用实例，目的是使读者掌握设计模式的基本理论及应用设计模式解决软件设计中的实际问题的方法。</p>\n</li>\n</ul>\n<h1 id=\"软件工程新技术\"><a class=\"anchor\" href=\"#软件工程新技术\">#</a> 软件工程新技术</h1>\n<h2 id=\"软件复用技术\"><a class=\"anchor\" href=\"#软件复用技术\">#</a> 软件复用技术</h2>\n<ul>\n<li>软件复用 (Software Reuse) 是指在软件开发过程中重复使用相同或相似软件元素的过程。通过软件复用，可以提高软件开发的效率和质量。</li>\n</ul>\n<div class=\"note primary\">\n<p>软件复用概念及分类</p>\n</div>\n<div class=\"note primary\">\n<p>软件复用的关键技术和复用粒度</p>\n</div>\n<ul>\n<li>软件复用有 3 个基本问题\n<ol>\n<li>必须有可以复用的对象</li>\n<li>所复用的对象必须是有用的</li>\n<li>复用者需要知道如何去使用被服用的对象。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"基于构件的软件工程技术\"><a class=\"anchor\" href=\"#基于构件的软件工程技术\">#</a> 基于构件的软件工程技术</h2>\n<div class=\"note primary\">\n<p>中间件技术</p>\n</div>\n<ul>\n<li>中间件是一个用应用程序接口定义的分布式软件管理框架，其有强大的通信能力和良好的可扩展性。</li>\n</ul>\n<ol>\n<li>中间件要解决的问题\n<ul>\n<li>互连和互操作的问题</li>\n<li>核心要解决名字服务、安全控制、并发控制、可靠性保证、效率保证等</li>\n<li>特点\n<ol>\n<li>满足大量应用的需要</li>\n<li>运行于多种硬件和操作系统平台</li>\n<li>支持分布式计算</li>\n<li>提供跨网络、硬件和操作系统平台的透明性</li>\n<li>支持标准的协议和接口</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>中间件的分类\n<ul>\n<li>根据中间件具有的功能和所提供的服务分类：\n<ol>\n<li>面向对象中间件</li>\n<li>面向消息中间件</li>\n<li>容错中间件</li>\n<li>反射中间件</li>\n</ol>\n</li>\n<li>基于 IDC 分类\n<ol>\n<li>终端仿真 / 屏幕转换</li>\n<li>数据访问中间件</li>\n<li>远程过程调用中间件</li>\n<li>消息中间件</li>\n<li>交易中间件</li>\n<li>基于对象请求代理 (Object Request Broker ,ORB) 中间件</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>中间件的发展及认识度</li>\n</ol>\n<div class=\"note primary\">\n<p>构件与构件化</p>\n</div>\n<ul>\n<li>构件技术的基本思想在于：创建和利用可复用的软件构件来解决软件开发的问题。</li>\n</ul>\n<div class=\"note primary\">\n<p>构件模型及描述语言</p>\n</div>\n<ol>\n<li>构建模型\n<ul>\n<li>构件实现模型的基本思想:\n<ul>\n<li>采用将构件的接口和实现相分离的原则；</li>\n<li>采用黑盒重用的方式，外界仅可以通过构件的接口来访问构件的功能；</li>\n<li>在实现方法上都使用接口描述语言 (Interface Description Language , IDL) 进行构件接口定义，利用相应的中间件作为支撑该构件模型的运行时环境，从而达到由不同的编程语言所实现、运行在不同的操作系统环境中及不同主机上的构件都能相互交互的目的。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构件描述语言</li>\n</ol>\n<div class=\"note primary\">\n<p>构件的检索与组装</p>\n</div>\n<ol>\n<li>\n<p>构件的检索</p>\n<ul>\n<li>枚举分类</li>\n<li>刻面分类</li>\n<li>属性值分类</li>\n<li>正文检索</li>\n<li>关键词分类</li>\n</ul>\n</li>\n<li>\n<p>构件组装技术</p>\n</li>\n<li>\n<p>构件组装技术及方法的分类</p>\n</li>\n<li>\n<p>构件组装的实现方法</p>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>基于构件的软件工程方法</p>\n</div>\n<ul>\n<li>软件团队针对系统需求的构件，采用如下问题列表的方式确认本系统中需要的构件的获取方式：\n<ol>\n<li>现有的商业成品构件 (Commercial Off-The-Shelf, COTS) 是否能够实现该需求？</li>\n<li>内部开发的可复用构件是否能够实现该需求？</li>\n<li>可用构件的接口与待构造系统的体系结构是否相容？</li>\n</ol>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>SOA 与 SaaS</p>\n</div>\n<ul>\n<li>SOA (Service-Oriented Architecture, 面向服务架构)</li>\n<li>SaaS (Software-as-a-Service, 软件即服务)</li>\n</ul>\n<h2 id=\"软件过程与标准化\"><a class=\"anchor\" href=\"#软件过程与标准化\">#</a> 软件过程与标准化</h2>\n<div class=\"note primary\">\n<p>软件过程及其改进</p>\n</div>\n<ol>\n<li>对比目前的状态和期望达到的状态，找出存在的差距。</li>\n<li>确定要改变那些差距，需要改变到什么程度。</li>\n<li>制定相应的具体实施计划，其中的 &quot;具体&quot; 包括\n<ul>\n<li>要有明确的、可以检验的目标；</li>\n<li>要定出检验成功与否的标准；</li>\n<li>要有具体的实施办法；</li>\n<li>指定具体执行计划的人，明确具体的职责和任务；</li>\n<li>明确执行计划的主要领导或协调者，以负责解决在计划执行中出现的问题</li>\n<li>要列出 &quot;实施计划&quot; 所应用的新技术与新工具及如何获得这些新技术与新工具。</li>\n</ul>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>ISO 9000 标准</p>\n</div>\n<div class=\"note primary\">\n<p>软件能力成熟度模型 (CMM)</p>\n</div>\n<ul>\n<li>CMM (Capability Maturity Model) 卡内基梅隆大学软件工程研究院 SEI 受美国国防部委托制定的软件过程的改良、评估模型，也称为 SEI SW-CMM (Software Engineering Institute Software-Capability Maturity Model).</li>\n</ul>\n<ol>\n<li>\n<p>CMM 的内容</p>\n<ul>\n<li>初始级 (Initial)</li>\n<li>可重复级 (Repeatable)</li>\n<li>已定义级 (Defined)</li>\n<li>已管理级 (Managed)</li>\n<li>优化级 (Optimizing)</li>\n</ul>\n</li>\n<li>\n<p>关键过程域 (Key Process Area,KPA)</p>\n</li>\n<li>\n<p>CMM 实施中应注意的问题</p>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>PSP、TSP 和 CMMI</p>\n</div>\n<ol>\n<li>个体软件过程 (Personal Software Process , PSP)</li>\n<li>小组软件开发过程 (Team Software Process , TSP)</li>\n<li>能力成熟度继承模型 (Capability Maturity Model Integration , CMMI)\n<ul>\n<li>SW-CMM (Software CMM) 软件 CMM</li>\n<li>SE-CMM (System Engineering CMM) 系统工程 CMM</li>\n<li>SA-CMM (Software Acquisition CMM) 软件采购 CMM</li>\n<li>IPT-CMM (Integrated Product Team CMM) 集成产品群组 CMM</li>\n<li>P-CMM (People CMM) 人力资源能力成熟度模型</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"敏捷软件开发过程\"><a class=\"anchor\" href=\"#敏捷软件开发过程\">#</a> 敏捷软件开发过程</h2>\n<div class=\"note primary\">\n<p>敏捷及敏捷过程的相关概念</p>\n</div>\n<ol>\n<li>\n<p>&quot;敏捷过程&quot; 在软件业中的提出</p>\n<ul>\n<li>可工作软件胜过面面俱到的文档</li>\n<li>客户合作胜过合同谈判</li>\n<li>响应变化胜过遵循计划</li>\n</ul>\n</li>\n<li>\n<p>敏捷的概念</p>\n</li>\n<li>\n<p>敏捷宣言所遵循的 12 条原则</p>\n<ol>\n<li>人们最优先要做的是通过尽早地、持续地交付有价值的软件来使客户满意</li>\n<li>即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势</li>\n<li>经常性的交付可以工作的软件，交付的间隔可以从几个星期到几个月，交付的时间间隔越短越好。</li>\n<li>在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。</li>\n<li>围绕被激励起来的个体来构建项目。给它们提供所需的环境和支持，并且信任它们能够完成工作。</li>\n<li>在团队内部，最具有效果并且富有效率的传递信息的方法就是面对面的交谈</li>\n<li>工作的软件是首要的进度度量标准</li>\n<li>敏捷过程提倡可持续的开发进度。责任人、开发者和用户应保持一个长期恒定的开发速度。</li>\n<li>不断关注优秀的技能和好的设计会增强敏捷能力</li>\n<li>简单 - <span class=\"rainbow\">使未完成的工作最大化的艺术</span> - 是根本的</li>\n<li>最好的架构、需求和设计出自于自组织的团队</li>\n<li>每隔一定时间，团队会在如何才能更有效的工作方面进行反省，然后相应地对自己的行为进行调整。</li>\n</ol>\n</li>\n<li>\n<p>敏捷软件过程的特性</p>\n<ol>\n<li>轻载软件过程</li>\n<li>基于时间</li>\n<li>够用就好</li>\n<li>并行</li>\n<li>基于构建的软件工程</li>\n</ol>\n</li>\n<li>\n<p>敏捷软件过程模型 = 功能模型 + 合作模型 + 资源模型 + 产品模型</p>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>典型的敏捷过程模型</p>\n</div>\n<ol>\n<li>极限编程 (eXtreme Programming , XP)</li>\n<li>Scrum 方法\n<ul>\n<li>待定项 (Backlog)</li>\n<li>冲刺 (Sprint)</li>\n<li>例会</li>\n<li>演示</li>\n</ul>\n</li>\n<li>特征驱动开发 (Feature Driven Development , FDD)\n<ul>\n<li>FDD 的核心\n<ul>\n<li>领域对象建模</li>\n<li>按照特征开发</li>\n<li>类 (代码) 拥有权</li>\n<li>特征小组</li>\n<li>审查</li>\n<li>定期构造</li>\n<li>配置管理</li>\n<li>可视性进度报告</li>\n</ul>\n</li>\n<li>FDD 方法包括 5 个过程组成\n<ul>\n<li>开发整体模型</li>\n<li>构建特征列表</li>\n<li>依据特征规划</li>\n<li>依据特征设计</li>\n<li>依据特征构建</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"web-软件工程\"><a class=\"anchor\" href=\"#web-软件工程\">#</a> Web 软件工程</h2>\n<div class=\"note primary\">\n<p>Web 软件工程概述</p>\n</div>\n<ol>\n<li>基于 Web 的系统和应用的属性和特点\n<ul>\n<li>网络密集型 (Network Intensive)</li>\n<li>访问并发性 (Concurrency)</li>\n<li>工作负荷的跳跃性 (Unpredictable load)</li>\n<li>性能 (Performance)</li>\n<li>安全性 (Security)</li>\n<li>可用性 (Availability)</li>\n<li>数据驱动 (Data driven)</li>\n<li>内容敏感性 (Content Sensitive)</li>\n<li>持续演化 (Continuous Evolution)</li>\n<li>即时性 (Immediacy)</li>\n<li>美观性 (Aesthetics)</li>\n</ul>\n</li>\n<li>Web 工程过程\n<ul>\n<li>计划阶段</li>\n<li>建模阶段</li>\n<li>构建阶段</li>\n<li>部署阶段</li>\n</ul>\n</li>\n</ol>\n<div class=\"note primary\">\n<p>Web 软件的需求分析</p>\n</div>\n<ol>\n<li>内容模型</li>\n<li>交互模型</li>\n<li>功能模型</li>\n<li>配置模型</li>\n<li>导航模型</li>\n</ol>\n<div class=\"note primary\">\n<p>Web 软件的设计</p>\n</div>\n<ol>\n<li>WebApp 界面设计</li>\n<li>美学设计</li>\n<li>内容设计</li>\n<li>体系结构设计\n<ul>\n<li>线性结构</li>\n<li>网络结构</li>\n<li>层次结构</li>\n</ul>\n</li>\n<li>导航设计\n<ul>\n<li>单独的导航链接</li>\n<li>水平导航条</li>\n<li>垂直导航列</li>\n<li>标签</li>\n<li>网站地图</li>\n</ul>\n</li>\n<li>构件级设计</li>\n</ol>\n<div class=\"note primary\">\n<p>Web 软件的测试</p>\n</div>\n<ol>\n<li>内容</li>\n<li>功能</li>\n<li>结构</li>\n<li>易用性</li>\n<li>导航性</li>\n<li>性能</li>\n<li>兼容性</li>\n<li>互操作性</li>\n<li>安全性</li>\n</ol>\n<h2 id=\"软件产品线技术\"><a class=\"anchor\" href=\"#软件产品线技术\">#</a> 软件产品线技术</h2>\n<div class=\"note primary\">\n<p>软件产品线基本概念</p>\n</div>\n<ul>\n<li>\n<p>软件产品线的 3 大基本活动</p>\n</li>\n<li>\n<p>软件产品线的特点</p>\n</li>\n</ul>\n<div class=\"note primary\">\n<p>软件产品线方法</p>\n</div>\n<div class=\"note primary\">\n<p>北大青鸟工程</p>\n</div>\n<ul>\n<li>\n<p>青鸟工程简介</p>\n</li>\n<li>\n<p>青鸟软件生产线系统</p>\n</li>\n</ul>\n<h2 id=\"本章小结-7\"><a class=\"anchor\" href=\"#本章小结-7\">#</a> 本章小结</h2>\n<ul>\n<li>随着软、硬件技术、网络的发展及计算理念的变化，软件工程领域也出现了很多新的技术。本章主要介绍继面向对象技术之后软件工程领域研究使用的新技术，包括软件复用技术、基于构建的软件工程技术（中间件和构件技术）、软件能力成熟度模型、敏捷软件工程、Web 软件工程及软件产品线技术。</li>\n<li>软件复用技术是其他软件工程技术的核心和基础。基于构建的软件工程技术需要软件体系结构的支持。软件能力成熟度模型则是从软件过程改进的角度为个人、团队和整个软件开发组织提供参考。敏捷软件过程改变了传统的软件开发过程中先设计后实现的思想，敏捷更强调快速灵活反应，主动迎接和适应变化。敏捷开发能够适应中小型快速软件开发的需求，代表了 21 世纪互联网时代软件开发模式的一种先进理念和价值观。随着网络应用逐渐成为人们生活中不可或缺的组成部分，以 Web 系统和应用为主体的 Web 软件工程 (简称 Web 工程) 成为软件工程中一个渐渐分离的独立分支。Web 工程借用了软件工程的许多基本概念和原理，以相同的技术和管理活动完成具有 Web 应用特色的软件生存周期。软件产品线方法是软件工程领域中软件体系结构和软件重用技术发展的结果，产品线方法可以看作是软件复用发展的一个更高阶段，目前关于软件产品线的研究更多还在实验阶段。</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/09/08/note/CLanguage/",
            "url": "https://hongkuan.github.io/2023/09/08/note/CLanguage/",
            "title": "2024 C语言程序设计",
            "date_published": "2023-09-08T09:51:00.000Z",
            "content_html": "<h1 id=\"c语言与程序设计\"><a class=\"anchor\" href=\"#c语言与程序设计\">#</a> C 语言与程序设计</h1>\n<ul>\n<li>\n<p>C 语言特点</p>\n<ul>\n<li>语言本身简洁、灵活、表达能力强，被广泛运用于系统软件和应用软件的开发，并且具有良好的可移植性</li>\n</ul>\n</li>\n<li>\n<p>计算机的解题过程</p>\n<ol>\n<li>分析问题</li>\n<li>设计算法</li>\n<li>编写程序</li>\n<li>运行验证</li>\n</ol>\n</li>\n<li>\n<p>算法的概念</p>\n<ul>\n<li>算法是精确定义的一系列规则的集合，这些规则规定了解决特定问题的一系列操作，以便于在有限的步骤内产生出问题的答案。</li>\n</ul>\n</li>\n<li>\n<p>算法的特性</p>\n<ol>\n<li>有穷性</li>\n<li>确定性</li>\n<li>可行性</li>\n<li>输入</li>\n<li>输出</li>\n</ol>\n</li>\n<li>\n<p>算法的表示</p>\n<ol>\n<li>自然语言的描述</li>\n<li>传统流程图</li>\n<li>N-S 流程图</li>\n<li>伪代码</li>\n</ol>\n</li>\n<li>\n<p>常用的算法介绍</p>\n<ol>\n<li>枚举法</li>\n<li>递推法</li>\n<li>递归法</li>\n<li>回溯法</li>\n<li>贪婪法</li>\n<li>动态规划法</li>\n</ol>\n</li>\n<li>\n<p>结构化程序的设计基本思想</p>\n<ol>\n<li>采用自顶向下，逐步求精的程序设计</li>\n<li>任何程序只使用顺序、选择和循环这三种基本控制结构</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"c语言基本概念\"><a class=\"anchor\" href=\"#c语言基本概念\">#</a> C 语言基本概念</h1>\n<ul>\n<li>\n<p>简单的 C 语言程序</p>\n<ul>\n<li>简单输出一个 <span class=\"rainbow\">hello world</span> 字符串，表明向全世界宣布 &quot;C 语言我来了！&quot;</li>\n</ul>\n</li>\n<li>\n<p>关键字和标识符</p>\n<ul>\n<li>字符集</li>\n<li>关键字</li>\n<li>标识符</li>\n</ul>\n</li>\n<li>\n<p>数据类型</p>\n<ul>\n<li>基本类型\n<ul>\n<li>整数类型</li>\n<li>浮点类型</li>\n<li>字符类型</li>\n<li>枚举类型</li>\n</ul>\n</li>\n<li>构造类型</li>\n<li>指针类型</li>\n<li>空类型 (void)</li>\n</ul>\n</li>\n<li>\n<p>常量和变量</p>\n<ul>\n<li>整数常量</li>\n<li>浮点数常量</li>\n<li>字符常量</li>\n<li>字符串常量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PI</span> <span class=\"token expression\"><span class=\"token number\">3.14159</span></span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>变量</p>\n<ul>\n<li>变量声明\n<ul>\n<li>格式： 数据类型  变量名列表</li>\n</ul>\n</li>\n<li>变量初始化</li>\n</ul>\n</li>\n<li>\n<p>运算符和表达式</p>\n<ul>\n<li>算术运算符</li>\n<li>自增自减运算符</li>\n<li>算术运算符 (实际运用中少，考试出题较多)</li>\n<li>赋值运算符</li>\n<li>其他运算符\n<ul>\n<li>逗号运算符</li>\n<li>条件运算符</li>\n<li>求字节运算符 (sizeof ())</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>数据类型转换</p>\n<ul>\n<li>隐式转换\n<ul>\n<li>自动类型类型转换</li>\n<li>赋值类型转换</li>\n</ul>\n</li>\n<li>显式转换\n<ul>\n<li>强制类型转换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"程序控制结构\"><a class=\"anchor\" href=\"#程序控制结构\">#</a> 程序控制结构</h1>\n<ul>\n<li>顺序结构\n<ul>\n<li>赋值\n<ul>\n<li>=</li>\n</ul>\n</li>\n<li>数据输出\n<ul>\n<li>putchar() , printf()</li>\n</ul>\n</li>\n<li>数据输入\n<ul>\n<li>getchar() , scanf()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>选择结构\n<ul>\n<li>关系运算符、关系表达式</li>\n<li>逻辑运算符、逻辑表达式</li>\n<li>if, else, else if, switch</li>\n<li>选择嵌套</li>\n</ul>\n</li>\n<li>循环结构\n<ul>\n<li>while</li>\n<li>do while</li>\n<li>for</li>\n<li>循环嵌套</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"数组和字符串\"><a class=\"anchor\" href=\"#数组和字符串\">#</a> 数组和字符串</h1>\n<ul>\n<li>\n<p>一维数组</p>\n</li>\n<li>\n<p>冒泡排序</p>\n</li>\n<li>\n<p>选择排序</p>\n</li>\n<li>\n<p>二维数组</p>\n</li>\n<li>\n<p>多维数组</p>\n</li>\n</ul>\n<h1 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h1>\n<ul>\n<li>指针是表示计算机内存地址的数据类型，\n<ul>\n<li>指针就是地址，指针变量就是存储地址的变量</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<ul>\n<li></li>\n</ul>\n<h1 id=\"结构体-共用体和枚举\"><a class=\"anchor\" href=\"#结构体-共用体和枚举\">#</a> 结构体、共用体和枚举</h1>\n<h1 id=\"文件\"><a class=\"anchor\" href=\"#文件\">#</a> 文件</h1>\n<h1 id=\"编译预处理\"><a class=\"anchor\" href=\"#编译预处理\">#</a> 编译预处理</h1>\n<h1 id=\"实验指导\"><a class=\"anchor\" href=\"#实验指导\">#</a> 实验指导</h1>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/01/16/note/securityFrame/",
            "url": "https://hongkuan.github.io/2023/01/16/note/securityFrame/",
            "title": "亚信安全框架遇到的坑",
            "date_published": "2023-01-16T05:48:53.000Z",
            "content_html": "<ul>\n<li>问题一\n<ol>\n<li>框架表单配置问题预览<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%B8%80.png\" alt=\"页面显示问题\" /></li>\n<li>该框架页面配置设计 f_page 以开头的<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%BA%8C.png\" alt=\"解决问题思路\" /></li>\n<li>从前端查看并定位请求后端的路径<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%B8%89.png\" alt=\"第一步\" /></li>\n<li>找到 f_page_cmpt_attr 表，ctrl + f 全局搜索路径，找到对应的 cmpt_id<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E5%9B%9B.png\" alt=\"第二步\" /></li>\n<li>找到 f_page_view_layout 找到 view_id 为 10007，business_id 为 9300003<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%BA%94.png\" alt=\"第三步\" /></li>\n<li>输入账号登录系统，然后刷新系统<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E5%85%AD.png\" alt=\"第四步\" /></li>\n<li>最后成功的样例图<br />\n<img data-src=\"/img/%E4%BA%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E8%A1%A8%E5%8D%95%E5%B1%95%E7%A4%BA/%E6%A0%87%E8%AF%86%E8%A7%A3%E6%9E%90%E9%97%AE%E9%A2%98%E4%B8%83.png\" alt=\"第五步\" /></li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/01/13/note/hexoUseReport/",
            "url": "https://hongkuan.github.io/2023/01/13/note/hexoUseReport/",
            "title": "hexo使用问题记录",
            "date_published": "2023-01-13T03:04:53.000Z",
            "content_html": "<h2 id=\"hexo-d-timeout\"><a class=\"anchor\" href=\"#hexo-d-timeout\">#</a> hexo d timeout</h2>\n<ul>\n<li>hexo d 部署到 github 仓库，经常超时，科学上网也用！</li>\n</ul>\n<p>效果图</p>\n<p><img data-src=\"/img/hexoPushTimeOut.png\" alt=\"提交代码超时问题\" /></p>\n<ul>\n<li>解决方法\n<ul>\n<li>找到项目的 _config.yml 文件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deploy:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  type: <span class=\"token function\">git</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># 1. 问题： 仓库地址 repository 设置成 https 开头，会经常超时</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\"># repo: https://github.com/hk2012/hk2012.github.io.git</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\"># 2. 解决方法   </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  repo: git@github.com:hk2012/hk2012.github.io.git</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  branch: master</pre></td></tr></table></figure>",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/01/12/note/npmUse/",
            "url": "https://hongkuan.github.io/2023/01/12/note/npmUse/",
            "title": "npm 使用记录",
            "date_published": "2023-01-12T08:36:53.000Z",
            "content_html": "<h2 id=\"npm-使用记录\"><a class=\"anchor\" href=\"#npm-使用记录\">#</a> npm 使用记录</h2>\n<ul>\n<li>npm 版本升级</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">npm</span></pre></td></tr></table></figure><ul>\n<li>npm 版本降级  （6.14 就是你想要降的版本）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> npm@6.14 <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><ul>\n<li>npm 清理缓存</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> cache clean <span class=\"token parameter variable\">-f</span></pre></td></tr></table></figure><h2 id=\"vue-通过-nginx-部署-404-问题\"><a class=\"anchor\" href=\"#vue-通过-nginx-部署-404-问题\">#</a> vue 通过 nginx 部署 404 问题</h2>\n<p>效果图<br />\n<img data-src=\"/img/nginx_404_route.png\" alt=\"vue history模式 404\" /></p>\n<ul>\n<li>PS : 之所以出现上面的现象，是因为在 nginx 配置的文件下面压根没有 'build/index' 这个真实资源存在，这些访问<br />\n资源都是在 js 里渲染的。</li>\n</ul>\n<ol>\n<li>问题： 出现 404 的原因是由于在这个域名根目录 /data/irs/irs-caster/frontend 文件下面压根没有 'build/index' 这个真实资源存在</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        listen       <span class=\"token number\">2643</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        server_name  <span class=\"token number\">43.192</span>.4.68<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        index index.php index.html index.htm default.php default.htm default.html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        root /data/irs/irs-caster/frontend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>解决问题</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    listen       <span class=\"token number\">2643</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    server_name  <span class=\"token number\">43.192</span>.4.68<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    index index.php index.html index.htm default.php default.htm default.html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    root /data/irs/irs-caster/frontend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">#vue-router 配置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ @router<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    index index.html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    location @router <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    rewrite ^.*$ /index.html last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>重启 nginx 后，问题就迎刃而解了。</p>\n</li>\n<li>\n<p>测试</p>\n</li>\n</ol>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/01/11/note/influxdbTheory/",
            "url": "https://hongkuan.github.io/2023/01/11/note/influxdbTheory/",
            "title": "influxdb 知识总结",
            "date_published": "2023-01-11T08:25:53.000Z",
            "content_html": "<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<ul>\n<li>定义：influxDB 是一个有 influxData 开发的开源时序型数据库，专注于海量时序数据的高性能读和写、高效存储和实时分析。广泛应用于 DevOps 监控、实时分析，物联网监控（loT 监控）等.</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2023/01/11/note/messageQueue/",
            "url": "https://hongkuan.github.io/2023/01/11/note/messageQueue/",
            "title": "消息队列 知识总结",
            "date_published": "2023-01-11T07:25:53.000Z",
            "content_html": "<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<ul>\n<li>\n<p>消息队列：消息是进程或是系统之间通讯的一种方式。系统之间通讯还有另一种方式：RPC（目前的 gRPC）.</p>\n</li>\n<li>\n<p>组成部分：</p>\n<ol>\n<li>Broker (消息服务器，核心部分)</li>\n<li>producer (消息生产者)</li>\n<li>consumer (消息消费者)</li>\n<li>Topic (主题)</li>\n<li>Queue (队列)</li>\n<li>Message (消息体)</li>\n</ol>\n</li>\n<li>\n<p>消息队列</p>\n<ol>\n<li>应用解耦</li>\n<li>流量削峰</li>\n<li>异步通信</li>\n<li>日志收集</li>\n<li>事务最终一致性 ：定义全局事务管理器，和局部资源管理器</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2022/11/17/note/dataTransferOptimization/",
            "url": "https://hongkuan.github.io/2022/11/17/note/dataTransferOptimization/",
            "title": "二级节点同步数据优化至每日1500万",
            "date_published": "2022-11-17T07:27:53.000Z",
            "content_html": "<h3 id=\"背景介绍\"><a class=\"anchor\" href=\"#背景介绍\">#</a> 背景介绍</h3>\n<ol>\n<li>二级节点：相当于标识解析系统的上级，标识解析系统所产生的 &lt;产品模板&gt; 和 &lt; 产品标识 &gt; 的数据都要同步到 2 级节点平台上</li>\n<li>同步：二级节点为我们提供对外的 api，我们通过 api 文档上传对应的数据</li>\n<li>同步顺序：先同步产品模板，后同步产品标识。因为同步的标识会关联到对应的产品模板.</li>\n</ol>\n<h3 id=\"优化历程\"><a class=\"anchor\" href=\"#优化历程\">#</a> 优化历程</h3>\n<ol>\n<li>将同步二级节点的接口，从同步单个接口换成了批量同步接口 (每次最多同步 2k 个)</li>\n<li>将前缀索引查询换成偏移量进行查询优化</li>\n<li>将 for 循环里的 sql 语句，修改为批量同步和查询，减少系统和数据库的请求次数。节省大量创建连接和断开连接的时间。</li>\n</ol>\n<h3 id=\"方案\"><a class=\"anchor\" href=\"#方案\">#</a> 方案</h3>\n<ol>\n<li>将每一个可能消耗时间的步骤都添加了时间消耗统计，分析一下代码每次同步 2k 条数据消耗时长大概在 12s 左右</li>\n</ol>\n<ul>\n<li>原来的代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token comment\">// 这个 values 是从数据库查询出来的 2000 条数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RowValue</span> rowValue <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">String</span> update <span class=\"token operator\">=</span> <span class=\"token string\">\"update irs_single_product_data set status= \"</span> <span class=\"token operator\">+</span> status <span class=\"token operator\">+</span> <span class=\"token string\">\"  where \"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">\"handle ='\"</span> <span class=\"token operator\">+</span> rowValue<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                wapiBaseService<span class=\"token punctuation\">.</span><span class=\"token function\">customSql</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">,</span> <span class=\"token string\">\"db_irs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新标识状态异常，\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优化后的代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mapper层<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 通过 handle 批量修改状态</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param status</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param handles</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">updateBatchStatusByHandle</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handles\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> handles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>mapperxml层：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span>update id<span class=\"token operator\">=</span><span class=\"token string\">\"updateBatchStatusByHandle\"</span> parameterType<span class=\"token operator\">=</span><span class=\"token string\">\"java.util.List\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token annotation punctuation\">@mbg.generated</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span>foreach  collection<span class=\"token operator\">=</span><span class=\"token string\">\"handles\"</span> item<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span> <span class=\"token keyword\">open</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> close<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> separator<span class=\"token operator\">=</span><span class=\"token string\">\";\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            update irs_single_product_data</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>set<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                 status <span class=\"token operator\">=</span> #<span class=\"token punctuation\">&#123;</span>status<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>set<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            where handle <span class=\"token operator\">=</span> #<span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>foreach<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>update<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>service层：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> handle <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">int</span> statusInteger <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            irsSingleProductDataMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateBatchStatusByHandle</span><span class=\"token punctuation\">(</span>statusInteger<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"更新标识状态异常，\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>最后还要再jdbc url配置文件拼接 <span class=\"token operator\">&amp;</span>allowMultiQueries<span class=\"token operator\">=</span><span class=\"token boolean\">true</span> ，还要在mysql中配置max_allowed_packet 大小，我目前设置的是<span class=\"token number\">1</span>G</pre></td></tr></table></figure><ul>\n<li>此次优化将时间控制在 5s 左右</li>\n</ul>\n<ol start=\"2\">\n<li>在同步多家不同的企业发现，在同步和验证数据的时候发现花费的时间不同，有长有短</li>\n</ol>\n<ul>\n<li>原来的代码：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">synchSingleDatas</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state_url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> token<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> templates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> state_url <span class=\"token operator\">+</span> <span class=\"token string\">\"/identityv2/data/batchCreate\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 批量注册</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 查询 prefix 关联模板</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SynchCreateHandle</span><span class=\"token punctuation\">></span></span> handles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> productMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">String</span> tempId <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RowValue</span> template <span class=\"token operator\">:</span> templates<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> resultlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">String</span> piciHandle <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pici_handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">String</span> proHandle <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product_handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>productMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>proHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    resultlist <span class=\"token operator\">=</span> wapiBaseService</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">customQuerySql</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                    <span class=\"token string\">\" select * from irs_standerd_register_data where handle = '\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                            <span class=\"token operator\">+</span> proHandle <span class=\"token operator\">+</span> <span class=\"token string\">\"' and opreate=1 and state=1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                    <span class=\"token string\">\"db_irs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultlist<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        tempId <span class=\"token operator\">=</span> resultlist<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"template_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        productMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product_handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tempId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    tempId <span class=\"token operator\">=</span> productMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product_handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token function\">formatCreateSingleHandleContent</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tempId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        handles<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">,</span> piciHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>handles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> responses <span class=\"token operator\">=</span> irsHttpService<span class=\"token punctuation\">.</span><span class=\"token function\">batchRegisterHandle</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步接口返回： &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标识数据同步失败,\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"99\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">formatCreateSingleHandleContent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> product<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> tempId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                                                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SynchCreateHandle</span><span class=\"token punctuation\">></span></span> handles<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> piciHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">SynchCreateHandle</span> handle <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        handleValue value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">HandleData</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        handle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchCreateHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>handleValue<span class=\"token punctuation\">></span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        handle<span class=\"token punctuation\">.</span><span class=\"token function\">setHandle</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        handle<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateVersion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单品模板\"</span> <span class=\"token operator\">+</span> tempId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> datas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tempId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            datas <span class=\"token operator\">=</span> wapiBaseService</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">customQuerySql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM irs_template_elements WHERE template_id = \"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                            <span class=\"token operator\">+</span> tempId <span class=\"token operator\">+</span> <span class=\"token string\">\" AND property != 'private'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db_irs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>tempId<span class=\"token punctuation\">,</span> datas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            datas <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tempId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datas <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>datas<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RowValue</span> temp <span class=\"token operator\">:</span> datas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token comment\">// 查询 handle 的 value 值</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">handleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandleData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                value<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                value<span class=\"token punctuation\">.</span><span class=\"token function\">setAuth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                value<span class=\"token punctuation\">.</span><span class=\"token function\">setIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                data<span class=\"token punctuation\">.</span><span class=\"token function\">setFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                data<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                value<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                values<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            handle<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            handles<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单品模板异常,\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>handles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优化后的代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">synchSingleDatas</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state_url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> token<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> state_url <span class=\"token operator\">+</span> <span class=\"token string\">\"/identityv2/data/batchCreate\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 批量注册</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">StopWatch</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopWatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步接口返回耗时\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SynchCreateHandle</span><span class=\"token punctuation\">></span></span> handles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"product_handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">AtomicReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> datas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            collect<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>productHandleKey<span class=\"token punctuation\">,</span> singleHandleValues<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RowValue</span><span class=\"token punctuation\">></span></span> resultlist <span class=\"token operator\">=</span> wapiBaseService<span class=\"token punctuation\">.</span><span class=\"token function\">customQuerySql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select template_id from irs_standerd_register_data where handle = '\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                            <span class=\"token operator\">+</span> productHandleKey <span class=\"token operator\">+</span> <span class=\"token string\">\"' and opreate = 1 and state = 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db_irs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token class-name\">String</span> tempId <span class=\"token operator\">=</span> resultlist<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"template_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    datas<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>wapiBaseService</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">customQuerySql</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM irs_template_elements WHERE template_id = \"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                    <span class=\"token operator\">+</span> tempId <span class=\"token operator\">+</span> <span class=\"token string\">\" AND property != 'private'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"db_irs\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> singleHandle <span class=\"token operator\">:</span> singleHandleValues<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token class-name\">SynchCreateHandle</span> handle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        handleValue value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token class-name\">HandleData</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        handle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchCreateHandle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>handleValue<span class=\"token punctuation\">></span></span> elementValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        handle<span class=\"token punctuation\">.</span><span class=\"token function\">setHandle</span><span class=\"token punctuation\">(</span>singleHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        handle<span class=\"token punctuation\">.</span><span class=\"token function\">setTemplateVersion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单品模板\"</span> <span class=\"token operator\">+</span> tempId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RowValue</span> temp <span class=\"token operator\">:</span> datas<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                            <span class=\"token comment\">// 查询 handle 的 value 值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                            value <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">handleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                            data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandleData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                            value<span class=\"token punctuation\">.</span><span class=\"token function\">setType</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"English_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                            value<span class=\"token punctuation\">.</span><span class=\"token function\">setAuth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            value<span class=\"token punctuation\">.</span><span class=\"token function\">setIndex</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            data<span class=\"token punctuation\">.</span><span class=\"token function\">setFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            data<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            value<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                            elementValues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        handles<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单品模板异常,\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>handles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> responses <span class=\"token operator\">=</span> irsHttpService<span class=\"token punctuation\">.</span><span class=\"token function\">batchRegisterHandle</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"同步接口返回： &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token constant\">LOGGER</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标识数据同步失败,\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"99\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>此次优化将时间控制在 2s 左右</li>\n</ul>\n",
            "tags": [
                "总结"
            ]
        },
        {
            "id": "https://hongkuan.github.io/2022/10/16/note/kafkaManual/",
            "url": "https://hongkuan.github.io/2022/10/16/note/kafkaManual/",
            "title": "kafka使用手册",
            "date_published": "2022-10-16T07:27:53.000Z",
            "content_html": "<p>systemctl start kafka<br />\nsystemctl start zookeeper</p>\n<p>zookeeper 启动：<br />\ncd zookeeper home<br />\n 例如：<br />\ncd /home/user/app/zookeeper/bin<br />\nsh <span class=\"exturl\" data-url=\"aHR0cDovL3prU2VydmVyLnNo\">zkServer.sh</span> start</p>\n<p>1、启动 kafka<br />\nnohup bin/kafka-server-start.sh config/server.properties &amp;</p>\n<p>2、创建 topic：<br />\nbin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 <br />\n--create --partitions 1 --replication-factor 1 --topic flowpush<br />\n 测试环境中<br />\n bin/kafka-topics.sh --bootstrap-server 192.168.199.83:22390 <br />\n--create --partitions 1 --replication-factor 1 --topic flowpush</p>\n<p>bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 <br />\n--create --topic goods --partitions 1 --replication-factor 2</p>\n<p>bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 <br />\n--create --topic provider --partitions 1 --replication-factor 2</p>\n<p>bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 <br />\n--create --topic orders --partitions 10 --replication-factor 2</p>\n<p>3、删除 topic<br />\nbin/kafka-topics.sh --delete --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --topic orders</p>\n<p>3、查看 topic<br />\nbin/kafka-topics.sh --list --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390<br />\n 测试环境中<br />\n bin/kafka-topics.sh --list --bootstrap-server 192.168.199.83:22390</p>\n<p>bin/kafka-topics.sh --describe --bootstrap-server 192.168.199.83:22390 --topic orderSec-3</p>\n<p>4、发送消息到 topic = orders  ------<br />\nbin/kafka-console-producer.sh --broker-list 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --topic orders</p>\n<p>5、从头查看 topic=orders 的消息<br />\n bin/kafka-console-consumer.sh --bootstrap-server 192.168.199.83:22390,192.168.199.83:22390,192.168.199.83:22390 --from-beginning --topic test<br />\nbin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:22390  --from-beginning --topic leakdatas<br />\n6、查看 topic 最近的消息<br />\n查看最新：<br />\nbin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:22390 --topic notes</p>\n<p>7、查看每个分区的 offset<br />\n./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list 192.168.139.199:22390,192.168.139.209:22390,192.168.139.210:22390 --topic test1<br />\n./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list  127.0.0.1:22390 --topic leakdatas</p>\n<p>8、分区扩展<br />\n bin/kafka-topics.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --alter --topic orders --partitions 10</p>\n<p>配置 jks 访问：<br />\n查看 topic<br />\n./kafka-topics.sh --list --zookeeper <span class=\"exturl\" data-url=\"aHR0cDovL2thZmthLmJyb2tlci5jb206NjAwNjU=\">kafka.broker.com:60065</span></p>\n<p>9、移动偏移量<br />\n注意：执行此命令前需先断开消费者<br />\n bin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.83:22390 --group report --reset-offsets --all-topics --to-latest --execute<br />\n 修改 topic 所有分区偏移量为指定偏移量：<br />\nbin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.83:22390 --group report --topic reportData --reset-offsets --to-offset 10 --execute<br />\n 修改 topic 指定分区的偏移量：<br />\nbin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.83:22390 --group report --topic reportData:0 --reset-offsets --to-offset 15 --execute</p>\n<p>10、查看 group 描述</p>\n<p>删除 group 记录<br />\n./kafka-consumer-groups.sh --bootstrap-server <span class=\"exturl\" data-url=\"aHR0cDovL2thZmthLmJyb2tlci5jb206NjAwNjU=\">kafka.broker.com:60065</span> --delete --group export</p>\n<p>bin/kafka-consumer-groups.sh --bootstrap-server 192.168.199.95:22390,192.168.199.81:22390,192.168.199.120:22390 --group leakinfo --describe</p>\n<p>11、查看 topic 描述<br />\n bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 --topic lx_test_topic --describe<br />\nbin/kafka-topics.sh --bootstrap-server 192.168.199.95:22390 --describe --topic reportData<br />\nbin/kafka-topics.sh --bootstrap-server 127.0.0.1:22390 --describe --topic reportData</p>\n<p>12、修改日志保留时间<br />\n 2.3 版本：<br />\nbin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name smsMessage --alter --add-config retention.ms=864000000    //10 天<br />\n bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name quickRecognise --alter --add-config retention.ms=259200000   //3 天<br />\n bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name leakdatas --alter --add-config retention.ms=259200000<br />\nbin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name leftDevices --alter --add-config retention.ms=259200000<br />\nbin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name reinstall --alter --add-config retention.ms=259200000<br />\nbin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name flowpush --alter --add-config retention.ms=604800000<br />\n2.5 版本：<br />\nbin/kafka-configs.sh --bootstrap-server localhost:9092 --entity-type topics --entity-name my-topic --alter --add-config retention.ms=864000000</p>\n<p>13、导出 topic 所有信息到文件<br />\n nohup bin/kafka-console-consumer.sh --bootstrap-server 172.17.1.8:22390,172.17.1.9:22390,172.17.1.10:22390 --from-beginning --topic testlog &gt;&gt; test.out &amp;<br />\nnohup bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:22390 --from-beginning --topic leakdatas &gt;&gt; test.out &amp;</p>\n<p>14、查看 topic 配置参数<br />\n bin/kafka-configs.sh --zookeeper 192.168.199.95:22392,192.168.199.81:22392,192.168.199.120:22392 --entity-type topics --entity-name flowpush --describe</p>\n<p>bin/kafka-console-consumer.sh --bootstrap-server 192.168.199.83:22390 --topic leak_plugin12 --from-beginning</p>\n<p>4、发送消息到 topic = leak_plugin12<br />\nbin/kafka-console-producer.sh --broker-list 192.168.199.83:22390 --topic leak_plugin12</p>\n<p>3、查看 topic<br />\nbin/kafka-topics.sh --list --bootstrap-server 192.168.199.95:22390,192.168.199.81:22390,192.168.199.120:22390</p>\n",
            "tags": [
                "总结"
            ]
        }
    ]
}